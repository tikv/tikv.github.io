initSidebarItems({"enum":[["ScalarValue","A scalar value container, a.k.a. datum, for all concrete eval types."],["ScalarValueRef","A scalar value reference container. Can be created from `ScalarValue` or `VectorValue`."],["VectorValue","A vector value container, a.k.a. column, for all concrete eval types."]],"mod":[["bit_vec",""],["chunked_vec_bytes",""],["chunked_vec_common",""],["chunked_vec_json",""],["chunked_vec_sized",""],["scalar",""],["vector",""]],"struct":[["BitAndIterator",""],["BitVec","A boolean vector, which consolidates 8 booleans into 1 u8 to save space."],["BytesGuard",""],["BytesWriter",""],["ChunkedVecBytes",""],["ChunkedVecJson","A vector storing `Option<Json>` with a compact layout."],["ChunkedVecSized","A vector storing `Option<T>` with a compact layout."],["PartialBytesWriter",""]],"trait":[["AsMySQLBool","A trait of evaluating current concrete eval type into a MySQL logic value, represented by Rust's `bool` type."],["ChunkRef",""],["ChunkedVec",""],["Evaluable","A trait of all types that can be used during evaluation (eval type)."],["EvaluableRef",""],["EvaluableRet",""],["UnsafeRefInto",""],["VectorValueExt","Additional `VectorValue` methods available via generics. These methods support different concrete types but have same names and should be specified via the generic parameter type."]],"type":[["Bytes",""],["BytesRef",""],["Int",""],["Real",""]]});