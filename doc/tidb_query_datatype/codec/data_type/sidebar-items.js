initSidebarItems({"constant":[["BATCH_MAX_SIZE",""]],"enum":[["LogicalRows","LogicalRows is a replacement for `logical_rows` parameter in many of the copr functions. By distinguishing identical and non-identical mapping with a enum, we can directly tell if a `logical_rows` contains all items in a vector, and we may optimiaze many cases by using direct copy and construction."],["ScalarValue","A scalar value container, a.k.a. datum, for all concrete eval types."],["ScalarValueRef","A scalar value reference container. Can be created from `ScalarValue` or `VectorValue`."],["VectorValue","A vector value container, a.k.a. column, for all concrete eval types."]],"fn":[["retain_lifetime_transmute",""]],"mod":[["bit_vec",""],["chunked_vec_bytes",""],["chunked_vec_common",""],["chunked_vec_enum",""],["chunked_vec_json",""],["chunked_vec_set",""],["chunked_vec_sized",""],["logical_rows",""],["scalar",""],["vector",""]],"static":[["IDENTICAL_LOGICAL_ROWS","Identical logical row is a special case in expression evaluation that the rows in physical_value are continuous and in order."]],"struct":[["BitAndIterator",""],["BitVec","A boolean vector, which consolidates 64 booleans into 1 u64 to save space."],["BytesGuard",""],["BytesWriter",""],["ChunkedVecBytes",""],["ChunkedVecEnum","`ChunkedVecEnum` is a vector storing `Option<Enum>`."],["ChunkedVecJson","A vector storing `Option<Json>` with a compact layout."],["ChunkedVecSet","`ChunkedVecSet` stores set in a compact way."],["ChunkedVecSized","A vector storing `Option<T>` with a compact layout."],["PartialBytesWriter",""]],"trait":[["AsMySQLBool","A trait of evaluating current concrete eval type into a MySQL logic value, represented by Rustâ€™s `bool` type."],["ChunkRef",""],["ChunkedVec","Notes"],["Evaluable","A trait of all types that can be used during evaluation (eval type)."],["EvaluableRef",""],["EvaluableRet",""],["UnsafeRefInto",""],["VectorValueExt","Additional `VectorValue` methods available via generics. These methods support different concrete types but have same names and should be specified via the generic parameter type."]],"type":[["Bytes",""],["BytesRef",""],["Int",""],["Real",""]]});