initSidebarItems({"constant":[["INVALID_ID","A constant represents invalid id of raft."],["INVALID_INDEX","A constant represents invalid index of raft log."]],"enum":[["Error","The base error type for raft"],["ProgressState","The state of the progress."],["ReadOnlyOption","Determines the relative safety of and consistency of read only requests."],["StateRole","The role of the node."],["StorageError","An error with the storage."]],"fn":[["vote_resp_msg_type","Maps vote and pre_vote message types to their correspond responses."]],"mod":[["eraftpb","Generated file from `eraftpb.proto`"],["prelude","A “prelude” for crates using the `raft` crate."],["raw_node","The raw node of the raft module."],["storage","Represents the storage trait and example implementation."],["util","This module contains a collection of various tools to use to manipulate and control messages and data associated with raft."]],"struct":[["Changer","Changer facilitates configuration changes. It exposes methods to handle simple and joint consensus while performing the proper validation that allows refusing invalid configuration changes before they affect the active configuration."],["Config","Config contains the parameters to start a raft."],["Inflights","A buffer of inflight messages."],["JointConfig","A configuration of two groups of (possibly overlapping) majority configurations. Decisions require the support of both majorities."],["MajorityConfig","A set of IDs that uses majority quorums to make decisions."],["Progress","The progress of catching up from a restart."],["ProgressTracker","`ProgressTracker` contains several `Progress`es, which could be `Leader`, `Follower` and `Learner`."],["Raft","A struct that represents the raft consensus itself. Stores details concerning the current and possible state the system can take."],["RaftLog","Raft log implementation"],["ReadState","ReadState provides state for read only query. It’s caller’s responsibility to send MsgReadIndex first before getting this state from ready. It’s also caller’s duty to differentiate if this state is what it requests through request_ctx, e.g. given a unique id as request_ctx."],["SoftState","SoftState provides state that is useful for logging and debugging. The state is volatile and does not need to be persisted to the WAL."],["Status","Represents the current status of the raft"],["Unstable","The unstable.entries[i] has raft log position i+unstable.offset. Note that unstable.offset may be less than the highest log position in storage; this means that the next write to storage might need to truncate the log before persisting unstable.entries."]],"type":[["MapChange","Changes made by `Changer`."],["Result","A result type that wraps up the raft errors."]]});