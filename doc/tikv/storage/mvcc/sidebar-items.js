initSidebarItems({"constant":[["MAX_TXN_WRITE_SIZE",""],["SHORT_VALUE_MAX_LEN",""]],"enum":[["ErrorInner",""],["LockType",""],["Mutation","A row mutation."],["NewerTsCheckState",""],["Scanner",""],["TxnCommitRecord","The result of `get_txn_commit_record`, which is used to get the status of a specified transaction from write cf."],["WriteType",""]],"fn":[["check_need_gc",""],["default_not_found_error","Generates `DefaultNotFound` error or panic directly based on config."],["has_data_in_range",""],["seek_for_valid_write","Seek for the next valid (write type == Put or Delete) write record. The write cursor must indicate a data key of the user key of which ts <= after_ts. Return None if cannot find any valid write record."]],"mod":[["consistency_check",""],["metrics",""],["reader",""],["test_util",""],["tests",""],["txn",""]],"struct":[["Error",""],["GC_DELETE_VERSIONS_HISTOGRAM",""],["GcInfo",""],["Key","Key type."],["Lock",""],["MVCC_VERSIONS_HISTOGRAM",""],["MvccConsistencyCheckObserver",""],["MvccInfoIterator",""],["MvccReader",""],["MvccTxn","An abstraction of a locally-transactional MVCC key-value store"],["OverlappedWrite",""],["PointGetter","This struct can be used to get the value of user keys. Internally, rollbacks are ignored and smaller version will be tried. If the isolation level is Si, locks will be checked first."],["PointGetterBuilder","`PointGetter` factory."],["ReleasedLock","`ReleasedLock` contains the information of the lock released by `commit`, `rollback` and so on. It's used by `LockManager` to wake up transactions waiting for locks."],["ScannerBuilder",""],["TimeStamp",""],["Write",""],["WriteRef",""]],"type":[["DeltaScanner","This scanner scans all entries whose commit_ts (or locks' start_ts) is in range (from_ts, cfg.ts]."],["EntryScanner","This scanner is like `ForwardKvScanner` but outputs `TxnEntry`."],["Result",""],["Value","Value type which is essentially raw bytes."]]});