initSidebarItems({"constant":[["RESOLVE_LOCK_BATCH_SIZE",""]],"enum":[["ErrorInner",""],["ProcessResult","Process result of a command."],["TxnEntry","A transaction entry in underlying storage."]],"fn":[["acquire_pessimistic_lock",""],["commit",""],["pessimistic_prewrite",""],["prewrite",""]],"mod":[["actions","This file contains the \"actions\" we perform on a [`MvccTxn`] and related tests \"Actions\" here means a group of more basic operations, eg. [`MvccTxn::load_lock`], [`MvccTxn::put_write`], which are methods on [`MvccTxn`], for archiving a certain target"],["commands","Commands used in the transaction system"],["latch",""],["sched_pool",""],["scheduler","Scheduler which schedules the execution of `storage::Command`s."],["store",""],["tests",""]],"struct":[["EntryBatch","A batch of transaction entries."],["Error",""],["FixtureStore","A Store that reads on fixtures."],["FixtureStoreScanner","A Scanner that scans on fixtures."],["SnapshotStore",""]],"trait":[["Scanner","[`Scanner`]s allow retrieving items or batches from a scan result."],["Store",""],["TxnEntryScanner","[`TxnEntryScanner`] allows retrieving items or batches from a scan result."],["TxnEntryStore",""]],"type":[["Result",""]]});