initSidebarItems({"enum":[["PessimisticLockRes",""],["SecondaryLocksStatus",""],["StorageCallback",""],["TxnStatus","Represents the status of a transaction."]],"fn":[["async_commit_check_keys",""],["build_read_pool",""],["build_read_pool_for_test",""],["get_priority_tag",""]],"mod":[["config","Storage configuration."],["errors",""],["kv",""],["lock_manager",""],["metrics",""],["mvcc","Multi-version concurrency control functionality."],["read_pool",""],["test_util",""],["txn","Storage Transactions"],["types","Core data types."]],"struct":[["CfStatistics","Statistics collects the ops taken when fetching data."],["Cursor",""],["FlowStatistics",""],["PrewriteResult",""],["RocksEngine","The RocksEngine is based on `RocksDB`."],["SnapshotStore",""],["Statistics",""],["Storage","[`Storage`] implements transactional KV APIs and raw KV APIs on a given [`Engine`]. An [`Engine`]  provides low level KV functionality. [`Engine`] has multiple implementations. When a TiKV server  is running, a [`RaftKv`] will be the underlying [`Engine`] of [`Storage`]. The other two types of  engines are for test purpose."],["TestEngineBuilder","A builder to build a temporary `RocksEngine`."],["TestStorageBuilder","A builder to build a temporary `Storage<E>`."]],"trait":[["FlowStatsReporter",""],["Scanner","[`Scanner`]s allow retrieving items or batches from a scan result."],["Store",""]],"type":[["Callback",""],["Result",""]]});