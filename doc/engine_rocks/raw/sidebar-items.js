initSidebarItems({"enum":[["CompactionPriority",""],["DBBottommostLevelCompaction",""],["DBCompactionStyle",""],["DBCompressionType",""],["DBEntryType",""],["DBInfoLogLevel",""],["DBRateLimiterMode",""],["DBRecoveryMode",""],["DBStatisticsTickerType","This file is generated from generate.py. Re-generate it if you upgrade to a new version of RocksDB."],["DBTitanDBBlobRunMode",""],["SeekKey",""]],"fn":[["new_compaction_filter_raw","Just like `new_compaction_filter`, but returns a raw pointer instead of a RAII struct. Generally used in `CompactionFilterFactory::create_compaction_filter`."],["run_ldb_tool",""]],"struct":[["BlockBasedOptions",""],["CFHandle",""],["Cache",""],["ColumnFamilyOptions",""],["CompactOptions",""],["CompactionFilterContext",""],["CompactionJobInfo",""],["DB",""],["DBCompactionFilter",""],["DBIterator",""],["DBOptions",""],["Env",""],["IngestExternalFileOptions","IngestExternalFileOptions is used by DB::ingest_external_file"],["LRUCacheOptions",""],["MemoryAllocator",""],["PerfContext",""],["Range","A range of keys, `start_key` is included, but not `end_key`."],["ReadOptions",""],["TitanBlobIndex",""],["TitanDBOptions",""],["WriteOptions",""]],"trait":[["CompactionFilter","`CompactionFilter` allows an application to modify/delete a key-value at the time of compaction. For more details, Please checkout rocksdb's documentation."],["CompactionFilterFactory",""],["EventListener","EventListener trait contains a set of call-back functions that will be called when specific RocksDB event happens such as flush.  It can be used as a building block for developing custom features such as stats-collector or external compaction algorithm."],["SliceTransform",""],["TableFilter",""],["TablePropertiesCollector","`TablePropertiesCollector` provides the mechanism for users to collect their own properties that they are interested in. This class is essentially a collection of callback functions that will be invoked during table building. It is constructed with TablePropertiesCollectorFactory. The methods don't need to be thread-safe, as we will create exactly one TablePropertiesCollector object per table and then call it sequentially"],["TablePropertiesCollectorFactory","Constructs `TablePropertiesCollector`. Internals create a new `TablePropertiesCollector` for each new table."],["Writable",""]]});