initSidebarItems({"constant":[["NO_LIMIT",""],["PANIC_MARK_FILE",""],["SPACE_PLACEHOLDER_FILE",""]],"enum":[["Either","Represents a value of one of two possible types (a more generic Result.)"]],"fn":[["check_environment_variables","Checks environment variables that affect TiKV."],["create_panic_mark_file",""],["escape","A function to escape a byte array to a readable ascii string. escape rules follow golang/protobuf. https://github.com/golang/protobuf/blob/master/proto/text.go#L578"],["get_tag_from_thread_name",""],["is_even",""],["is_zero_duration",""],["panic_mark_file_exists",""],["panic_mark_file_path",""],["panic_mark_is_on",""],["panic_when_unexpected_key_or_data",""],["reserve_space_for_recover",""],["set_panic_hook","Exit the whole process when panic."],["set_panic_mark",""],["set_panic_when_unexpected_key_or_data",""],["slices_in_range","Take slices in the range."],["unescape","A function to unescape an escaped string to a byte array."]],"macro":[["box_err","A shortcut to box an error."],["box_try","Boxes error first, and then does the same thing as `try!`."],["count_args","Gets the count of macro's arguments."],["defer","Simulates Go's defer."],["map","Initializes a `HashMap` with specified key-value pairs."],["safe_panic","A safe panic macro that prevents double panic."],["slow_log","Logs slow operations by `warn!`. The final log level depends on the given `cost` and `slow_log_threshold`"],["thd_name","Makes a thread name with an additional tag inherited from the current thread."],["try_opt","Checks `Result<Option<T>>`, and returns early when it meets `Err` or `Ok(None)`."],["try_opt_or","Checks `Result<Option<T>>`, and returns early when it meets `Err` or `Ok(None)`. return `Ok(or)` when met `Ok(None)`."],["wait_op","Waits for async operation. It returns `Option<Res>` after the expression gets executed. It only accepts a `Result` expression."]],"mod":[["buffer_vec",""],["callback",""],["codec",""],["collections",""],["config",""],["deadline",""],["file",""],["future",""],["future_pool","This mod implemented a wrapped future pool that supports `on_tick()` which is invoked no less than the specific interval."],["keybuilder",""],["logger",""],["lru",""],["macros","The macros crate contains all useful needed macros."],["metrics",""],["mpsc","This module provides an implementation of mpsc channel based on crossbeam_channel. Comparing to the crossbeam_channel, this implementation supports closed detection and try operations."],["sys",""],["threadpool",""],["time",""],["timer",""],["trace",""],["worker","`Worker` provides a mechanism to run tasks asynchronously (i.e. in the background) with some additional features, for example, ticks."]],"static":[["PANIC_MARK",""],["PANIC_WHEN_UNEXPECTED_KEY_OR_DATA",""]],"struct":[["DefaultRng",""],["DeferContext","Invokes the wrapped closure when dropped."],["MustConsumeVec",""],["RingQueue","A simple ring queue with fixed capacity."]],"trait":[["AssertClone",""],["AssertCopy",""],["AssertSend",""],["AssertSync",""],["HandyRwLock","A handy shortcut to replace `RwLock` write/read().unwrap() pattern to shortcut wl and rl."],["TryInsertWith","A helper trait for `Entry` to accept a failable closure."]]});