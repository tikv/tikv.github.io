(function() {var implementors = {};
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Stream for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Stream for UnboundedReceiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_core"] = [];
implementors["grpcio"] = [{"text":"impl&lt;Resp&gt; Stream for ClientSStreamReceiver&lt;Resp&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Resp&gt; Stream for ClientDuplexReceiver&lt;Resp&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Stream for RequestStream&lt;T&gt;","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Stream for Body","synthetic":false,"types":[]}];
implementors["pd_client"] = [{"text":"impl Stream for HeartbeatReceiver","synthetic":false,"types":[]}];
implementors["rusoto_core"] = [{"text":"impl&lt;T:&nbsp;DeserializeEvent + Unpin&gt; Stream for EventStream&lt;T&gt;","synthetic":false,"types":[]}];
implementors["rusoto_signature"] = [{"text":"impl Stream for ByteStream","synthetic":false,"types":[]}];
implementors["tikv"] = [{"text":"impl Stream for SnapChunk","synthetic":false,"types":[]}];
implementors["tikv_util"] = [{"text":"impl&lt;T&gt; Stream for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, E, I, C&gt; Stream for BatchReceiver&lt;T, E, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Fn() -&gt; E + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: BatchCollector&lt;E, T&gt; + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead + Unpin&gt; Stream for AsyncReadAsSyncStreamOfBytes&lt;R&gt;","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl&lt;T, U&gt; Stream for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Decoder,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; Stream for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Decoder,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; Stream for FramedWrite&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Stream,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()