(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl RefUnwindSafe for RollingAdler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl RefUnwindSafe for AHasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RandomState","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for AHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; RefUnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; RefUnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl RefUnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colour","synthetic":true,"types":[]}];
implementors["antidote"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryLockError","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;'l, T&gt; RefUnwindSafe for Guard&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for ArcSwapAny&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DirectDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DynGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; RefUnwindSafe for MapGuard&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; RefUnwindSafe for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ConstantDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; RefUnwindSafe for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; RefUnwindSafe for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for PrivateSharded&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["async_speed_limit"] = [{"text":"impl RefUnwindSafe for StandardClock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nanoseconds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ManualDelay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ManualClock","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for Builder&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Instant: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for Limiter&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, R&gt; RefUnwindSafe for Consume&lt;C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Delay: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, C&gt; RefUnwindSafe for Resource&lt;R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Delay: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !RefUnwindSafe for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrintFmt","synthetic":true,"types":[]}];
implementors["backup"] = [{"text":"impl&lt;E, R&gt; !RefUnwindSafe for Endpoint&lt;E, R&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackupRawKVWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackupWriter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LimitedStorage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackupRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Progress&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ControlThreadPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BACKUP_REQUEST_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BACKUP_RANGE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BACKUP_RANGE_SIZE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BACKUP_THREAD_POOL_SIZE_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BACKUP_RANGE_ERROR_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Writer","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["batch_system"] = [{"text":"impl&lt;N, C&gt; !RefUnwindSafe for BatchSystem&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;Owner&gt; !RefUnwindSafe for BasicMailbox&lt;Owner&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Owner, Scheduler&gt; !RefUnwindSafe for Mailbox&lt;Owner, Scheduler&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C, Ns, Cs&gt; !RefUnwindSafe for Router&lt;N, C, Ns, Cs&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; RefUnwindSafe for NormalScheduler&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; RefUnwindSafe for ControlScheduler&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; RefUnwindSafe for Batch&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C, Handler&gt; !RefUnwindSafe for Poller&lt;N, C, Handler&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; RefUnwindSafe for FsmTypes&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReschedulePolicy","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for FsmState&lt;N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CheckDoResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Runner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HandleMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Handler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Message","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl RefUnwindSafe for BStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; RefUnwindSafe for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl RefUnwindSafe for BytesMut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bzip2_sys"] = [{"text":"impl RefUnwindSafe for bz_stream","synthetic":true,"types":[]}];
implementors["c2_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for State&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cache_size"] = [{"text":"impl RefUnwindSafe for CacheType","synthetic":true,"types":[]}];
implementors["cargo_metadata"] = [{"text":"impl RefUnwindSafe for Dependency","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Artifact","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArtifactProfile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BuildScript","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompilerMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PackageId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Resolve","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeDep","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DepKindInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Package","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DependencyKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CargoOpt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticSpanLine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticSpanMacroExpansion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticSpan","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Applicability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiagnosticLevel","synthetic":true,"types":[]}];
implementors["cdc"] = [{"text":"impl !RefUnwindSafe for CdcTxnExtraScheduler","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Endpoint&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CdcObserver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DownstreamID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Downstream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pending","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delegate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DownstreamState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PendingLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OldValueCache","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Initializer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Deregister","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CDC_RESOLVED_TS_GAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CDC_SCAN_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CDC_MIN_RESOLVED_TS_REGION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CDC_MIN_RESOLVED_TS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CDC_PENDING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CDC_CAPTURED_REGION_COUNT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CDC_OLD_VALUE_CACHE_MISS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CDC_OLD_VALUE_CACHE_ACCESS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CDC_OLD_VALUE_CACHE_BYTES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CDC_OLD_VALUE_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CDC_OLD_VALUE_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for OldValueReader&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventBatcher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FeatureGate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CdcEvent","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; RefUnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; RefUnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["chrono_tz"] = [{"text":"impl RefUnwindSafe for Tz","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AppSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shell","synthetic":true,"types":[]}];
implementors["cmd"] = [{"text":"impl&lt;ER&gt; !RefUnwindSafe for TiKVServer&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; !RefUnwindSafe for TiKVEngines&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; !RefUnwindSafe for Servers&lt;ER&gt;","synthetic":true,"types":[]}];
implementors["codec"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemComparableByteCodec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AscendingMemComparableCodecHelper","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescendingMemComparableCodecHelper","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactByteCodec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NumberCodec","synthetic":true,"types":[]}];
implementors["concurrency_manager"] = [{"text":"impl !RefUnwindSafe for KeyHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for KeyHandleGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LockTable","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConcurrencyManager","synthetic":true,"types":[]}];
implementors["configuration"] = [{"text":"impl RefUnwindSafe for ConfigValue","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]}];
implementors["crc64fast"] = [{"text":"impl RefUnwindSafe for Digest","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Injector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T, P&gt; RefUnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; RefUnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SegQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_skiplist"] = [{"text":"impl&lt;K, V&gt; !RefUnwindSafe for SkipList&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !RefUnwindSafe for SkipMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for SkipSet&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, K, V&gt; !RefUnwindSafe for Entry&lt;'a, 'g, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for RefEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, K, V&gt; !RefUnwindSafe for Iter&lt;'a, 'g, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for RefIter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, Q, R, K, V&gt; !RefUnwindSafe for Range&lt;'a, 'g, Q, R, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q, R, K, V&gt; !RefUnwindSafe for RefRange&lt;'a, Q, R, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !RefUnwindSafe for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q, R, K, V&gt; !RefUnwindSafe for Range&lt;'a, Q, R, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q, R, T&gt; !RefUnwindSafe for Range&lt;'a, Q, R, T&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !RefUnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !RefUnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; RefUnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["darling_core"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Fields&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, W&gt; RefUnwindSafe for Generics&lt;P, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; RefUnwindSafe for Data&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;T, L, C&gt; RefUnwindSafe for GenericParam&lt;T, L, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Purpose","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdentString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ignored","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathList","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SpannedValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; RefUnwindSafe for WithOriginal&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Override&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dashmap"] = [{"text":"impl&lt;K, V, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for ReadOnlyView&lt;K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for DashSet&lt;K, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for DashMap&lt;K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for OwningIter&lt;K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState, M&nbsp;=&nbsp;DashMap&lt;K, V, S&gt;&gt; !RefUnwindSafe for Iter&lt;'a, K, V, S, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState, M&nbsp;=&nbsp;DashMap&lt;K, V, S&gt;&gt; !RefUnwindSafe for IterMut&lt;'a, K, V, S, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, S&gt; !RefUnwindSafe for OwningIter&lt;K, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, S, M&gt; !RefUnwindSafe for Iter&lt;'a, K, S, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for RwLockReadGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for RwLockWriteGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for RwLockUpgradeableGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !RefUnwindSafe for VacantEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !RefUnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for RefMulti&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for RefMutMulti&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for Ref&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for RefMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for RefMulti&lt;'a, K, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, S&nbsp;=&nbsp;RandomState&gt; !RefUnwindSafe for Ref&lt;'a, K, S&gt;","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl RefUnwindSafe for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["encoding_rs"] = [{"text":"impl RefUnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Encoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoderResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecoderResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncoderResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Latin1Bidi","synthetic":true,"types":[]}];
implementors["encryption"] = [{"text":"impl RefUnwindSafe for EncryptionConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KmsConfig","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; RefUnwindSafe for AesGcmCrypter&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EncryptedFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DecrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for EncrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for EncrypterWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataKeyManager","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileBackend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KmsBackend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MasterKeyConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Iv","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesGcmTag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileDictionaryFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogRecord","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for CrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dicts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlaintextBackend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemAesGcmBackend","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AwsKms","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ENCRYPTION_DATA_KEY_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ENCRYPTION_FILE_NUM_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ENCRYPTION_INITIALIZED_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ENCRYPT_DECRPTION_FILE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ENCRYPTION_FILE_SIZE_GAUGE","synthetic":true,"types":[]}];
implementors["engine_panic"] = [{"text":"impl RefUnwindSafe for PanicColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicCompactedEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicDBOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicTitanDBOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicDBVector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicEngine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicEngineIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicIngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicSnapshot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicSnapshotIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicSstReader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicSstReaderIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicSstWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicSstWriterBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicExternalSstFileReader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicTablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicTablePropertiesKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicTableProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicWriteBatch","synthetic":true,"types":[]}];
implementors["engine_rocks"] = [{"text":"impl RefUnwindSafe for RocksColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksDBOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksTitanDBOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksDBVector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksEngine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksIngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksdbLogger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftDBLogger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksSnapshot","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RocksSstReader","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RocksSstIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksSstWriterBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksSstWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for RocksSstPartitionerFactory&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for RocksSstPartitioner&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RocksTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RocksTablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RocksTablePropertiesKey","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RocksTableProperties","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RocksUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksUserCollectedPropertiesNoRc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksWriteBatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksWriteBatchVec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksEngineIterator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RocksSeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RocksCompactionJobInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksCompactedEvent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CompactionListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksMvccProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksReadOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksWriteOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TsFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RocksCFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedSuffixSliceTransform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FixedPrefixSliceTransform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoopSliceTransform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SizeProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserProperties","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UserCollectedPropertiesDecoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeOffsets","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangePropertiesCollector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangePropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccPropertiesCollector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccPropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeOffsetKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EngineTickerMetricsInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EngineTickerMetrics","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SimpleEngineTickerMetricsInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SimpleEngineTickerMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_SIZE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOCK_CACHE_USAGE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_CACHE_USAGE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_MEMORY_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_ESTIMATE_NUM_KEYS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_PENDING_COMPACTION_BYTES_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_COMPRESSION_RATIO_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_NUM_FILES_AT_LEVEL_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_NUM_SNAPSHOTS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_OLDEST_SNAPSHOT_DURATION_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_WRITE_STALL_REASON_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_TITANDB_NUM_BLOB_FILES_AT_LEVEL_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_TITANDB_LIVE_BLOB_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_TITANDB_NUM_LIVE_BLOB_FILE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_TITANDB_NUM_OBSOLETE_BLOB_FILE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_TITANDB_LIVE_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_TITANDB_OBSOLETE_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_TITANDB_BLOB_FILE_DISCARDABLE_RATIO_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_CACHE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_CACHE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_MEMTABLE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_MEMTABLE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_GET_SERVED_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_GET_SERVED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_WRITE_SERVED_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_WRITE_SERVED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOOM_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOOM_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_FLOW","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_STALL_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_STALL_MICROS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_COMPACTION_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_COMPACTION_FLOW","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_COMPACTION_DROP_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_COMPACTION_DROP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_COMPACTION_DURATIONS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_COMPACTION_NUM_CORRUPT_KEYS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_COMPACTION_REASON_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_LOCATE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_LOCATE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_FILE_STATUS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_FILE_STATUS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_READ_AMP_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_READ_AMP_FLOW","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_NO_ITERATORS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_WAL_FILE_SYNCED_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_WAL_FILE_SYNCED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_EVENT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_NUM_IMMUTABLE_MEM_TABLE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_LOCATE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_LOCATE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_FLOW","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_GC_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_GC_FLOW","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_GC_FILE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_GC_FILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_GC_ACTION_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_GC_ACTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_FILE_SYNCED_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_FILE_SYNCED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_CACHE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_CACHE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_GET_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_WRITE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_COMPACTION_TIME_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_TABLE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_COMPACTION_OUTFILE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_MANIFEST_FILE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_WAL_FILE_SYNC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_STALL_L0_SLOWDOWN_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_STALL_MEMTABLE_COMPACTION_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_STALL_L0_NUM_FILES_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_HARD_RATE_LIMIT_DELAY_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_SOFT_RATE_LIMIT_DELAY_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_NUM_FILES_IN_SINGLE_COMPACTION_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_SEEK_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_WRITE_STALL_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_SST_READ_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_NUM_SUBCOMPACTION_SCHEDULED_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BYTES_PER_READ_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BYTES_PER_WRITE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BYTES_COMPRESSED_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BYTES_DECOMPRESSED_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_COMPRESSION_TIMES_NANOS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_DECOMPRESSION_TIMES_NANOS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_WRITE_WAL_TIME_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_KEY_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_VALUE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_GET_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_SEEK_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_NEXT_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_PREV_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_FILE_WRITE_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_FILE_READ_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_FILE_SYNC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_BLOB_GC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_GC_INPUT_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_GC_OUTPUT_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_ENGINE_ITER_TOUCH_BLOB_FILE_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TickerName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TickerEnum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EngineTickerMetricsDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EngineTickerMetrics2Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EngineTickerMetrics2Delegator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleEngineTickerMetricsDelegator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RocksEventListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlobRunMode","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WrappedEncryptionKeyManager&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["engine_test"] = [{"text":"impl RefUnwindSafe for DBOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CryptoOptions","synthetic":true,"types":[]}];
implementors["engine_traits"] = [{"text":"impl RefUnwindSafe for FileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexHandles","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SstPartitionerRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SstPartitionerContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccProperties","synthetic":true,"types":[]},{"text":"impl&lt;K, R&gt; RefUnwindSafe for Engines&lt;K, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IterOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CacheStats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteStrategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SstCompressionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptionMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SstPartitionerResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SeekMode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Range&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, R&gt; !RefUnwindSafe for MetricsFlusher&lt;K, R&gt;","synthetic":true,"types":[]}];
implementors["error_code"] = [{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]}];
implementors["external_storage"] = [{"text":"impl RefUnwindSafe for LocalStorage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoopStorage","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for S3Storage","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GCSStorage","synthetic":true,"types":[]},{"text":"impl&lt;'client&gt; !RefUnwindSafe for S3Uploader&lt;'client&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RequestError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for AsyncReadAsSyncStreamOfBytes&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EXT_STORAGE_CREATE_HISTOGRAM","synthetic":true,"types":[]}];
implementors["fail"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for FailScenario&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl !RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !RefUnwindSafe for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !RefUnwindSafe for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["farmhash"] = [{"text":"impl RefUnwindSafe for FarmHasher","synthetic":true,"types":[]}];
implementors["file_system"] = [{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IORateLimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithIOType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Sha256Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IOOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IOType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IO_RATE_LIMITER","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl RefUnwindSafe for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GzBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GzHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decompress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecompressError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushCompress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushDecompress","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl RefUnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["fs2"] = [{"text":"impl RefUnwindSafe for FsStats","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; RefUnwindSafe for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; RefUnwindSafe for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; RefUnwindSafe for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; RefUnwindSafe for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; RefUnwindSafe for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; RefUnwindSafe for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for JoinAll&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SelectAll&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SelectOk&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Shared&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SharedItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; RefUnwindSafe for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; RefUnwindSafe for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; RefUnwindSafe for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; RefUnwindSafe for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; RefUnwindSafe for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Buffered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for BufferUnordered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitSink&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; RefUnwindSafe for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for FuturesUnordered&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !RefUnwindSafe for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; RefUnwindSafe for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; RefUnwindSafe for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; RefUnwindSafe for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Spawn&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NotifyHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AtomicTask","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnparkEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLockAcquire&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BiLockAcquired&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !RefUnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !RefUnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalSpawner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPoolBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl RefUnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_timer"] = [{"text":"impl !RefUnwindSafe for Delay","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; RefUnwindSafe for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; RefUnwindSafe for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Remote&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RemoteHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; RefUnwindSafe for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; RefUnwindSafe for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; RefUnwindSafe for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; RefUnwindSafe for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Abortable&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortRegistration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; RefUnwindSafe for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; RefUnwindSafe for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; RefUnwindSafe for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; RefUnwindSafe for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; RefUnwindSafe for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; !RefUnwindSafe for ReuniteError&lt;T, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; !RefUnwindSafe for SplitSink&lt;S, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; RefUnwindSafe for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Close&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; RefUnwindSafe for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Flush&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; RefUnwindSafe for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; RefUnwindSafe for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; RefUnwindSafe for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; RefUnwindSafe for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; RefUnwindSafe for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; RefUnwindSafe for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ex&gt; RefUnwindSafe for Executor01As03&lt;Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Compat01As03&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, SinkItem&gt; !RefUnwindSafe for Compat01As03Sink&lt;S, SinkItem&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Compat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; RefUnwindSafe for CompatSink&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Close&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; RefUnwindSafe for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; RefUnwindSafe for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Flush&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; RefUnwindSafe for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for Read&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadVectored&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadExact&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadLine&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToEnd&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToString&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadUntil&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Write&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteVectored&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteAll&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; !RefUnwindSafe for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["fuzz"] = [{"text":"impl RefUnwindSafe for WORKSPACE_ROOT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FUZZ_ROOT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FUZZ_TARGETS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SEED_ROOT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fuzzer","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl RefUnwindSafe for FxHasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FxHasher64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FxHasher32","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["grpcio"] = [{"text":"impl RefUnwindSafe for GrpcSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CallOption","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ClientCStreamReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Resp&gt; !RefUnwindSafe for ClientDuplexReceiver&lt;Resp&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Resp&gt; !RefUnwindSafe for ClientSStreamReceiver&lt;Resp&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ClientUnaryReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Req&gt; !RefUnwindSafe for StreamingCallSink&lt;Req&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ClientStreamingSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ClientStreamingSinkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Deadline","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DuplexSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DuplexSinkFailure","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RequestStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RpcContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ServerStreamingSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ServerStreamingSinkFailure","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnarySink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnarySinkResult","synthetic":true,"types":[]},{"text":"impl&lt;Req, Resp&gt; RefUnwindSafe for Method&lt;Req, Resp&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpcStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpcStatusCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteFlags","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Channel","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChannelBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthContext","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AuthProperty&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AuthPropertyIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Marshaller&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EnvBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Environment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MetadataIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceQuota","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChannelCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChannelCredentialsBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerCredentialsBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Server","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ServerBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ServiceBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ShutdownFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LbPolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OptTarget","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CertificateRequestType","synthetic":true,"types":[]}];
implementors["grpcio_sys"] = [{"text":"impl RefUnwindSafe for grpc_compression_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_compression_options_grpc_compression_options_default_level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_compression_options_grpc_compression_options_default_algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_slice_refcount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_slice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_slice_grpc_slice_data_grpc_slice_refcounted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_slice_grpc_slice_data_grpc_slice_inlined","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_slice_buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gpr_timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gpr_event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gpr_refcount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gpr_stats_counter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_byte_buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_byte_buffer_grpc_byte_buffer_data__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_byte_buffer_grpc_byte_buffer_data_grpc_compressed_buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_completion_queue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_alarm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_channel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_server","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_call","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_socket_mutator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_socket_factory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_arg_pointer_vtable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_arg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_arg_grpc_arg_value_grpc_arg_pointer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_channel_args","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_metadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_metadata__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_metadata_array","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_call_details","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op_grpc_op_data__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op_grpc_op_data_grpc_op_send_initial_metadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op_grpc_op_data_grpc_op_send_initial_metadata_grpc_op_send_initial_metadata_maybe_compression_level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op_grpc_op_data_grpc_op_send_message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op_grpc_op_data_grpc_op_send_status_from_server","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op_grpc_op_data_grpc_op_recv_initial_metadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op_grpc_op_data_grpc_op_recv_message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op_grpc_op_data_grpc_op_recv_status_on_client","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op_grpc_op_data_grpc_op_recv_close_on_server","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_channel_info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_resource_quota","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_experimental_completion_queue_functor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_completion_queue_attributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_completion_queue_factory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for census_context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_auth_context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_auth_property_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_auth_property","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_ssl_session_cache","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_call_credentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_channel_credentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_ssl_pem_key_cert_pair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for verify_peer_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_ssl_verify_peer_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_sts_credentials_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_auth_metadata_context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_metadata_credentials_plugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_server_credentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_ssl_server_certificate_config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_ssl_server_credentials_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_auth_metadata_processor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_alts_credentials_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_tls_error_details","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_tls_key_materials_config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_tls_credential_reload_config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_tls_server_authorization_check_config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_tls_credentials_options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_tls_credential_reload_arg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_tls_server_authorization_check_arg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gpr_log_func_args","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_byte_buffer_reader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpcwrap_batch_context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpcwrap_batch_context__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpcwrap_batch_context__bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpcwrap_request_call_context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_slice_grpc_slice_data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_byte_buffer_grpc_byte_buffer_data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_arg_grpc_arg_value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op_grpc_op_data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_byte_buffer_reader_grpc_byte_buffer_reader_current","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_compression_algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_compression_level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gpr_clock_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_slice_ref_whom","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_byte_buffer_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_arg_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_call_error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_completion_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_op_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_cq_polling_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_cq_completion_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_connectivity_state","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_server_register_method_payload_handling","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_ssl_roots_override_result","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_ssl_certificate_config_reload_status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_ssl_client_certificate_request_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_security_level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_tls_server_verification_option","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_local_connect_type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grpc_tls_version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gpr_log_severity","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reason","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ping","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PingPong","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pong","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvStream","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendStream&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ReadySendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&nbsp;=&nbsp;Bytes&gt; !RefUnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PushPromise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PushPromises","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; RefUnwindSafe for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !RefUnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendResponse&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendPushedResponse&lt;B&gt;","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl RefUnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; RefUnwindSafe for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for OccupiedEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueIterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Values&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValuesMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ToStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Request&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Authority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scheme","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidUri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for Data&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for Trailers&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl RefUnwindSafe for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; RefUnwindSafe for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; RefUnwindSafe for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl !RefUnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B&nbsp;=&nbsp;Body&gt; !RefUnwindSafe for Client&lt;C, B&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !RefUnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Connected","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Name","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GaiResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GaiAddrs","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GaiFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidNameError","synthetic":true,"types":[]},{"text":"impl&lt;C, B, T&gt; !RefUnwindSafe for Connect&lt;C, B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; RefUnwindSafe for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for Builder&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AddrIncoming","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AddrStream","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Http&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F, E&gt; RefUnwindSafe for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, E&nbsp;=&nbsp;Exec&gt; !RefUnwindSafe for Connection&lt;T, S, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Parts&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Upgraded","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_openssl"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for HttpsConnector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for HttpsConnecting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ident_case"] = [{"text":"impl RefUnwindSafe for RenameRule","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;T, S&gt; RefUnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; RefUnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["inferno"] = [{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Folder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Folder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Folder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Folder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Folder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FuncFrameAttrsMap","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Options&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PaletteMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SearchColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackgroundColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Palette","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicPalette","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiPalette","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl RefUnwindSafe for IoVec","synthetic":true,"types":[]}];
implementors["ipnet"] = [{"text":"impl RefUnwindSafe for Ipv4AddrRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6AddrRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4Net","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Net","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrefixLenError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4Subnets","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Subnets","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddrParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddrRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpNet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpSubnets","synthetic":true,"types":[]}];
implementors["ipnetwork"] = [{"text":"impl RefUnwindSafe for Ipv4Network","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Network","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpNetworkError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpNetwork","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetworkSize","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; RefUnwindSafe for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; RefUnwindSafe for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; RefUnwindSafe for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; RefUnwindSafe for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; RefUnwindSafe for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !RefUnwindSafe for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !RefUnwindSafe for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !RefUnwindSafe for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !RefUnwindSafe for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; RefUnwindSafe for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; RefUnwindSafe for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; RefUnwindSafe for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; RefUnwindSafe for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["keys"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WrongPrefix","synthetic":true,"types":[]}];
implementors["kvproto"] = [{"text":"impl RefUnwindSafe for CommandRequestHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandRequestBatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandResponseHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandResponseBatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotDone","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConfigClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DuplicateRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compatibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TxnInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TxnStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventRow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventEntries","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventAdmin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventLongTxn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeDataEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolvedTs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeDataRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeDataRequestRegister","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeDataRequestNotifyTxnStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event_oneof_event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventRowOpType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventLogType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeDataRequest_oneof_request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EngineClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DrAutoSync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionReplicationStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DrAutoSyncState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionReplicationState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChangeDataClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpanSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Root","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Link","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Link_oneof_link","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TikvClient","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DeadlockClient","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PdClient","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DiagnosticsClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrewriteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrewriteResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IngestSstRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IngestSstResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadIndexRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadIndexResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangePeerRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangePeerResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangePeerV2Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangePeerV2Response","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchSplitRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchSplitResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactLogRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactLogResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransferLeaderRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransferLeaderResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ComputeHashRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifyHashRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifyHashResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrepareMergeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrepareMergeResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommitMergeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommitMergeResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RollbackMergeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RollbackMergeResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdminRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdminResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionLeaderRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionLeaderResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionDetailRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionDetailResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftRequestHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftResponseHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftCmdRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftCmdResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmdType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdminCmdType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusCmdType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SwitchModeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SwitchModeResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenEngineRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenEngineResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteHead","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mutation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteBatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteEngineRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KvPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteEngineV3Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteEngineResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloseEngineRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloseEngineResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportEngineRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportEngineResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CleanupEngineRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CleanupEngineResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactClusterRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactClusterResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetVersionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetVersionResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetMetricsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetMetricsResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorEngineNotFound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MutationOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteEngineRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SearchLogRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SearchLogResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerInfoRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerInfoPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerInfoItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerInfoResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SearchLogRequestTarget","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerInfoType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotLeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreNotMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionNotFound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyNotInRegion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpochNotMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerIsBusy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StaleCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftEntryTooLarge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxTimestampNotSynced","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadIndexNotReady","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProposalInMergingMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrewriteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrewriteResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PessimisticLockRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PessimisticLockResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PessimisticRollbackRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PessimisticRollbackResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TxnHeartBeatRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TxnHeartBeatResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckTxnStatusRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckTxnStatusResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckSecondaryLocksRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckSecondaryLocksResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommitRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommitResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CleanupRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CleanupResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchGetRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchGetResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchRollbackRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchRollbackResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanLockRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanLockResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolveLockRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolveLockResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawGetRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawGetResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawBatchGetRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawBatchGetResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawPutRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawPutResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawBatchPutRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawBatchPutResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawDeleteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawDeleteResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawBatchDeleteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawBatchDeleteResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawScanRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawScanResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawDeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawDeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawBatchScanRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawBatchScanResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsafeDestroyRangeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsafeDestroyRangeResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegisterLockObserverRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegisterLockObserverResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckLockObserverRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckLockObserverResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoveLockObserverRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoveLockObserverResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PhysicalScanLockRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PhysicalScanLockResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitRegionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitRegionResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadIndexRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadIndexResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerMutation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerKvPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerGetRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerGetResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerBatchGetRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerBatchGetResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerMutRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerMutResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerBatchMutRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerBatchMutResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerScanRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerScanResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerDeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerDeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccGetByKeyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccGetByKeyResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccGetByStartTsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccGetByStartTsResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LockInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteConflict","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlreadyExist","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Deadlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommitTsExpired","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TxnNotFound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommitTsTooLarge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeDetail","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanDetail","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanDetailV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecDetails","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecDetailsV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KvPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mutation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccWrite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TxnInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LeaderInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckLeaderRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckLeaderResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandPri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsolationLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Op","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Action","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtraOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SwitchModeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SwitchModeResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SstMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RewriteRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IngestRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IngestResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DownloadRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DownloadResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetDownloadSpeedLimitRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetDownloadSpeedLimitResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteBatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PairOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SwitchMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchCommandsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchCommandsRequestRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchCommandsResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchCommandsResponseResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchRaftMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchCommandsEmptyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchCommandsEmptyResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchCommandsRequest_Request_oneof_cmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchCommandsResponse_Response_oneof_cmd","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImportKvClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftLogRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftLogResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionInfoRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionInfoResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionSizeRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionSizeResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionSizeResponseEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanMvccRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanMvccResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InjectFailPointRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InjectFailPointResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecoverFailPointRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecoverFailPointResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListFailPointsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListFailPointsResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListFailPointsResponseEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetMetricsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetMetricsResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionConsistencyCheckRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionConsistencyCheckResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModifyTikvConfigRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModifyTikvConfigResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Property","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetRegionPropertiesRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetRegionPropertiesResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetStoreInfoRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetStoreInfoResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetClusterInfoRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetClusterInfoResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Db","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImportSstClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitForEntriesRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitForEntriesResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitForEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeadlockRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeadlockResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeadlockRequestType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackupMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Schema","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClusterIdError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackupRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageBackend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Noop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gcs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackupResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error_oneof_detail","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageBackend_oneof_backend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DebugClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TsoRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TsoResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BootstrapRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BootstrapResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsBootstrappedRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsBootstrappedResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllocIdRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllocIdResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetStoreRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetStoreResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutStoreRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutStoreResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetAllStoresRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetAllStoresResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetRegionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetRegionResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetRegionByIdRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanRegionsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Region","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanRegionsResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetClusterConfigRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetClusterConfigResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutClusterConfigRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutClusterConfigResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetMembersRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetMembersResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerStats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionHeartbeatRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangePeer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangePeerV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransferLeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Merge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitRegion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionHeartbeatResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AskSplitRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AskSplitResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReportSplitRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReportSplitResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AskBatchSplitRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AskBatchSplitResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReportBatchSplitRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReportBatchSplitResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeInterval","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecordPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreStats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreHeartbeatRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreHeartbeatResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScatterRegionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScatterRegionResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateServiceGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateServiceGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyncRegionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyncRegionResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetOperatorRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetOperatorResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyncMaxTsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyncMaxTsResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitRegionsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitRegionsResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetDcLocationsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetDcLocationsResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckPolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OperatorStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetAllRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetAllResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigKind_oneof_kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cluster","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreLabel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Store","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionEpoch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Region","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Peer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerRole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftTruncatedState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotCfFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotChunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Done","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftSnapshotData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftLocalState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftApplyState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MergeState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionLocalState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtraMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtraMessageType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BackupClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TaskMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DispatchTaskRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DispatchTaskResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CancelTaskRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CancelTaskResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EstablishMppConnectionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MppDataPacket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptionMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileDictionary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyDictionary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MasterKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MasterKeyPlaintext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MasterKeyFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MasterKeyKms","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptedContent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MasterKey_oneof_backend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptionMethod","synthetic":true,"types":[]}];
implementors["libflate"] = [{"text":"impl&lt;R&gt; !RefUnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; RefUnwindSafe for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for Finish&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AutoFinish&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AutoFinishUnchecked&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtraField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtraSubField","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; RefUnwindSafe for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for MultiDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Os","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; RefUnwindSafe for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lz77WindowSize","synthetic":true,"types":[]}];
implementors["libflate_lz77"] = [{"text":"impl RefUnwindSafe for DefaultLz77Encoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultLz77EncoderBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoCompressionLz77Encoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Code","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionLevel","synthetic":true,"types":[]}];
implementors["librocksdb_sys"] = [{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloudEnvOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBInstance","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBWriteOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBReadOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBMergeOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBBlockBasedTableOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBMemoryAllocator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBLRUCacheOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBCache","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBFilterPolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBSnapshot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBCFHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBWriteBatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBComparator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBFlushOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBCompactionFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBCompactionFilterFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBCompactionFilterContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnvOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SstFileReader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SstFileWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBBackupEngine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBRestoreOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBSliceTransform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBRateLimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBLogger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBCompactOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBFifoCompactionOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBPinnableSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBUserCollectedPropertiesIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBTableProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBTablePropertiesCollectionIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBTablePropertiesCollector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBTablePropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBFlushJobInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBCompactionJobInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBIngestionInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBEventListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBKeyVersions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBEnv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBSequentialFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBColumnFamilyMetaData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBLevelMetaData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBSstFileMetaData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBCompactionOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBPerfContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBIOStatsContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBWriteStallInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBStatusPtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBMapProperty","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBFileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBEncryptionKeyManagerInstance","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBSstPartitioner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBSstPartitionerRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBSstPartitionerContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBSstPartitionerFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBWriteBatchIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBTitanDBOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBTitanReadOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBTitanBlobIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteStallCondition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBStatisticsTickerType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBStatisticsHistogramType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBEntryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBCompressionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBCompactionStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBUniversalCompactionStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBRecoveryMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactionPriority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactionReason","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBInfoLogLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBTableProperty","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBBottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBRateLimiterMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBTitanDBBlobRunMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBBackgroundErrorReason","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBEncryptionMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBValueType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBSstPartitionerResult","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl RefUnwindSafe for gz_header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for z_stream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gzFile_s","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for internal_state","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linked_hash_set"] = [{"text":"impl&lt;T, S&gt; RefUnwindSafe for LinkedHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; RefUnwindSafe for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LevelFilter","synthetic":true,"types":[]}];
implementors["log_wrappers"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Value&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyncLoggerBuffer","synthetic":true,"types":[]}];
implementors["match_template"] = [{"text":"impl RefUnwindSafe for MatchTemplate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Substitution","synthetic":true,"types":[]}];
implementors["md5"] = [{"text":"impl RefUnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl RefUnwindSafe for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime_guess"] = [{"text":"impl RefUnwindSafe for MimeGuess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IterRaw","synthetic":true,"types":[]}];
implementors["minitrace"] = [{"text":"impl RefUnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CrossthreadTrace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpanGuard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpanSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Link","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TraceSpawned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TraceWrapped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MayTraceRootFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TraceRootFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl !RefUnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SetReadiness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollOpt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ready","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixReady","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpSocket","synthetic":true,"types":[]}];
implementors["mio_uds"] = [{"text":"impl RefUnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixDatagram","synthetic":true,"types":[]}];
implementors["native_tls"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for MidHandshakeTlsStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsConnectorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Protocol","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl !RefUnwindSafe for TcpBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UdpBuilder","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; RefUnwindSafe for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SealFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FallocateFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlockArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MntFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MqAttr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PtyMaster","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloneFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CpuSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioOpcode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MapFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MmapAdvise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dqblk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaFmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RebootMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SaFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigmaskHow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigevNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VsockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsgFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddressFamily","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InetAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockProtocol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReuseAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReusePort","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Linger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpDropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Broadcast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OobInline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeepAlive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcceptConn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OriginalDst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpTransparent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mark","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PassCred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpCongestion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statfs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statvfs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Termios","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaudRate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeVal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IoVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtsName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for User","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchownatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathconfVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysconfVar","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl RefUnwindSafe for CompareResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Needed","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for VerboseError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerboseErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I, E, F&gt; RefUnwindSafe for ParserIterator&lt;I, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Endianness","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_format"] = [{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CustomFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CustomFormatBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Grouping","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Locale","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DecimalStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for InfinityStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MinusSignStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NanStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PlusSignStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SeparatorStr&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl RefUnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;RefUnwindSafe + UnwindSafe&gt; RefUnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl RefUnwindSafe for KeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1GeneralizedTime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1GeneralizedTimeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeDiff","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Time","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1TimeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1String","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1StringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Integer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1IntegerRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1BitString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1BitStringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Object","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1ObjectRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsbOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigNumContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BigNumContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigNum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BigNumRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMSOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmsContentInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CmsContentInfoRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConfRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Deriver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Dh&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DhRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Dsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointConversionForm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcGroupRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcPoint","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcPointRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EcKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for EcKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaSig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcdsaSigRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Seal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorStack","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageDigest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DigestBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspBasicResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspBasicResponseRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspCertId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspCertIdRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspResponseRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspRequestRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspOneReq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspOneReqRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs12","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pkcs12Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyIvPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs7","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pkcs7Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for PKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Params","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Private","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Padding","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Signer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Verifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SrtpProtectionProfile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SrtpProtectionProfileRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAcceptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtensionContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslFiletype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NameType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SniError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAlert","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlpnError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CipherBits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslCipher","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslCipherRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslSession","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslSessionRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ssl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for MidHandshakeSslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for StackRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpensslString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OpensslStringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cipher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crypter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509StoreContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509Ref","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Extension","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ExtensionRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Name","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509NameRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509NameEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509NameEntryRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Req","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ReqRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeneralName","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GeneralNameRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Algorithm","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509AlgorithmRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509VerifyParamRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicConstraints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyUsage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509StoreBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreBuilderRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Store","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreRef","synthetic":true,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl RefUnwindSafe for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl RefUnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl RefUnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["pd_client"] = [{"text":"impl RefUnwindSafe for DummyPdClient","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RpcClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClusterVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PD_REQUEST_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PD_HEARTBEAT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PD_VALIDATE_PEER_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_SIZE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REGION_READ_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REGION_READ_BYTES_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REGION_WRITTEN_BYTES_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REGION_WRITTEN_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HeartbeatReceiver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LeaderClient","synthetic":true,"types":[]},{"text":"impl&lt;Req, F&gt; !RefUnwindSafe for Request&lt;Req, F&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl RefUnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["pnet_base"] = [{"text":"impl RefUnwindSafe for MacAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseMacAddrErr","synthetic":true,"types":[]}];
implementors["pnet_datalink"] = [{"text":"impl RefUnwindSafe for FanoutOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetworkInterface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChannelType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Channel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FanoutType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Config","synthetic":true,"types":[]}];
implementors["pnet_sys"] = [{"text":"impl RefUnwindSafe for FileDesc","synthetic":true,"types":[]}];
implementors["pprof"] = [{"text":"impl RefUnwindSafe for Frames","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ProfilerGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Report","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ReportBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Profile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sample","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mapping","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Line","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Function","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]}];
implementors["procfs"] = [{"text":"impl RefUnwindSafe for Meminfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CpuInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGroupController","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProcessCgroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PressureRecord","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CpuPressure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryPressure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IoPressure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiskStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoadAverage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CpuTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KernelStats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KernelModule","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProcError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigSetting","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NFSServerCaps","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MountInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MountStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MountNFSStatistics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NFSEventCounter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NFSByteCounter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NFSOperationStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoredumpFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FDPermissions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Io","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FDInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Process","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LimitValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MountOptFields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProcState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MMapPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FDTarget","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpNetEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpNetEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixNetEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DropCache","synthetic":true,"types":[]}];
implementors["procinfo"] = [{"text":"impl RefUnwindSafe for LoadAvg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Io","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mountinfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cpu","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SeccompMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceStatus","synthetic":true,"types":[]}];
implementors["prometheus"] = [{"text":"impl RefUnwindSafe for ProtobufEncoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextEncoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Histogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HistogramOpts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HistogramTimer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Opts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicAuthentication","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LabelPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gauge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Counter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Quantile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Summary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Untyped","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Histogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bucket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Metric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricFamily","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtomicF64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtomicI64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtomicU64","synthetic":true,"types":[]},{"text":"impl&lt;T, V, D&gt; !RefUnwindSafe for AFLocalCounter&lt;T, V, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; !RefUnwindSafe for AFLocalHistogram&lt;T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for GenericCounter&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !RefUnwindSafe for GenericLocalCounter&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !RefUnwindSafe for GenericLocalCounterVec&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Desc","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for GenericGauge&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalHistogram","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalHistogramTimer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalHistogramVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for MetricVec&lt;T&gt;","synthetic":true,"types":[]}];
implementors["prost"] = [{"text":"impl RefUnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodeError","synthetic":true,"types":[]}];
implementors["protobuf"] = [{"text":"impl RefUnwindSafe for CachedSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RepeatedField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SingularField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SingularPtrField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CodedInputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CodedOutputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnknownFields","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for UnknownFieldsIter&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnknownValues","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; RefUnwindSafe for UnknownValuesIter&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnknownValue","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; RefUnwindSafe for UnknownValueRef&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WireType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileDescriptorSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorProto_ExtensionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorProto_ReservedRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OneofDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumValueDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServiceDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OneofOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumValueOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServiceOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UninterpretedOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UninterpretedOption_NamePart","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceCodeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceCodeInfo_Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeneratedCodeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeneratedCodeInfo_Annotation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldDescriptorProto_Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldDescriptorProto_Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileOptions_OptimizeMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldOptions_CType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldOptions_JSType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodeGeneratorRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodeGeneratorResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodeGeneratorResponse_File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WireError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProtobufError","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; RefUnwindSafe for ExtFieldOptional&lt;M, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; RefUnwindSafe for ExtFieldRepeated&lt;M, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Lazy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldDescriptor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MessageDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumValueDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumDescriptor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ProtobufValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ReflectFieldRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeDouble","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeInt32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeInt64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeUint32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeUint64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeSint32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeSint64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeFixed32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeFixed64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeSfixed32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeSfixed64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeChars","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for ProtobufTypeEnum&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; RefUnwindSafe for ProtobufTypeMessage&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Api","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mixin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Option","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DoubleValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Int64Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UInt64Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Int32Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UInt32Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoolValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BytesValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value_oneof_kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field_Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field_Cardinality","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Syntax","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; RefUnwindSafe for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quick_xml"] = [{"text":"impl&lt;B&gt; RefUnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BytesStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BytesDecl&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BytesEnd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BytesText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["raft"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Changer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unstable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Raft&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SoftState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RaftLog&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inflights","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgressTracker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadState","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Status&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StorageError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StateRole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgressState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadOnlyOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Peer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ready","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LightReady","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RawNode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemStorageCore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemStorage","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Union&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["raft_engine"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;E, W&gt; !RefUnwindSafe for LogBatch&lt;E, W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CacheStats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalStats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecoveryMode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["raft_log_engine"] = [{"text":"impl !RefUnwindSafe for RaftLogBatch","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftLogEngine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntryExtTyped","synthetic":true,"types":[]}];
implementors["raft_proto"] = [{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Snapshot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HardState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfChange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfChangeSingle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfChangeV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfChangeTransition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfChangeType","synthetic":true,"types":[]}];
implementors["raftstore"] = [{"text":"impl&lt;E&gt; RefUnwindSafe for Raw&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HalfCheckObserver","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; !RefUnwindSafe for Host&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; RefUnwindSafe for KeysCheckObserver&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; RefUnwindSafe for SizeCheckObserver&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableCheckObserver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ObserverContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmdBatch","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionChangeEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SplitCheckConfigManager","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConsistencyCheckMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Entry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoxAdminObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WrappedAdminObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoxQueryObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WrappedQueryObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoxApplySnapshotObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WrappedApplySnapshotObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for BoxSplitCheckObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; RefUnwindSafe for WrappedSplitCheckObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoxRoleObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WrappedRoleObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoxRegionChangeObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WrappedRegionChangeObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoxReadIndexObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WrappedReadIndexObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for BoxCmdObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; RefUnwindSafe for WrappedCmdObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for BoxConsistencyCheckObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; RefUnwindSafe for WrappedConsistencyCheckObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for Registry&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for CoprocessorHost&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REGION_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REGION_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REGION_COUNT_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegionEventListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionCollector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegionInfoAccessor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftStoreEvent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegionInfoQuery","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Checker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Checker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Checker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Checker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitObserver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiscardReason","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftStoreBlackHole","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !RefUnwindSafe for ServerRaftStoreRouter&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CompactionGuardGeneratorFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DestroyPeerJob","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !RefUnwindSafe for Peer&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProposalContext","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !RefUnwindSafe for PeerStorage&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadIndexContext","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for RegionIterator&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Iterable&gt;::Iterator: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for RegionSnapshot&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalReplicationState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreGroup","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for ApplyOptions&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapKey","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapManager","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapManagerBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotStatistics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AutoSplitController","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowStatistics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadDelegate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadStats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; !RefUnwindSafe for LocalReader&lt;C, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, S&gt; !RefUnwindSafe for Runner&lt;E, S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestPolicy","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapEntry","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for Task&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Task&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONFIG_RAFTSTORE_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftstoreConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !RefUnwindSafe for PeerFsm&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for PendingCmd&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for PendingCmdQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangePeer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecContext","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for ApplyCallback&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !RefUnwindSafe for ApplyContext&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitSourceMergeState","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for YieldState&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewSplitPeer","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for ApplyDelegate&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Apply&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Proposal&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Destroy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CatchUpLogs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenSnapTask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObserveID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObserveCmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ApplyMetrics","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for ApplyRes&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for ApplyFsm&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlMsg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFsm","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !RefUnwindSafe for ApplyPoller&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !RefUnwindSafe for Builder&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for ApplyRouter&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for ApplyBatchSystem&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for ExecResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for ApplyResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeCmd","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for Msg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for TaskRes&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for APPLY_PROPOSAL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalStoreStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalStoreStat","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for BatchRaftCmdRequestBuilder&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, EK, ER, T&gt; !RefUnwindSafe for PeerFsmDelegate&lt;'a, EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StoreInfo&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreMeta","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !RefUnwindSafe for RaftRouter&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PeerTickBatch","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !RefUnwindSafe for PollContext&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Store","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; RefUnwindSafe for StoreFsm&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, EK, ER, T&gt; !RefUnwindSafe for StoreFsmDelegate&lt;'a, EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !RefUnwindSafe for RaftPoller&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !RefUnwindSafe for RaftPollerBuilder&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for Workers&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !RefUnwindSafe for RaftBatchSystem&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckMsgStatus","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for ReadResponse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerTicks","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for RaftCommand&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Callback&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreTick","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MergeResultKind","synthetic":true,"types":[]},{"text":"impl&lt;SK&gt; !RefUnwindSafe for SignificantMsg&lt;SK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for CasualMessage&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for PeerMsg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !RefUnwindSafe for StoreMsg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdminCmdEpochState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ADMIN_CMD_EPOCH_MAP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lease","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoteLease","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; RefUnwindSafe for KeysInfoFormatter&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PerfContextStatistics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LeaseState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfChangeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COMPACTION_GUARD","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CompactionGuardGenerator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftReadyMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftMessageMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftMessageDropMetrics","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftProposeMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftInvalidProposeMetrics","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PEER_PROPOSAL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PEER_PROPOSAL_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PEER_ADMIN_CMD_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PEER_ADMIN_CMD_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PEER_APPEND_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PEER_COMMIT_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_APPLY_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for APPLY_TASK_WAIT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_RAFT_READY_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_RAFT_READY_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_RAFT_SENT_MESSAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_RAFT_SENT_MESSAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_RAFT_DROPPED_MESSAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_RAFT_DROPPED_MESSAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_SNAPSHOT_TRAFFIC_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_SNAPSHOT_VALIDATION_FAILURE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_SNAPSHOT_VALIDATION_FAILURE_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PEER_RAFT_PROCESS_DURATION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PEER_PROPOSE_LOG_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REGION_HASH_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REGION_HASH_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REGION_MAX_LOG_LAG","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REQUEST_WAIT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PEER_GC_RAFT_LOG_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UPDATE_REGION_SIZE_BY_COMPACTION_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COMPACTION_RELATED_REGION_COUNT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COMPACTION_DECLINED_BYTES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAPSHOT_CF_KV_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAPSHOT_CF_KV_COUNT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAPSHOT_CF_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAPSHOT_CF_SIZE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAPSHOT_BUILD_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAPSHOT_KV_COUNT_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAPSHOT_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_ENTRY_FETCHES_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_ENTRY_FETCHES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LEADER_MISSING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for INGEST_SST_DURATION_SECONDS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_INVALID_PROPOSAL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_INVALID_PROPOSAL_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_EVENT_DURATION_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_EVENT_DURATION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_READ_INDEX_PENDING_DURATION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_READ_INDEX_PENDING_COUNT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for APPLY_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for APPLY_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STORE_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for READ_QPS_TOPN","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_ENTRIES_CACHES_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for APPLY_PENDING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for APPLY_PENDING_ENTRIES_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PerfContextType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProposalType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdminCmdType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdminCmdStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftReadyType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageCounterType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftDroppedMessage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapValidationType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionHashType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionHashResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CfNames","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftEntryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftInvalidProposal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftEventDurationType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftEventDurationInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftEventDurationDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftEventDuration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftInvalidProposalCountInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftInvalidProposalCountDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftInvalidProposalCount","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftEntryFetchesInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftEntryFetchesDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftEntryFetches","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapCfInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapCfDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapCf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapCfSizeInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapCfSizeDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapCfSize","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegionHashCounterInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegionHashCounterDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegionHashCounter2Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionHashCounter2Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegionHashCounter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProposalVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProposalVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProposalVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AdminCmdVecInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AdminCmdVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AdminCmdVec2Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdminCmdVec2Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AdminCmdVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftReadyVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftReadyVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftReadyVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MessageCounterVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MessageCounterVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftDropedVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftDropedVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RaftDropedVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapValidVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapValidVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapValidVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PerfContextTimeDurationInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PerfContextTimeDurationDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PerfContextTimeDuration","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for ProposalQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConsistencyState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckTickResult","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for ProposedAdminCmd&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for CmdEpochChecker&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StaleState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EntryCache","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ApplySnapResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvokeContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckApplyingSnapStatus","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for ReadIndexRequest&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for ReadIndexQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CfFileForRecving","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CfFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaFile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Snap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ApplyAbortChecker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapStats","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapManagerCore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BuildStatistics","synthetic":true,"types":[]},{"text":"impl&lt;E, C, S&gt; !RefUnwindSafe for Runner&lt;E, C, S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;EK, C, S&gt; !RefUnwindSafe for Runner&lt;EK, C, S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Runner&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;EK, C&gt; !RefUnwindSafe for Runner&lt;EK, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Task&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAP_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAP_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CHECK_SPILT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CHECK_SPILT_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAP_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CHECK_SPILT_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COMPACT_RANGE_CF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REGION_HASH_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STALE_PEER_PENDING_DELETE_RANGE_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LOCAL_READ_REJECT_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LOCAL_READ_REJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LOCAL_READ_EXECUTED_REQUESTS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LOCAL_READ_EXECUTED_CACHE_REQUESTS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RejectReason","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapCounterInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapCounterDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapCounter2Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapCounter2Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapCounter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CheckSplitCounterInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckSplitCounterDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CheckSplitCounter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapHistogramInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapHistogramDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapHistogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadRejectCounter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeartbeatTask","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StoreStat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerStat","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for StatsMonitor&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !RefUnwindSafe for Runner&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, R&gt; !RefUnwindSafe for Runner&lt;EK, ER, R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'r, 'm&gt; RefUnwindSafe for Inspector&lt;'r, 'm&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StalePeerInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PendingDeleteRanges","synthetic":true,"types":[]},{"text":"impl&lt;EK, R&gt; !RefUnwindSafe for SnapContext&lt;EK, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, R&gt; !RefUnwindSafe for Runner&lt;EK, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MergedIterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SplitInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sample","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Recorder","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl RefUnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; RefUnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; RefUnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_isaac"] = [{"text":"impl RefUnwindSafe for IsaacRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsaacCore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Isaac64Core","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; RefUnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; RefUnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; RefUnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; RefUnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; RefUnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for IterMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !RefUnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !RefUnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;D&gt; RefUnwindSafe for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequence","synthetic":true,"types":[]}];
implementors["reqwest"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ClientBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RequestBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Proxy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Form","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Part","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ClientBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RequestBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Form","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Part","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Policy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Attempt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Action","synthetic":true,"types":[]}];
implementors["resolved_ts"] = [{"text":"impl RefUnwindSafe for Resolver","synthetic":true,"types":[]}];
implementors["rev_lines"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for RevLines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl RefUnwindSafe for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nonce","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnboundKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LessSafeKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SealingKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpeningKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unspecified","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyRejected","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Salt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; RefUnwindSafe for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SystemRandom","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RsaParameters","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for UnparsedPublicKey&lt;B&gt;","synthetic":true,"types":[]}];
implementors["rocksdb"] = [{"text":"impl RefUnwindSafe for CompactionFilterContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactionFilterFactoryHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactionFilterHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactionJobInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushJobInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IngestionInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteStallInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColumnFamilyMetaData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LevelMetaData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SstFileMetaData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IOStatsContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PerfContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TablePropertiesCollectionView","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserCollectedProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TitanBlobIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TitanDBOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteBatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WriteBatchRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PerfLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ComparatorCallback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MergeOperatorCallback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MergeOperands","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CFHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MapProperty","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DB","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for Snapshot&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for DBIterator&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Range&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBVector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackupEngine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SstFileReader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SstFileWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Env","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SequentialFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cache","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryAllocator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HistogramData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockBasedOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RateLimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsafeSnap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactionOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ColumnFamilyDescriptor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnvOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FifoCompactionOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LRUCacheOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SstPartitionerRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SstPartitionerContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TablePropertiesKey","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TableProperties","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UserCollectedProperties","synthetic":true,"types":[]}];
implementors["rusoto_core"] = [{"text":"impl&lt;E&gt; RefUnwindSafe for RusotoError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for EventStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HttpResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferedHttpResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpDispatchError","synthetic":true,"types":[]},{"text":"impl&lt;C&nbsp;=&nbsp;HttpsConnector&lt;HttpConnector&lt;GaiResolver&gt;&gt;&gt; !RefUnwindSafe for HttpClient&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsError","synthetic":true,"types":[]}];
implementors["rusoto_credential"] = [{"text":"impl !RefUnwindSafe for ContainerProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnvironmentProvider","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstanceMetadataProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProfileProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Secret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StaticProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AwsCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CredentialsError","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !RefUnwindSafe for AutoRefreshingProvider&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DefaultCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChainProvider","synthetic":true,"types":[]},{"text":"impl&lt;T, E&nbsp;=&nbsp;CredentialsError&gt; !RefUnwindSafe for Variable&lt;T, E&gt;","synthetic":true,"types":[]}];
implementors["rusoto_kms"] = [{"text":"impl RefUnwindSafe for AliasListEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CancelKeyDeletionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CancelKeyDeletionResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateAliasRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateGrantRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateGrantResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateKeyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateKeyResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CustomKeyStoresListEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecryptRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecryptResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteAliasRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteImportedKeyMaterialRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescribeCustomKeyStoresRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescribeCustomKeyStoresResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescribeKeyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescribeKeyResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisableKeyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisableKeyRotationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisconnectCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisconnectCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnableKeyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnableKeyRotationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyPairRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyPairResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyPairWithoutPlaintextRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyPairWithoutPlaintextResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyWithoutPlaintextRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyWithoutPlaintextResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateRandomRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateRandomResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetKeyPolicyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetKeyPolicyResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetKeyRotationStatusRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetKeyRotationStatusResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetParametersForImportRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetParametersForImportResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetPublicKeyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetPublicKeyResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrantConstraints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrantListEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportKeyMaterialRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportKeyMaterialResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyListEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListAliasesRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListAliasesResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListGrantsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListGrantsResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListKeyPoliciesRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListKeyPoliciesResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListKeysRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListKeysResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListResourceTagsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListResourceTagsResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListRetirableGrantsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutKeyPolicyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReEncryptRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReEncryptResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RetireGrantRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RevokeGrantRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScheduleKeyDeletionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScheduleKeyDeletionResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagResourceRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UntagResourceRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateAliasRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateKeyDescriptionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifyResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for KmsClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CancelKeyDeletionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateAliasError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateGrantError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateKeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecryptError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteAliasError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteImportedKeyMaterialError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescribeCustomKeyStoresError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescribeKeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisableKeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisableKeyRotationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisconnectCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnableKeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnableKeyRotationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyPairError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyPairWithoutPlaintextError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateDataKeyWithoutPlaintextError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenerateRandomError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetKeyPolicyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetKeyRotationStatusError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetParametersForImportError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetPublicKeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportKeyMaterialError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListAliasesError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListGrantsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListKeyPoliciesError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListKeysError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListResourceTagsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListRetirableGrantsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutKeyPolicyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReEncryptError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RetireGrantError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RevokeGrantError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScheduleKeyDeletionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagResourceError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UntagResourceError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateAliasError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateKeyDescriptionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifyError","synthetic":true,"types":[]}];
implementors["rusoto_s3"] = [{"text":"impl RefUnwindSafe for AbortIncompleteMultipartUpload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbortIncompleteMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbortMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbortMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccelerateConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccelerateConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlPolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlPolicySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlTranslation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessControlTranslationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccountIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowQuotedRecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedHeaderSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedHeadersSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedMethodSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedMethodsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedOriginSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowedOriginsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsAndOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsExportDestination","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsExportDestinationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsS3BucketDestination","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyticsS3ExportFileFormatSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BodySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bucket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketAccelerateStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLocationConstraintSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLoggingStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLoggingStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketLogsPermissionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketNameSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BucketVersioningStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CORSConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CORSConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CORSRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CORSRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CORSRulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CSVInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CSVInputSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CSVOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CSVOutputSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloudFunctionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloudFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloudFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloudFunctionInvocationRoleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommentsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommonPrefix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompleteMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompleteMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompletedMultipartUpload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompletedMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompletedPart","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompletedPartSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompletedPartListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Condition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConditionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContinuationEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyObjectOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyObjectResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyPartResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateBucketConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateBucketConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateBucketOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateBucketRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DaysSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DaysAfterInitiationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultRetention","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultRetentionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delete","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteMarkerEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteMarkerReplication","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteMarkerReplicationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteMarkerReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeletePublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeletedObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DelimiterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Destination","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DestinationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisplayNameSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ETagSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmailAddressSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnableRequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodingTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Encryption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EndSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EndEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S3Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorDocument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorDocumentSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExistingObjectReplication","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExistingObjectReplicationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExistingObjectReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpirationStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpiredObjectDeleteMarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExposeHeaderSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExposeHeadersSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpressionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExpressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FetchOwnerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileHeaderInfoSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterRuleListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterRuleNameSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterRuleValueSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAccelerateConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAclOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAclRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAnalyticsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketCorsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketEncryptionOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketInventoryConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLocationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLocationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLoggingOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketMetricsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyStatusOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyStatusRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketReplicationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketRequestPaymentOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketTaggingOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketVersioningOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketWebsiteOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectAclOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectAclRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GetObjectOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GetObjectTorrentOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectTorrentRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetPublicAccessBlockOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlacierJobParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlacierJobParametersSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Grant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrantSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Grantee","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GranteeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrantsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeadBucketRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeadObjectOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeadObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostNameSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpErrorCodeReturnedEqualsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpRedirectCodeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IDSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexDocument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexDocumentSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Initiator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputSerialization","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryDestination","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryDestinationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryEncryption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryFormatSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryFrequencySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryIncludedObjectVersionsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryOptionalFieldSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryOptionalFieldsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryS3BucketDestination","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventorySchedule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InventoryScheduleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsEnabledSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JSONInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JSONInputSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JSONOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JSONOutputSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JSONTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KMSContextSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyMarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyPrefixEqualsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LambdaFunctionArnSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LambdaFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LambdaFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LambdaFunctionConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleExpiration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleExpirationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRuleAndOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRuleFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifecycleRulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketAnalyticsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketAnalyticsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketInventoryConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketInventoryConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketMetricsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketMetricsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListMultipartUploadsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListMultipartUploadsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectVersionsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectVersionsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsV2Output","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsV2Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListPartsOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListPartsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocationPrefixSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoggingEnabled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoggingEnabledSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MFADeleteSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxAgeSecondsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxKeysSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxPartsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaxUploadsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataEntrySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataKeySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataValueSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Metrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsAndOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricsStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinutesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultipartUpload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultipartUploadIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoncurrentVersionExpiration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoncurrentVersionExpirationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoncurrentVersionTransition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoncurrentVersionTransitionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoncurrentVersionTransitionListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfigurationFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationConfigurationFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotificationIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectCannedACLSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectIdentifierSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectIdentifierListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectKeySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockEnabledSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockLegalHold","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockLegalHoldSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockLegalHoldStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockRetention","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockRetentionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockRetentionModeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectLockRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectVersionIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputLocation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputLocationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputSerialization","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Owner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnerOverrideSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParquetInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParquetInputSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Part","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PartNumberSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PartNumberMarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PayerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PermissionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PolicyStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrefixSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrioritySerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProgressEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtocolSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicAccessBlockConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicAccessBlockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAclRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketNotificationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectAclOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectAclRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectOutput","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PutObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueArnSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuietSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuoteCharacterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuoteEscapeCharacterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuoteFieldsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecordsEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Redirect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RedirectSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RedirectAllRequestsTo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RedirectAllRequestsToSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplaceKeyPrefixWithSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplaceKeyWithSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicaKmsKeyIDSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleAndOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRuleStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationRulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationTimeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationTimeStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationTimeValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplicationTimeValueSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestPaymentConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestPaymentConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestProgress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseCacheControlSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseContentDispositionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseContentEncodingSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseContentLanguageSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseContentTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseExpiresSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreObjectOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreObjectRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreRequestSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreRequestTypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoutingRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoutingRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoutingRulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S3KeyFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S3KeyFilterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S3Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S3LocationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSEKMS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSEKMSSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSEKMSKeyIdSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSES3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSES3Serializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanRangeSerializer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SelectObjectContentOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectObjectContentRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectObjectContentRequestSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectParametersSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionByDefault","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionByDefaultSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionRuleSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSideEncryptionRulesSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SettingSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceSelectionCriteria","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceSelectionCriteriaSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SseKmsEncryptedObjects","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SseKmsEncryptedObjectsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SseKmsEncryptedObjectsStatusSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StartSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StartAfterSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatsEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassAnalysis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassAnalysisSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassAnalysisDataExport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassAnalysisDataExportSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClassAnalysisSchemaVersionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SuffixSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagSetSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tagging","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TaggingSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetBucketSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetGrant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetGrantSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetGrantsSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetPrefixSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TierSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicArnSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopicConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransitionSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransitionListSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransitionStorageClassSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for URISerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadPartCopyOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadPartCopyRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadPartOutput","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UploadPartRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserMetadataSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersioningConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersioningConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WebsiteConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WebsiteConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for YearsSerializer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for S3Client","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectObjectContentEventStreamItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbortMultipartUploadError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompleteMultipartUploadError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateBucketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreateMultipartUploadError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketCorsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketPolicyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketReplicationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeletePublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAclError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketCorsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLocationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketLoggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketNotificationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketPolicyStatusError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketReplicationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketVersioningError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectAclError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectRetentionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectTorrentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeadBucketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeadObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketAnalyticsConfigurationsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketInventoryConfigurationsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketMetricsConfigurationsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListBucketsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListMultipartUploadsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectVersionsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListObjectsV2Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListPartsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAclError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketCorsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketLoggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketNotificationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketPolicyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketReplicationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketVersioningError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectAclError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectRetentionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutObjectTaggingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PutPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RestoreObjectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectObjectContentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadPartError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UploadPartCopyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreSignedRequestOption","synthetic":true,"types":[]}];
implementors["rusoto_signature"] = [{"text":"impl RefUnwindSafe for ParseRegionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Region","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SignedRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SignedRequestPayload","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ByteStream","synthetic":true,"types":[]}];
implementors["rusoto_sts"] = [{"text":"impl !RefUnwindSafe for StsAssumeRoleSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StsSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StsWebIdentityFederationSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WebIdentityProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssumeRoleRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssumeRoleResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssumeRoleWithSAMLRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssumeRoleWithSAMLResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssumeRoleWithWebIdentityRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssumeRoleWithWebIdentityResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssumedRoleUser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Credentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeAuthorizationMessageRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeAuthorizationMessageResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FederatedUser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetAccessKeyInfoRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetAccessKeyInfoResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetCallerIdentityRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetCallerIdentityResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetFederationTokenRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetFederationTokenResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetSessionTokenRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetSessionTokenResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PolicyDescriptorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StsClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssumeRoleError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssumeRoleWithSAMLError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssumeRoleWithWebIdentityError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeAuthorizationMessageError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetAccessKeyInfoError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetCallerIdentityError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetFederationTokenError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetSessionTokenError","synthetic":true,"types":[]}];
implementors["rusoto_util"] = [{"text":"impl !RefUnwindSafe for DefaultCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CredentialsProvider","synthetic":true,"types":[]}];
implementors["rustyline"] = [{"text":"impl&lt;'h&gt; RefUnwindSafe for Context&lt;'h&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for Editor&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; RefUnwindSafe for Iter&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharSearch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cmd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Movement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Word","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyPress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilenameCompleter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Quote","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BellStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HistoryDuplicates","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompletionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EditMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputStreamType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadlineError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MatchingBracketHighlighter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HistoryHinter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for History","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LineBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WordAction","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; !RefUnwindSafe for ValidationContext&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchingBracketValidator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValidationResult","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl RefUnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["security"] = [{"text":"impl RefUnwindSafe for SecurityConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecurityManager","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fetcher","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionReq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SemVerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionReq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Predicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WildcardVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Op","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_ignored"] = [{"text":"impl&lt;'a, 'b, D, F&gt; RefUnwindSafe for Deserializer&lt;'a, 'b, D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Path&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; RefUnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; RefUnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Serializer","synthetic":true,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl&lt;'de&gt; RefUnwindSafe for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for Serializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for SeqSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for TupleSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !RefUnwindSafe for TupleStructSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !RefUnwindSafe for TupleVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for MapSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for StructSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !RefUnwindSafe for StructVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["serde_with"] = [{"text":"impl RefUnwindSafe for SpaceSeparator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommaSeparator","synthetic":true,"types":[]},{"text":"impl&lt;Sep&gt; RefUnwindSafe for StringWithSeparator&lt;Sep&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Sep: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl RefUnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["shlex"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Shlex&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal"] = [{"text":"impl RefUnwindSafe for Trap","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl RefUnwindSafe for SigId","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog"] = [{"text":"impl&lt;D&gt; RefUnwindSafe for Logger&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Discard","synthetic":true,"types":[]},{"text":"impl&lt;D, F&gt; RefUnwindSafe for Filter&lt;D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for LevelFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, E&gt; RefUnwindSafe for MapError&lt;D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D1, D2&gt; RefUnwindSafe for Duplicate&lt;D1, D2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for Fuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for IgnoreResult&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RecordStatic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; RefUnwindSafe for FnValue&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for PushFnValueSerializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PushFnValue&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for SingleKV&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for OwnedKV&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for BorrowedKV&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedKVList","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for MutexDrainError&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Drain&gt;::Err: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterLevel","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["slog_async"] = [{"text":"impl&lt;D&gt; RefUnwindSafe for AsyncCoreBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AsyncGuard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AsyncCore","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for AsyncBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AsyncError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OverflowStrategy","synthetic":true,"types":[]}];
implementors["slog_json"] = [{"text":"impl&lt;W&gt; !RefUnwindSafe for Json&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for JsonBuilder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog_term"] = [{"text":"impl&lt;D&gt; RefUnwindSafe for FullFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for FullFormatBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !RefUnwindSafe for CompactFormat&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for CompactFormatBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !RefUnwindSafe for PlainDecorator&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !RefUnwindSafe for PlainRecordDecorator&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for PlainSyncDecorator&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for PlainSyncRecordDecorator&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TermDecoratorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TermDecorator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TermRecordDecorator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestStdoutWriter","synthetic":true,"types":[]}];
implementors["sst_importer"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IMPORT_RPC_DURATION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IMPORT_UPLOAD_CHUNK_BYTES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IMPORT_UPLOAD_CHUNK_DURATION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IMPORT_WRITE_CHUNK_DURATION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IMPORTER_DOWNLOAD_DURATION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IMPORTER_DOWNLOAD_BYTES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IMPORTER_INGEST_DURATION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IMPORTER_INGEST_BYTES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IMPORTER_ERROR_VEC","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for ImportModeSwitcherInner&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for ImportModeSwitcher&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportModeDBOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportModeCFOptions","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SSTImporter","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for SSTWriter&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportDir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImportPath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImportFile","synthetic":true,"types":[]}];
implementors["str_stack"] = [{"text":"impl RefUnwindSafe for StrStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Writer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl RefUnwindSafe for StrSimError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["syn_mid"] = [{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pat","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindStyle","synthetic":true,"types":[]}];
implementors["sysinfo"] = [{"text":"impl RefUnwindSafe for DiskUsage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoadAvg","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NetworksIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefreshKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for User","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Component","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Disk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetworkData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Networks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Process","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Processor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for System","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DiskType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProcessStatus","synthetic":true,"types":[]}];
implementors["take_mut"] = [{"text":"impl&lt;'s&gt; !RefUnwindSafe for Scope&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'm, T, F&gt; !RefUnwindSafe for Hole&lt;'c, 'm, T, F&gt;","synthetic":true,"types":[]}];
implementors["tame_gcs"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scopes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StandardQueryParameters&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conditionals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredefinedAcl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Projection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DeleteObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DownloadObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DownloadObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GetObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GetObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for InsertObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InsertResponse","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Multipart&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ListOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PatchObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatchObjectResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpStatusError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IoError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for JsonError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ApiErrorInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ApiError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; RefUnwindSafe for UrlSigner&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SignedUrlOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServiceAccount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DigestAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigningAlgorithm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Key&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BucketName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ObjectName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ObjectId&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tame_oauth"] = [{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServiceAccountInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ServiceAccountAccess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestReason","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TokenOrRequest","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl RefUnwindSafe for TempDir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamedTempFile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathPersistError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PersistError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TempPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["term"] = [{"text":"impl RefUnwindSafe for Attr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TermInfo","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TerminfoTerminal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variables","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Param","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["test_coprocessor"] = [{"text":"impl RefUnwindSafe for Column","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColumnBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DAGSelect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DAGChunkSpliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProductTable","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; !RefUnwindSafe for Insert&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; !RefUnwindSafe for Delete&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for Store&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableBuilder","synthetic":true,"types":[]}];
implementors["test_pd"] = [{"text":"impl&lt;C&gt; !RefUnwindSafe for Server&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlreadyBootstrapped","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Incompatible","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LeaderChange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NotRetry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Retry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Split","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Roulette","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for PdMock&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["test_raftstore"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Cluster&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChannelTransportCore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChannelTransport","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NodeCluster","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TestPdClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MockRaftStoreRouter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddressMap","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ServerCluster","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageTypeNotifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DropPacketFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DelayFilter","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for SimulateTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for DefaultFilterFactory&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for CloneFilterFactory&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PartitionFilterFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsolationFilterFactory","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegionPacketFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapshotFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CollectSnapshotFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DropSnapshotFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvSnapshotFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LeadingFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LeadingDuplicatedSnapshotFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RandomLatencyFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LeaseReadFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DropMessageFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Store","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Cluster","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchedulePolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Operator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ServerMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PartitionFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TEST_CONFIG","synthetic":true,"types":[]}];
implementors["test_sst_importer"] = [{"text":"impl RefUnwindSafe for TestPropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestPropertiesCollector","synthetic":true,"types":[]}];
implementors["test_storage"] = [{"text":"impl&lt;E&gt; !RefUnwindSafe for AssertionStorage&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for SyncTestStorageBuilder&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for SyncTestStorage&lt;E&gt;","synthetic":true,"types":[]}];
implementors["test_util"] = [{"text":"impl RefUnwindSafe for KvGenerator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseTraceLogger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Never","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nope","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; RefUnwindSafe for CaseLifeWatcher&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FailpointHook","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl RefUnwindSafe for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoHyphenation","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; RefUnwindSafe for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ThreadLocal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tidb_query_aggr"] = [{"text":"impl RefUnwindSafe for AllAggrDefinitionParser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnDefinitionParserAvg","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AggrFnAvg&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AggrFnStateAvg&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnAvgForEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnStateAvgForEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnAvgForSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnStateAvgForSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitAnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitXor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AggrFnDefinitionParserBitOp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AggrFnBitOp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AggrFnStateBitOp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnDefinitionParserCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnStateCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnDefinitionParserFirst","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AggrFnFirst&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AggrFnStateFirst&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as EvaluableRef&lt;'static&gt;&gt;::EvaluableType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Max","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Min","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for AggrFnDefinitionParserExtremum&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; RefUnwindSafe for AggFnExtremumForBytes&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; RefUnwindSafe for AggFnStateExtremum4Bytes&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for AggFnExtremumForEnum&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for AggFnStateExtremumForEnum&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for AggFnExtremumForSet&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for AggFnStateExtremumForSet&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for AggFnExtremum&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for AggFnStateExtremum&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as EvaluableRef&lt;'static&gt;&gt;::EvaluableType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnDefinitionParserSum","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AggrFnSum&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AggrFnStateSum&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnSumForEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnStateSumForEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnSumForSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFnStateSumForSet","synthetic":true,"types":[]}];
implementors["tidb_query_codegen"] = [{"text":"impl RefUnwindSafe for AggrFunctionStateExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggrFunctionOpts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for state","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpnFnAttr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpnFnRefEvaluableTypeWithOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpnFnEvaluableType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpnFnSignatureParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VargsRpnFnSignatureParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpnFnSignatureReturnGuardType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpnFnSignatureReturnType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValidatorFnGenerator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VargsRpnFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawVargsRpnFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NormalRpnFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpnFnRefEvaluableType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Option","synthetic":true,"types":[]}];
implementors["tidb_query_common"] = [{"text":"impl !RefUnwindSafe for StorageError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EvaluateError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecSummary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecSummaryCollectorEnabled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecSummaryCollectorDisabled","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; RefUnwindSafe for WithSummaryCollector&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecuteStats","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalCoprExecutorCountInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalCoprExecutorCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_EXECUTOR_COUNT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EXECUTOR_COUNT_METRICS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecutorName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalCoprExecutorCountDelegator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntervalRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangesIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IterStatus","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RangesScanner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RangesScannerOptions&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FixtureStorage","synthetic":true,"types":[]}];
implementors["tidb_query_datatype"] = [{"text":"impl RefUnwindSafe for FieldTypeBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldTypeFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EvalType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Collation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldTypeTp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataTypeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LazyBatchColumnVec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LazyBatchColumn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Chunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Column","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Row&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RowIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; RefUnwindSafe for SortKey&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharsetBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharsetUtf8mb4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CollatorBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CollatorLatin1Bin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CollatorUtf8Mb4Bin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CollatorUtf8Mb4BinNoPadding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CollatorUtf8Mb4GeneralCi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CollatorUtf8Mb4UnicodeCi","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BitAndIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitVec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BytesGuard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BytesWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChunkedVecBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PartialBytesWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChunkedVecEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChunkedVecJson","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChunkedVecSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ChunkedVecSized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LogicalRows&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScalarValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ScalarValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VectorValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for LogicalRowsIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Datum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathExpression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModifyType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinaryLiteral","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decimal","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Res&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EnumRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for JsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Json","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JsonType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BinaryModifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathLeg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JsonVisitor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MergeUnit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Set","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TzOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeekMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for LEBytes&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RowSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Column","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RowColMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RowColsDict","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SqlMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EvalConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EvalWarnings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EvalContext","synthetic":true,"types":[]}];
implementors["tidb_query_executors"] = [{"text":"impl&lt;Src&gt; !RefUnwindSafe for BatchFastHashAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for BatchIndexScanExecutor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; RefUnwindSafe for BatchLimitExecutor&lt;Src&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !RefUnwindSafe for BatchSelectionExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !RefUnwindSafe for BatchSimpleAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !RefUnwindSafe for BatchSlowHashAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !RefUnwindSafe for BatchStreamAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for BatchTableScanExecutor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !RefUnwindSafe for BatchTopNExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FastHashAggregationImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Groups","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexScanExecutorImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeHandleStrategy","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BatchExecuteResult","synthetic":true,"types":[]},{"text":"impl&lt;SS&gt; !RefUnwindSafe for BatchExecutorsRunner&lt;SS&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SimpleAggregationImpl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SlowHashAggregationImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKeyRefUnsafe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BatchStreamAggregationImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableScanExecutorImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeapItemSourceData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeapItemUnsafe","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !RefUnwindSafe for Entities&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src, I&gt; !RefUnwindSafe for AggregationExecutor&lt;Src, I&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HashAggregationHelper","synthetic":true,"types":[]},{"text":"impl&lt;S, I&gt; RefUnwindSafe for ScanExecutor&lt;S, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, I&gt; RefUnwindSafe for ScanExecutorOptions&lt;S, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tidb_query_expr"] = [{"text":"impl !RefUnwindSafe for RpnExpression","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RpnExpressionBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RpnExpressionNode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RpnStackNode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RpnStackNodeVectorValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpnFnMeta","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RpnFnCallExtra&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ScalarArg&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&gt; RefUnwindSafe for VectorArg&lt;'a, T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, Rem&gt; RefUnwindSafe for Arg&lt;A, Rem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Null","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, E&gt; RefUnwindSafe for ArgConstructor&lt;'a, A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Arithmetic_Evaluator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ArithmeticWithCtx_Evaluator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntIntPlus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntUintPlus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UintIntPlus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UintUintPlus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RealPlus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecimalPlus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntIntMinus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntUintMinus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UintIntMinus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UintUintMinus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RealMinus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecimalMinus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntIntMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntUintMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UintIntMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UintUintMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RealMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecimalMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecimalMultiply","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RealMultiply","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntIntMultiply","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntUintMultiply","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UintIntMultiply","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UintUintMultiply","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntDivideInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntDivideUint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UintDivideUint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UintDivideInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntDivideDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecimalDivide","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RealDivide","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastSignedIntAsUnsignedInt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastIntAsIntOthers_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastRealAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastStringAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastBinaryStringAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastDecimalAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastJsonAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastSignedIntAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastSignedIntAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastUnsignedIntAsSignedOrUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastRealAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastRealAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastStringAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastBinaryStringAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastStringAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastBinaryStringAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastDecimalAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CastAnyAsString_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastUintAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastFloatRealAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastStringAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastUnsignedIntAsSignedOrUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastSignedIntAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastRealAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastStringAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastDecimalAsSignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastDecimalAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; RefUnwindSafe for CastAnyAsDecimal_Evaluator&lt;From&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;From: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastJsonAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastBytesAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastIntAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastTimeAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastDurationAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastRealAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastBytesAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastDecimalAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastJsonAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastIntAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastRealAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastStringAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastDecimalAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastTimeAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastDurationAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastBoolAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastUintAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastStringAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastJsonAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;From, To&gt; RefUnwindSafe for CastAnyAsAny_Evaluator&lt;From, To&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;From: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;To: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;To&gt; RefUnwindSafe for CastJsonAsAny_Evaluator&lt;To&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;To: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; RefUnwindSafe for CastAnyAsJson_Evaluator&lt;From&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;From: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; RefUnwindSafe for CastAnyAsBytes_Evaluator&lt;From&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;From: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastJsonAsBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for Compare_Evaluator&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for CompareJson_Evaluator&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, F&gt; RefUnwindSafe for CompareBytes_Evaluator&lt;C, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; RefUnwindSafe for BasicComparer&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for UintUintComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for UintIntComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for IntUintComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmpOpLT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmpOpLE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmpOpGT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmpOpGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmpOpNE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmpOpEQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmpOpNullEQ","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for NormalInByHash&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for CollationAwareBytesInByHash&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CompareInMeta&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IfNull_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfNullJson_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfNullBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IfCondition_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfConditionJson_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IfConditionBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Md5_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha1_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha2_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compress_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uncompress_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Password_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UncompressedLength_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RandomBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JsonDepth_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JsonType_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JsonUnquote_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for Like_Evaluator&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pi_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crc32_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Log1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Log2Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Log2_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Log10_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for Ceil_Evaluator&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CeilReal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CeilDecToDec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CeilIntToDec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CeilDecToInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CeilIntToInt","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Floor_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloorReal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloorIntToDec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloorDecToInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloorDecToDec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloorIntToInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbsReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AbsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sign_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sqrt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Radians_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sin_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cos_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tan_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cot_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pow_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rand_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RandWithSeedFirstGen_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Degrees_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asin_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Acos_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Atan1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Atan2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conv_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundInt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundDec_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TruncateIntWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TruncateIntWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TruncateRealWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TruncateRealWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundWithFracInt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundWithFracDec_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundWithFracReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntWithSign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MySQLRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InetAton_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InetNtoa_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inet6Aton_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inet6Ntoa_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsIpv4_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsIpv4Compat_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsIpv4Mapped_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsIpv6_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uuid_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogicalAnd_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogicalOr_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogicalXor_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryNotInt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryNotReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryNotDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryMinusUint_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryMinusInt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryMinusReal_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryMinusDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IsNull_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNullBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNullJson_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitAnd_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitOr_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitXor_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitNeg_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeepNullOn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeepNullOff","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for IntIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for RealIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for DecimalIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for IntIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for RealIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for DecimalIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LeftShift_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RightShift_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitCount_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bin_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OctInt_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OctString_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Length_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unhex_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitLength_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ord_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ascii_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReverseUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HexIntArg_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ltrim_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rtrim_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lpad_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LpadUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rpad_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Replace_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Left_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LeftUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Right_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Insert_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RightUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpperUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Upper_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HexStrArg_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Locate2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reverse_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Locate3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Space_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubstringIndex_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Strcmp_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstrUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FindInSet_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trim1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trim3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharLength_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharLengthUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ToBase64_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromBase64_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Quote_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Substring2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Substring3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrimDirection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateFormat_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeekWithMode_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeekDay_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DayOfWeek_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DayOfYear_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeekOfYear_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ToDays_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ToSeconds_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateDiff_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddDatetimeAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubDurationAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubDatetimeAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromDays_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MakeDate_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MakeTime_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Month_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MonthName_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hour_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Minute_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Second_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeToSec_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MicroSecond_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Year_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DayOfMonth_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DayName_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeriodAdd_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeriodDiff_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LastDay_Evaluator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddDurationAndDuration_Evaluator","synthetic":true,"types":[]}];
implementors["tikv"] = [{"text":"impl RefUnwindSafe for TitanCfConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultCfConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteCfConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LockCfConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftCfConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionCfConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TitanDBConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DbConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftDefaultCfConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftDbConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftEngineConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBConfigManger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetricConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnifiedReadPoolConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageReadPoolConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoprReadPoolConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadPoolConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackupConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CdcConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TiKvConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TIKVCONFIG_TYPED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigController","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConfigInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DBType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for Endpoint&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReqContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CachedRequestHandler","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for ChecksumContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for TiKVStorage&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Store&gt;::Scanner: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for DagHandlerBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BatchDAGHandler","synthetic":true,"types":[]},{"text":"impl&lt;'a, PF, F&gt; !RefUnwindSafe for ConcurrencyLimiter&lt;'a, PF, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, PF, F&gt; !RefUnwindSafe for __ConcurrencyLimiterProjection&lt;'pin, 'a, PF, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, PF, F&gt; !RefUnwindSafe for __ConcurrencyLimiterProjectionRef&lt;'pin, 'a, PF, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LimitationState&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; RefUnwindSafe for Tracker&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, F&gt; RefUnwindSafe for __TrackerProjection&lt;'pin, 'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, F&gt; RefUnwindSafe for __TrackerProjectionRef&lt;'pin, 'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_REQ_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_REQ_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_REQ_HANDLE_TIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_REQ_HANDLE_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_REQ_WAIT_TIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_REQ_WAIT_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_REQ_HANDLER_BUILD_TIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_REQ_HANDLER_BUILD_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_REQ_ERROR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_SCAN_KEYS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_SCAN_KEYS_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_SCAN_DETAILS_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_ROCKSDB_PERF_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_ROCKSDB_PERF_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_DAG_REQ_COUNT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_RESP_SIZE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_ACQUIRE_SEMAPHORE_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COPR_WAITING_FOR_SEMAPHORE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopLocalMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReqTag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanKeysKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PerfMetric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcquireSemaphoreType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprReqHistogramInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoprReqHistogramDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprReqHistogram","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReqWaitHistogramInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReqWaitHistogramDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReqWaitHistogram2Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReqWaitHistogram2Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReqWaitHistogram","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PerfCounterInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PerfCounterDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PerfCounter2Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PerfCounter2Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PerfCounter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprScanKeysHistogramInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprScanKeysHistogramDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprScanKeysHistogram2Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoprScanKeysHistogram2Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprScanKeysHistogram","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprScanDetailsInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprScanDetailsDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprScanDetails2Inner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprScanDetails2Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprScanDetails3Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoprScanDetails3Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CoprScanDetails","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoprAcquireSemaphoreTypeCounterVec","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for FuturePoolTicker&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for AnalyzeContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SampleBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SampleCollector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmSketch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FmSketch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bucket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Histogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tracker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrackerState","synthetic":true,"types":[]},{"text":"impl&lt;E, Router&gt; !RefUnwindSafe for ImportSSTService&lt;E, Router&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReporterTicker&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadPoolHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadPoolError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UNIFIED_READ_POOL_RUNNING_TASKS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONFIG_ROCKSDB_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CPU_CORES_QUOTA_GAUGE","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !RefUnwindSafe for ConnectionBuilder&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !RefUnwindSafe for RaftClient&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_COMMAND_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAP_TASK_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_GCTASK_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_GCTASK_FAIL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RESOLVE_STORE_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GRPC_MSG_FAIL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_KEYS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GRPC_MSG_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GRPC_MSG_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GRPC_MSG_HISTOGRAM_GLOBAL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_COMMAND_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SNAP_TASK_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_GCTASK_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_GCTASK_FAIL_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RESOLVE_STORE_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GRPC_MSG_FAIL_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_KEYS_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SEND_SNAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GRPC_REQ_BATCH_COMMANDS_SIZE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GRPC_RESP_BATCH_COMMANDS_SIZE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_EMPTY_RANGE_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_SKIPPED_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_TASK_DURATION_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_TOO_BUSY_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AUTO_GC_STATUS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AUTO_GC_SAFE_POINT_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AUTO_GC_PROCESSED_REGIONS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_MESSAGE_RECV_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_MESSAGE_BATCH_SIZE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REPORT_FAILURE_MSG_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_MESSAGE_FLUSH_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RAFT_MESSAGE_DELAY_FLUSH_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REQUEST_BATCH_SIZE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REQUEST_BATCH_RATIO_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASYNC_REQUESTS_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASYNC_REQUESTS_DURATIONS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASYNC_REQUESTS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASYNC_REQUESTS_DURATIONS_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrpcTypeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcCommandKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapTask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolveStore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcKeysCF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcKeysDetail","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalGrpcTypeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchableRequestKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestStatusKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestTypeKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcCommandCounterVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcCommandCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcCommandCounterVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapTaskCounterVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SnapTaskCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapTaskCounterVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcTaskCounterVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcTaskCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcTaskCounterVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcTaskFailCounterVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcTaskFailCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcTaskFailCounterVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResolveStoreCounterVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolveStoreCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResolveStoreCounterVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GrpcMsgFailCounterVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrpcMsgFailCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GrpcMsgFailCounterVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcKeysCounterVecInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcKeysCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcKeysCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcKeysCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcKeysCounterVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GrpcMsgHistogramVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrpcMsgHistogramVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GrpcMsgHistogramVec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrpcMsgHistogramGlobal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestBatchSizeHistogramVec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestBatchRatioHistogramVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AsyncRequestsCounterVecInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AsyncRequestsCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AsyncRequestsCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AsyncRequestsCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AsyncRequestsCounterVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AsyncRequestsDurationVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AsyncRequestsDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AsyncRequestsDurationVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Queue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchMessageBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SnapshotReporter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, M, B&gt; !RefUnwindSafe for RaftCall&lt;R, M, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !RefUnwindSafe for StreamBackEnd&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConnectionPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CachedQueue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GrpcCompressionType","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for MvccInfoIterator&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; RefUnwindSafe for Debugger&lt;ER&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ER: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccChecker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteCompactionFilterFactory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcWorkerConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !RefUnwindSafe for AutoGcConfig&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, RR&gt; !RefUnwindSafe for GcWorker&lt;E, RR&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcTask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LockObserverState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LockObserver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LockCollectorRunner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AppliedLockCollector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LockCollectorTask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_CONTEXT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteCompactionFilter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CompactionFilterStats","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcManagerContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GcManagerHandle","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !RefUnwindSafe for GcManager&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcManagerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcManagerState","synthetic":true,"types":[]},{"text":"impl&lt;E, RR&gt; RefUnwindSafe for GcRunner&lt;E, RR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;RR: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadLoad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadLoadStatistics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LockManagerConfigManager","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LockManager","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Locks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DetectTable","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Scheduler","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RoleChangeNotifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; !RefUnwindSafe for Detector&lt;S, P&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Role","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DetectType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TASK_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ERROR_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAITER_LIFETIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DETECT_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAIT_TABLE_STATUS_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DETECTOR_LEADER_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TASK_COUNTER_METRICS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ERROR_COUNTER_METRICS","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalTaskCounterInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalTaskCounterDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalTaskCounter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalErrorCounterInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalErrorCounterDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalErrorCounter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitTableStatusGauge","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DelayInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Waiter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WaitTable","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Scheduler","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WaiterManager","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;C, ER&gt; !RefUnwindSafe for Node&lt;C, ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for RaftKv&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReplicaReadLockChecker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmdRes","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StoreAddr","synthetic":true,"types":[]},{"text":"impl&lt;T, RR&gt; RefUnwindSafe for Runner&lt;T, RR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RR: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PdStoreAddrResolver","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; !RefUnwindSafe for Server&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TestRaftStoreRouter","synthetic":true,"types":[]},{"text":"impl&lt;ER, T&gt; !RefUnwindSafe for Service&lt;ER, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl&lt;T, E, L&gt; !RefUnwindSafe for Service&lt;T, E, L&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReqBatcher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IoLoad","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LogIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NUM_REGEX","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NicSnapshot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchRespCollector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SnapChunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendStat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RecvSnapContext","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Runner&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogLevelRequest","synthetic":true,"types":[]},{"text":"impl&lt;E, R&gt; !RefUnwindSafe for StatusServer&lt;E, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for TlsIncoming&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, S&gt; RefUnwindSafe for __TlsIncomingProjection&lt;'pin, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, S&gt; RefUnwindSafe for __TlsIncomingProjectionRef&lt;'pin, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftProgress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftHardState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftSoftState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Epoch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionPeer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionMergeState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftTruncatedState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftApplyState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegionMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftProgressState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftStateRole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RaftPeerRole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PROFILER_MUTEX","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProfGuard","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; !RefUnwindSafe for ServerTransport&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CfStatistics","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for Cursor&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PerfStatisticsDelta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PerfStatisticsInstant","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RocksEngine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statistics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestEngineBuilder","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SnapshotStore&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PrewriteResult","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; !RefUnwindSafe for Storage&lt;E, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; RefUnwindSafe for TestStorageBuilder&lt;E, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PessimisticLockRes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondaryLocksStatus","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StorageCallback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TxnStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageConfigManger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlockCacheConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorHeaderKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BTreeEngine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BTreeEngineIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BTreeEngineSnapshot","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for CursorBuilder&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatisticsSummary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CbContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SnapContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Modify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanMode","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PerfStatisticsFields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Runner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RocksEngineCore","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyLockManager","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageLocalMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KV_COMMAND_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KV_COMMAND_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_STAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_STAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_WRITING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_CONTEX_GAUGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_HISTOGRAM_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_LATCH_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_LATCH_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_PROCESSING_READ_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_PROCESSING_READ_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_PROCESSING_WRITE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_TOO_BUSY_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_TOO_BUSY_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_COMMANDS_PRI_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SCHED_COMMANDS_PRI_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KV_COMMAND_KEYREAD_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KV_COMMAND_KEYREAD_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KV_COMMAND_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KV_COMMAND_SCAN_DETAILS_STATIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KV_COMMAND_KEYWRITE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KV_COMMAND_KEYWRITE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for REQUEST_EXCEED_BOUND","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandStageKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandPriority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcKeysCF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcKeysDetail","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CommandScanDetailsInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CommandScanDetailsDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CommandScanDetails2Inner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CommandScanDetails2Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CommandScanDetails3Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandScanDetails3Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CommandScanDetails","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedDurationVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchedDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedDurationVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProcessingReadVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProcessingReadVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProcessingReadVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for KReadVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KReadVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for KReadVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for KvCommandCounterVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KvCommandCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for KvCommandCounterVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedStageCounterVecInner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedStageCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedStageCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchedStageCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedStageCounterVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedLatchDurationVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchedLatchDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedLatchDurationVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for KvCommandKeysWrittenVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KvCommandKeysWrittenVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for KvCommandKeysWrittenVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedTooBusyVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchedTooBusyVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedTooBusyVec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedCommandPriCounterVecInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchedCommandPriCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedCommandPriCounterVec","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Mvcc&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GC_DELETE_VERSIONS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MVCC_VERSIONS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for PointGetter&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for PointGetterBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for MvccReader&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for ScannerBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GcInfo","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for MvccTxn&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReleasedLock","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TxnCommitRecord","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Scanner&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewerTsCheckState","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl&lt;Iter, Ob&gt; RefUnwindSafe for MvccInfoScanner&lt;Iter, Ob&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ob: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccInfoCollector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccChecksum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONCURRENCY_MANAGER_LOCK_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MVCC_CONFLICT_COUNTER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MVCC_DUPLICATE_CMD_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MVCC_CHECK_TXN_STATUS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccConflictKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccDuplicateCommandKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccCheckTxnStatusKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccConflictCounterVec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccDuplicateCmdCounterVec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccCheckTxnStatusCounterVec","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for ScannerConfig&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for BackwardKvScanner&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Cursors&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; !RefUnwindSafe for ForwardScanner&lt;S, P&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LatestKvPolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LatestEntryPolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeltaEntryPolicy","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for HandleRes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntryBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MissingLockAction","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TransactionProperties&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntryBatch","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FixtureStore","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FixtureStoreScanner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommitKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransactionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TxnEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProcessResult","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcquirePessimisticLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckSecondaryLocks","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CheckTxnStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cleanup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Commit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccByKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccByStartTs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pause","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PessimisticRollback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Prewrite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrewritePessimistic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolveLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolveLockLite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolveLockReadPhase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rollback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TxnHeartBeat","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TypedCommand&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReleasedLocks","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WriteResult","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; !RefUnwindSafe for WriteContext&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Command","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponsePolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondaryLockStatus","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for Prewriter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as PrewriteKind&gt;::Mutation: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Optimistic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pessimistic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedLocalMetrics","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchedPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchedTicker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmdTimer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TaskContext","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; !RefUnwindSafe for SchedulerInner&lt;L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; !RefUnwindSafe for Scheduler&lt;E, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; !RefUnwindSafe for Gc&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrewriteMutation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LockStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Latch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lock","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Latches","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for FuturePoolTicker&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MvccInfo","synthetic":true,"types":[]}];
implementors["tikv_alloc"] = [{"text":"impl !RefUnwindSafe for ProfError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for THREAD_MEMORY_MAP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryStatsAccessor","synthetic":true,"types":[]}];
implementors["tikv_util"] = [{"text":"impl RefUnwindSafe for DefaultRng","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DeferContext&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RingQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MustConsumeVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; RefUnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WithConcatExtend&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadableSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OptionReadableSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadableDuration","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for VersionTrack&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Tracker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TomlWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TomlLine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchCommandsWaker","synthetic":true,"types":[]},{"text":"impl&lt;T, C, A&gt; RefUnwindSafe for MustCall&lt;T, C, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeadlineError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Deadline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyBuilder","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for TikvFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for RocksFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for LogAndFuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for SlowLogFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SlowCostSerializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogCost","synthetic":true,"types":[]},{"text":"impl&lt;N, R, S, T&gt; RefUnwindSafe for LogDispatcher&lt;N, R, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RotatingFileLogger","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RotatingFileLoggerBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RotateByTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RotateBySize","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for Record&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for ValueEntry&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for Trace&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for LruCache&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadInfoStatistics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HistogramReader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CRITICAL_ERROR","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Metrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadsCollector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CLK_TCK","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TidRetriever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProcessCollector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CLK_TCK","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PAGESIZE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BOOT_TIME","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AllocStatsCollector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for LooseBoundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Notifier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VecCollector","synthetic":true,"types":[]},{"text":"impl&lt;T, E, I, C&gt; RefUnwindSafe for BatchReceiver&lt;T, E, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SYS_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LiunxStyleCpuTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MountPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGroupSubsys","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CGroupSys","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MountInfoFieldPart1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MountInfoFieldPart2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubsysFields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysQuota","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixSecs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SlowTimer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Monitor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoarseClock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadReadId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Timer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TimeoutTask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLOBAL_TIMER_HANDLE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeZero","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SteadyClock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for STEADY_CLOCK","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SteadyTimer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GLOBAL_STEADY_TIMER","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Scheduler&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stopped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Builder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for LazyWorker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReceiverWrapper&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Scheduler&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Worker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ScheduleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WORKER_PENDING_TASK_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WORKER_HANDLED_TASK_VEC","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for RunnableWrapper&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Msg&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Full","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FuturePool","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TickerWrapper&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultTicker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for YatpPoolRunner&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for YatpPoolBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Env","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FUTUREPOOL_RUNNING_TASK_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FUTUREPOOL_HANDLED_TASK_VEC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FUTUREPOOL_SCHEDULE_DURATION_VEC","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl RefUnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OffsetDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimitiveDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtcOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConversionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ComponentRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndeterminateOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]}];
implementors["tipb"] = [{"text":"impl RefUnwindSafe for AnalyzeReq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyzeIndexReq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyzeColumnsReq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyzeColumnsResp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyzeIndexResp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bucket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Histogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FmSketch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SampleCollector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmSketchRow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmSketchTopN","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmSketch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RpnExpr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ByItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChecksumRewriteRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChecksumRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChecksumResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Executor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableScan","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexScan","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Selection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Projection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Aggregation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TopN","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecutorExecutionSummary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Row","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Chunk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RowMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DagRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChunkMemoryLayout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserIdentity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InUnionMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompareInMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TableInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColumnInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnalyzeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScalarFuncSig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChecksumScanOn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChecksumAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExecType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EncodeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Endian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]}];
implementors["tipb_helper"] = [{"text":"impl RefUnwindSafe for ExprDefBuilder","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl RefUnwindSafe for DirBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadDir","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for PollEvented&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Stderr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Stdin","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; RefUnwindSafe for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized, W:&nbsp;?Sized&gt; RefUnwindSafe for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, B&gt; RefUnwindSafe for StreamReader&lt;S, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RecvHalf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SendHalf","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UCred","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Command","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Child","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChildStdin","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChildStdout","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ChildStderr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryCurrentError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JoinError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for JoinHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for StreamMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Barrier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryLockError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for OwnedMutexGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Notify","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClosedError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DelayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Elapsed","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Timeout&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Throttle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl !RefUnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnterError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParkThread","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnparkThread","synthetic":true,"types":[]}];
implementors["tokio_openssl"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl !RefUnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DelayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Timeout&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Clock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Throttle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ThrottleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl&lt;T, N&nbsp;=&nbsp;Clock&gt; !RefUnwindSafe for Timer&lt;T, N&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Turn","synthetic":true,"types":[]}];
implementors["tokio_tls"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TlsAcceptor","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl RefUnwindSafe for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; RefUnwindSafe for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinesCodec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LinesCodecError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthDelimitedCodec","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for TryLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Locked&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["txn_types"] = [{"text":"impl RefUnwindSafe for Lock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeStamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OldValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TxnExtra","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Write","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WriteRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TsSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mutation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MutationType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorInner","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl RefUnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; RefUnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNormalized","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl RefUnwindSafe for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["uuid"] = [{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uuid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hyphenated","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for HyphenatedRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Simple","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SimpleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Urn","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UrnRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; RefUnwindSafe for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl RefUnwindSafe for Void","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WalkDir","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl !RefUnwindSafe for Giver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Taker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SharedGiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Closed","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl RefUnwindSafe for ParserConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextPosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmlVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Namespace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for EventReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Events&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmlEvent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EmitterError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["yatp"] = [{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Remote&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MULTILEVEL_LEVEL_ELAPSED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MULTILEVEL_LEVEL0_CHANCE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchedConfig","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for CloneRunnerBuilder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Local&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ThreadPool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extras","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QueueType","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for MultilevelRunnerBuilder&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for MultilevelRunner&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TaskCell","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Handle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Runner","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TaskCell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Runner","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()