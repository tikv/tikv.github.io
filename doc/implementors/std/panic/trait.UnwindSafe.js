(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl UnwindSafe for RollingAdler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl UnwindSafe for AHasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RandomState","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; UnwindSafe for AHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; UnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; UnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; UnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl UnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; UnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; UnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colour","synthetic":true,"types":[]}];
implementors["antidote"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryLockError","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Guard&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as RefCnt&gt;::Base: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Lease&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as RefCnt&gt;::Base: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for ArcSwapAny&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as RefCnt&gt;::Base: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; UnwindSafe for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for PrivateSharded&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["async_speed_limit"] = [{"text":"impl UnwindSafe for StandardClock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nanoseconds","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ManualDelay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ManualClock","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for Builder&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Instant: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for Limiter&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, R&gt; UnwindSafe for Consume&lt;C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Delay: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, C&gt; UnwindSafe for Resource&lt;R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Delay: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !UnwindSafe for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrintFmt","synthetic":true,"types":[]}];
implementors["backup"] = [{"text":"impl&lt;E, R&gt; !UnwindSafe for Endpoint&lt;E, R&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackupRawKVWriter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackupWriter","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LimitedStorage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackupRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Progress&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ControlThreadPool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BACKUP_REQUEST_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BACKUP_RANGE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BACKUP_RANGE_SIZE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BACKUP_THREAD_POOL_SIZE_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BACKUP_RANGE_ERROR_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Writer","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for EncoderWriter&lt;'a, W&gt;","synthetic":true,"types":[]}];
implementors["batch_system"] = [{"text":"impl&lt;N, C&gt; !UnwindSafe for BatchSystem&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;Owner&gt; UnwindSafe for BasicMailbox&lt;Owner&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Owner, Scheduler&gt; UnwindSafe for Mailbox&lt;Owner, Scheduler&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Scheduler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C, Ns, Cs&gt; UnwindSafe for Router&lt;N, C, Ns, Cs&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Cs: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ns: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; UnwindSafe for NormalScheduler&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; UnwindSafe for ControlScheduler&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; UnwindSafe for Batch&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C, Handler&gt; UnwindSafe for Poller&lt;N, C, Handler&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Handler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; UnwindSafe for FsmTypes&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReschedulePolicy","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for FsmState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CheckDoResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Runner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HandleMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Handler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Message","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl UnwindSafe for BStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; UnwindSafe for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl UnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl UnwindSafe for BytesMut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bzip2_sys"] = [{"text":"impl UnwindSafe for bz_stream","synthetic":true,"types":[]}];
implementors["c2_chacha"] = [{"text":"impl UnwindSafe for ChaCha","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for State&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cache_size"] = [{"text":"impl UnwindSafe for CacheType","synthetic":true,"types":[]}];
implementors["cargo_metadata"] = [{"text":"impl UnwindSafe for Dependency","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Artifact","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArtifactProfile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuildScript","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompilerMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PackageId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Resolve","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NodeDep","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DepKindInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Package","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DependencyKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CargoOpt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiagnosticCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiagnosticSpanLine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiagnosticSpanMacroExpansion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiagnosticSpan","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Applicability","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiagnosticLevel","synthetic":true,"types":[]}];
implementors["cdc"] = [{"text":"impl UnwindSafe for CdcTxnExtraScheduler","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Endpoint&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CdcObserver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DownstreamID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Downstream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pending","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delegate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DownstreamState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PendingLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OldValueCache","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Initializer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Deregister","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CDC_RESOLVED_TS_GAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CDC_SCAN_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CDC_MIN_RESOLVED_TS_REGION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CDC_MIN_RESOLVED_TS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CDC_PENDING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CDC_CAPTURED_REGION_COUNT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CDC_OLD_VALUE_CACHE_MISS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CDC_OLD_VALUE_CACHE_ACCESS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CDC_OLD_VALUE_CACHE_BYTES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CDC_OLD_VALUE_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CDC_OLD_VALUE_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for OldValueReader&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventBatcher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FeatureGate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Conn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CdcEvent","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; UnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; UnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["chrono_tz"] = [{"text":"impl UnwindSafe for Tz","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgSettings","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AppSettings","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shell","synthetic":true,"types":[]}];
implementors["cmd"] = [{"text":"impl&lt;ER&gt; !UnwindSafe for TiKVServer&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; !UnwindSafe for TiKVEngines&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; !UnwindSafe for Servers&lt;ER&gt;","synthetic":true,"types":[]}];
implementors["codec"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemComparableByteCodec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AscendingMemComparableCodecHelper","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescendingMemComparableCodecHelper","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactByteCodec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NumberCodec","synthetic":true,"types":[]}];
implementors["concurrency_manager"] = [{"text":"impl !UnwindSafe for KeyHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for KeyHandleGuard","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LockTable","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ConcurrencyManager","synthetic":true,"types":[]}];
implementors["configuration"] = [{"text":"impl UnwindSafe for ConfigValue","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl UnwindSafe for Hasher","synthetic":true,"types":[]}];
implementors["crc64fast"] = [{"text":"impl UnwindSafe for Digest","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; UnwindSafe for Worker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T&gt; UnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T, P&gt; UnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; UnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !UnwindSafe for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for SegQueue&lt;T&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_skiplist"] = [{"text":"impl&lt;K, V&gt; !UnwindSafe for SkipList&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !UnwindSafe for SkipMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for SkipSet&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, K, V&gt; !UnwindSafe for Entry&lt;'a, 'g, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for RefEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, K, V&gt; !UnwindSafe for Iter&lt;'a, 'g, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for RefIter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, Q, R, K, V&gt; !UnwindSafe for Range&lt;'a, 'g, Q, R, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q, R, K, V&gt; !UnwindSafe for RefRange&lt;'a, Q, R, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q, R, K, V&gt; !UnwindSafe for Range&lt;'a, Q, R, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q, R, T&gt; !UnwindSafe for Range&lt;'a, Q, R, T&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; UnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !UnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !UnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; UnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["darling_core"] = [{"text":"impl&lt;T&gt; UnwindSafe for Fields&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, W&gt; UnwindSafe for Generics&lt;P, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; UnwindSafe for Data&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;T, L, C&gt; UnwindSafe for GenericParam&lt;T, L, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Purpose","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IdentString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ignored","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathList","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SpannedValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; UnwindSafe for WithOriginal&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Override&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dashmap"] = [{"text":"impl&lt;K, V, S&gt; UnwindSafe for DashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; !UnwindSafe for OwningIter&lt;K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S, M&gt; !UnwindSafe for Iter&lt;'a, K, V, S, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S, M&gt; !UnwindSafe for IterMut&lt;'a, K, V, S, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for RwLockReadGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !UnwindSafe for VacantEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !UnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for RefMulti&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for RefMutMulti&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for Ref&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for RefMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl UnwindSafe for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["encryption"] = [{"text":"impl UnwindSafe for EncryptionConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KmsConfig","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; UnwindSafe for AesGcmCrypter&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for EncryptedFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DecrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for EncrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for EncrypterWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataKeyManager","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileBackend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KmsBackend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MasterKeyConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Iv","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AesGcmTag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for CrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dicts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlaintextBackend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemAesGcmBackend","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AwsKms","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ENCRYPTION_DATA_KEY_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ENCRYPTION_FILE_NUM_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ENCRYPTION_INITIALIZED_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ENCRYPT_DECRPTION_FILE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ENCRYPTION_FILE_SIZE_GAUGE","synthetic":true,"types":[]}];
implementors["engine_panic"] = [{"text":"impl UnwindSafe for PanicColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicCompactedEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicDBOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicTitanDBOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicDBVector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicEngine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicEngineIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicIngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicSnapshot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicSnapshotIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicSstReader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicSstReaderIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicSstWriter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicSstWriterBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicExternalSstFileReader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicTablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicTablePropertiesKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicTableProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicWriteBatch","synthetic":true,"types":[]}];
implementors["engine_rocks"] = [{"text":"impl UnwindSafe for RocksColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksDBOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksTitanDBOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksDBVector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksEngine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksIngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksdbLogger","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftDBLogger","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksSnapshot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksSstReader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksSstIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksSstWriterBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksSstWriter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for RocksSstPartitionerFactory&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for RocksSstPartitioner&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksTablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksTablePropertiesKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksTableProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksWriteBatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksWriteBatchVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksEngineIterator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RocksSeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RocksCompactionJobInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksCompactedEvent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CompactionListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksMvccProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksReadOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksWriteOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TsFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RocksCFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedSuffixSliceTransform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedPrefixSliceTransform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoopSliceTransform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SizeProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserProperties","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for UserCollectedPropertiesDecoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeOffsets","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangePropertiesCollector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangePropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccPropertiesCollector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccPropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeOffsetKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EngineTickerMetricsInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EngineTickerMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimpleEngineTickerMetricsInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimpleEngineTickerMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_SIZE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOCK_CACHE_USAGE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_CACHE_USAGE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_MEMORY_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_ESTIMATE_NUM_KEYS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_PENDING_COMPACTION_BYTES_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_COMPRESSION_RATIO_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_NUM_FILES_AT_LEVEL_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_NUM_SNAPSHOTS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_OLDEST_SNAPSHOT_DURATION_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_WRITE_STALL_REASON_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_TITANDB_NUM_BLOB_FILES_AT_LEVEL_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_TITANDB_LIVE_BLOB_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_TITANDB_NUM_LIVE_BLOB_FILE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_TITANDB_NUM_OBSOLETE_BLOB_FILE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_TITANDB_LIVE_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_TITANDB_OBSOLETE_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_TITANDB_BLOB_FILE_DISCARDABLE_RATIO_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_CACHE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_CACHE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_MEMTABLE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_MEMTABLE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_GET_SERVED_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_GET_SERVED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_WRITE_SERVED_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_WRITE_SERVED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOOM_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOOM_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_FLOW","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_STALL_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_STALL_MICROS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_COMPACTION_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_COMPACTION_FLOW","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_COMPACTION_DROP_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_COMPACTION_DROP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_COMPACTION_DURATIONS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_COMPACTION_NUM_CORRUPT_KEYS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_COMPACTION_REASON_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_LOCATE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_LOCATE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_FILE_STATUS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_FILE_STATUS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_READ_AMP_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_READ_AMP_FLOW","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_NO_ITERATORS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_WAL_FILE_SYNCED_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_WAL_FILE_SYNCED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_EVENT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_NUM_IMMUTABLE_MEM_TABLE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_LOCATE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_LOCATE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_FLOW","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_GC_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_GC_FLOW","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_GC_FILE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_GC_FILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_GC_ACTION_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_GC_ACTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_FILE_SYNCED_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_FILE_SYNCED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_CACHE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_CACHE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_GET_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_WRITE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_COMPACTION_TIME_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_TABLE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_COMPACTION_OUTFILE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_MANIFEST_FILE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_WAL_FILE_SYNC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_STALL_L0_SLOWDOWN_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_STALL_MEMTABLE_COMPACTION_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_STALL_L0_NUM_FILES_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_HARD_RATE_LIMIT_DELAY_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_SOFT_RATE_LIMIT_DELAY_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_NUM_FILES_IN_SINGLE_COMPACTION_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_SEEK_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_WRITE_STALL_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_SST_READ_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_NUM_SUBCOMPACTION_SCHEDULED_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BYTES_PER_READ_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BYTES_PER_WRITE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BYTES_COMPRESSED_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BYTES_DECOMPRESSED_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_COMPRESSION_TIMES_NANOS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_DECOMPRESSION_TIMES_NANOS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_WRITE_WAL_TIME_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_KEY_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_VALUE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_GET_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_SEEK_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_NEXT_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_PREV_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_FILE_WRITE_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_FILE_READ_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_FILE_SYNC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_BLOB_GC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_GC_INPUT_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_GC_OUTPUT_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_ENGINE_ITER_TOUCH_BLOB_FILE_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TickerName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TickerEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EngineTickerMetricsDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EngineTickerMetrics2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EngineTickerMetrics2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimpleEngineTickerMetricsDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksEventListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlobRunMode","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for WrappedEncryptionKeyManager&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["engine_test"] = [{"text":"impl UnwindSafe for DBOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CryptoOptions","synthetic":true,"types":[]}];
implementors["engine_traits"] = [{"text":"impl UnwindSafe for FileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexHandles","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SstPartitionerRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SstPartitionerContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccProperties","synthetic":true,"types":[]},{"text":"impl&lt;K, R&gt; UnwindSafe for Engines&lt;K, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IterOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CacheStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteStrategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SstCompressionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptionMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SstPartitionerResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SeekMode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Range&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, R&gt; !UnwindSafe for MetricsFlusher&lt;K, R&gt;","synthetic":true,"types":[]}];
implementors["error_code"] = [{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ALL_ERROR_CODES","synthetic":true,"types":[]}];
implementors["external_storage"] = [{"text":"impl UnwindSafe for LocalStorage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoopStorage","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for S3Storage","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GCSStorage","synthetic":true,"types":[]},{"text":"impl&lt;'client&gt; !UnwindSafe for S3Uploader&lt;'client&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RequestError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for AsyncReadAsSyncStreamOfBytes&lt;R&gt;","synthetic":true,"types":[]}];
implementors["fail"] = [{"text":"impl&lt;'a&gt; UnwindSafe for FailScenario&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl UnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !UnwindSafe for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !UnwindSafe for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["farmhash"] = [{"text":"impl UnwindSafe for FarmHasher","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl UnwindSafe for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GzBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GzHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Decompress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecompressError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushCompress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushDecompress","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl UnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["fs2"] = [{"text":"impl UnwindSafe for FsStats","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; UnwindSafe for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; UnwindSafe for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; UnwindSafe for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; UnwindSafe for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; UnwindSafe for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; UnwindSafe for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; UnwindSafe for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; UnwindSafe for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; UnwindSafe for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for JoinAll&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SelectAll&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SelectOk&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for Shared&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SharedItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; UnwindSafe for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; UnwindSafe for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; UnwindSafe for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; UnwindSafe for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; UnwindSafe for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; UnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; UnwindSafe for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Buffered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for BufferUnordered&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for SplitSink&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; UnwindSafe for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for FuturesUnordered&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !UnwindSafe for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; UnwindSafe for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; UnwindSafe for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; UnwindSafe for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; UnwindSafe for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Spawn&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for NotifyHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AtomicTask","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnparkEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BiLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for BiLockGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BiLockAcquire&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BiLockAcquired&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !UnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !UnwindSafe for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for Execute&lt;F&gt;","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; UnwindSafe for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalSpawner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPoolBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl UnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_timer"] = [{"text":"impl !UnwindSafe for Delay","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; UnwindSafe for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; UnwindSafe for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for Remote&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for RemoteHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; UnwindSafe for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; UnwindSafe for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; UnwindSafe for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; UnwindSafe for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; UnwindSafe for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; UnwindSafe for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; UnwindSafe for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; UnwindSafe for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; UnwindSafe for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; UnwindSafe for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; UnwindSafe for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; UnwindSafe for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; UnwindSafe for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for Abortable&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AbortHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AbortRegistration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; UnwindSafe for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; UnwindSafe for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; UnwindSafe for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for Next&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for Peek&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; UnwindSafe for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for SelectNextSome&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; UnwindSafe for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; UnwindSafe for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !UnwindSafe for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; !UnwindSafe for ReuniteError&lt;T, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; !UnwindSafe for SplitSink&lt;S, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; UnwindSafe for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; UnwindSafe for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; UnwindSafe for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; !UnwindSafe for TryNext&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; UnwindSafe for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; UnwindSafe for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; UnwindSafe for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !UnwindSafe for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; UnwindSafe for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; UnwindSafe for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; UnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !UnwindSafe for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !UnwindSafe for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !UnwindSafe for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Close&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; UnwindSafe for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Flush&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; UnwindSafe for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; UnwindSafe for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, Item&gt; !UnwindSafe for Send&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si, St&gt; !UnwindSafe for SendAll&lt;'a, Si, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; UnwindSafe for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; UnwindSafe for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; UnwindSafe for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ex&gt; UnwindSafe for Executor01As03&lt;Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Compat01As03&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, SinkItem&gt; !UnwindSafe for Compat01As03Sink&lt;S, SinkItem&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Compat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; UnwindSafe for CompatSink&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Close&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W&gt; !UnwindSafe for Copy&lt;'a, R, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W&gt; !UnwindSafe for CopyBuf&lt;'a, R, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Flush&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; UnwindSafe for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for Read&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadVectored&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadExact&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadLine&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadToEnd&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadToString&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReadUntil&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; !UnwindSafe for Seek&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Write&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for WriteVectored&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for WriteAll&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; !UnwindSafe for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["fuzz"] = [{"text":"impl UnwindSafe for WORKSPACE_ROOT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FUZZ_ROOT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FUZZ_TARGETS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SEED_ROOT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fuzzer","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl UnwindSafe for FxHasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FxHasher64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FxHasher32","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["grpcio"] = [{"text":"impl UnwindSafe for CallOption","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ClientCStreamReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Resp&gt; !UnwindSafe for ClientDuplexReceiver&lt;Resp&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Resp&gt; !UnwindSafe for ClientSStreamReceiver&lt;Resp&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ClientUnaryReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Req&gt; !UnwindSafe for StreamingCallSink&lt;Req&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ClientStreamingSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ClientStreamingSinkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Deadline","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for DuplexSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DuplexSinkFailure","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for RequestStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RpcContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ServerStreamingSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ServerStreamingSinkFailure","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnarySink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnarySinkResult","synthetic":true,"types":[]},{"text":"impl&lt;Req, Resp&gt; UnwindSafe for Method&lt;Req, Resp&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpcStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpcStatusCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteFlags","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Channel","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ChannelBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthContext","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for AuthProperty&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for AuthPropertyIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Marshaller&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnvBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Environment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MetadataIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResourceQuota","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChannelCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChannelCredentialsBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerCredentialsBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Server","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ServerBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ServiceBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ShutdownFuture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LbPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OptTarget","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CertificateRequestType","synthetic":true,"types":[]}];
implementors["grpcio_sys"] = [{"text":"impl UnwindSafe for grpc_compression_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_compression_options_grpc_compression_options_default_level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_compression_options_grpc_compression_options_default_algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_slice_refcount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_slice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_slice_grpc_slice_data_grpc_slice_refcounted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_slice_grpc_slice_data_grpc_slice_inlined","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_slice_buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gpr_timespec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gpr_event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gpr_refcount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gpr_stats_counter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_byte_buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_byte_buffer_grpc_byte_buffer_data__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_byte_buffer_grpc_byte_buffer_data_grpc_compressed_buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_completion_queue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_alarm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_channel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_server","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_call","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_socket_mutator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_socket_factory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_arg_pointer_vtable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_arg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_arg_grpc_arg_value_grpc_arg_pointer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_channel_args","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_metadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_metadata__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_metadata_array","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_call_details","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op_grpc_op_data__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op_grpc_op_data_grpc_op_send_initial_metadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op_grpc_op_data_grpc_op_send_initial_metadata_grpc_op_send_initial_metadata_maybe_compression_level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op_grpc_op_data_grpc_op_send_message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op_grpc_op_data_grpc_op_send_status_from_server","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op_grpc_op_data_grpc_op_recv_initial_metadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op_grpc_op_data_grpc_op_recv_message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op_grpc_op_data_grpc_op_recv_status_on_client","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op_grpc_op_data_grpc_op_recv_close_on_server","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_channel_info","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_resource_quota","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_experimental_completion_queue_functor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_completion_queue_attributes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_completion_queue_factory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for census_context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_auth_context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_auth_property_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_auth_property","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_ssl_session_cache","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_channel_credentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_ssl_pem_key_cert_pair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for verify_peer_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_ssl_verify_peer_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_call_credentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_sts_credentials_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_auth_metadata_context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_metadata_credentials_plugin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_server_credentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_ssl_server_certificate_config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_ssl_server_credentials_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_auth_metadata_processor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_alts_credentials_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_tls_error_details","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_tls_key_materials_config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_tls_credential_reload_config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_tls_server_authorization_check_config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_tls_credentials_options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_tls_credential_reload_arg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_tls_server_authorization_check_arg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gpr_log_func_args","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_byte_buffer_reader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpcwrap_batch_context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpcwrap_batch_context__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpcwrap_batch_context__bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpcwrap_request_call_context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_slice_grpc_slice_data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_byte_buffer_grpc_byte_buffer_data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_arg_grpc_arg_value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op_grpc_op_data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_byte_buffer_reader_grpc_byte_buffer_reader_current","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_compression_algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_compression_level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gpr_clock_type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_slice_ref_whom","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_byte_buffer_type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_arg_type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_call_error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_completion_type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_op_type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_cq_polling_type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_cq_completion_type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_connectivity_state","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_server_register_method_payload_handling","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_ssl_roots_override_result","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_ssl_certificate_config_reload_status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_ssl_client_certificate_request_type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_security_level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_tls_server_verification_option","synthetic":true,"types":[]},{"text":"impl UnwindSafe for grpc_local_connect_type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gpr_log_severity","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reason","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlowControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ping","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PingPong","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pong","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvStream","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for SendStream&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ReadySendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&nbsp;=&nbsp;Bytes&gt; !UnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PushPromise","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PushPromises","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; UnwindSafe for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !UnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for SendResponse&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for SendPushedResponse&lt;B&gt;","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl UnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; UnwindSafe for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for ValueDrain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for ValueIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Values&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for ValuesMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeaderName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeaderValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ToStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Request&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Authority","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scheme","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uri","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidUri","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T&gt; !UnwindSafe for Data&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Trailers&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl UnwindSafe for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; !UnwindSafe for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; !UnwindSafe for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl !UnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B&nbsp;=&nbsp;Body&gt; !UnwindSafe for Client&lt;C, B&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !UnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpInfo","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Connected","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Name","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GaiResolver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GaiAddrs","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GaiFuture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidNameError","synthetic":true,"types":[]},{"text":"impl&lt;C, B, T&gt; !UnwindSafe for Connect&lt;C, B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; UnwindSafe for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for Builder&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AddrIncoming","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AddrStream","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Http&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F, E&gt; UnwindSafe for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, E&nbsp;=&nbsp;Exec&gt; !UnwindSafe for Connection&lt;T, S, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Parts&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Upgraded","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_openssl"] = [{"text":"impl&lt;T&gt; !UnwindSafe for HttpsConnector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T&gt; !UnwindSafe for HttpsConnecting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ident_case"] = [{"text":"impl UnwindSafe for RenameRule","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;T, S&gt; UnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; UnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; UnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]}];
implementors["inferno"] = [{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Folder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Folder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Folder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Folder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Folder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FuncFrameAttrsMap","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Options&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PaletteMap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SearchColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackgroundColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Palette","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BasicPalette","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultiPalette","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl UnwindSafe for IoVec","synthetic":true,"types":[]}];
implementors["ipnetwork"] = [{"text":"impl UnwindSafe for Ipv4Network","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6Network","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpNetworkError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpNetwork","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetworkSize","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; UnwindSafe for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; UnwindSafe for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; UnwindSafe for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; UnwindSafe for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !UnwindSafe for TakeWhileRef&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; UnwindSafe for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for IntoChunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; UnwindSafe for GroupBy&lt;K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !UnwindSafe for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !UnwindSafe for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; UnwindSafe for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !UnwindSafe for PeekingTakeWhile&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; !UnwindSafe for ProcessResults&lt;'a, I, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; UnwindSafe for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["keys"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WrongPrefix","synthetic":true,"types":[]}];
implementors["kvproto"] = [{"text":"impl UnwindSafe for EncryptionMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileDictionary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyDictionary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MasterKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MasterKeyPlaintext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MasterKeyFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MasterKeyKms","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptedContent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MasterKey_oneof_backend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptionMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrewriteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrewriteResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IngestSstRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IngestSstResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadIndexRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadIndexResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangePeerRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangePeerResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangePeerV2Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangePeerV2Response","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SplitRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SplitResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchSplitRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchSplitResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactLogRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactLogResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransferLeaderRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransferLeaderResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ComputeHashRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerifyHashRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerifyHashResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrepareMergeRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrepareMergeResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommitMergeRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommitMergeResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RollbackMergeRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RollbackMergeResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdminRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdminResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionLeaderRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionLeaderResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionDetailRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionDetailResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftRequestHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftResponseHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftCmdRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftCmdResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmdType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdminCmdType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusCmdType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Global","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetAllRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetAllResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigKind_oneof_kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DuplicateRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compatibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TxnInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TxnStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventRow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventEntries","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventAdmin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventLongTxn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangeDataEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolvedTs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangeDataRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangeDataRequestRegister","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangeDataRequestNotifyTxnStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event_oneof_event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventRowOpType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventLogType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangeDataRequest_oneof_request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PdClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SwitchModeRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SwitchModeResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SstMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RewriteRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IngestRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IngestResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DownloadRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DownloadResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetDownloadSpeedLimitRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetDownloadSpeedLimitResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteBatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PairOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SwitchMode","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ImportSstClient","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BackupClient","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ImportKvClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftTruncatedState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotCfFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotChunk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Done","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftSnapshotData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftLocalState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftApplyState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergeState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionLocalState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtraMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeerState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtraMessageType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cluster","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreLabel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Store","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionEpoch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Region","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Peer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeerRole","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SearchLogRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SearchLogResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerInfoRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerInfoPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerInfoItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerInfoResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SearchLogRequestTarget","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerInfoType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpanSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Root","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Link","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Link_oneof_link","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotLeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreNotMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionNotFound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyNotInRegion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpochNotMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerIsBusy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StaleCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftEntryTooLarge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxTimestampNotSynced","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandRequestHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandRequestBatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandResponseHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandResponseBatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotDone","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchCommandsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchCommandsRequestRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchCommandsResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchCommandsResponseResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchRaftMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchCommandsEmptyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchCommandsEmptyResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchCommandsRequest_Request_oneof_cmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchCommandsResponse_Response_oneof_cmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrewriteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrewriteResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PessimisticLockRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PessimisticLockResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PessimisticRollbackRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PessimisticRollbackResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TxnHeartBeatRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TxnHeartBeatResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckTxnStatusRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckTxnStatusResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckSecondaryLocksRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckSecondaryLocksResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommitRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommitResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CleanupRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CleanupResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchGetRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchGetResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchRollbackRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchRollbackResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanLockRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanLockResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolveLockRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolveLockResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawGetRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawGetResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawBatchGetRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawBatchGetResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawPutRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawPutResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawBatchPutRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawBatchPutResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawDeleteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawDeleteResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawBatchDeleteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawBatchDeleteResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawScanRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawScanResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawDeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawDeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawBatchScanRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawBatchScanResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsafeDestroyRangeRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsafeDestroyRangeResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegisterLockObserverRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegisterLockObserverResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckLockObserverRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckLockObserverResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoveLockObserverRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoveLockObserverResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PhysicalScanLockRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PhysicalScanLockResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SplitRegionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SplitRegionResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadIndexRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadIndexResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerMutation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerKvPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerGetRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerGetResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerBatchGetRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerBatchGetResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerMutRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerMutResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerBatchMutRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerBatchMutResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerScanRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerScanResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerDeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerDeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccGetByKeyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccGetByKeyResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccGetByStartTsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccGetByStartTsResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LockInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteConflict","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlreadyExist","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Deadlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommitTsExpired","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TxnNotFound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommitTsTooLarge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HandleTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanDetail","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanDetailV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecDetails","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KvPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mutation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccWrite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TxnInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandPri","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsolationLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Op","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Action","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtraOp","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DeadlockClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftLogRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftLogResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionInfoRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionInfoResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionSizeRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionSizeResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionSizeResponseEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanMvccRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanMvccResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InjectFailPointRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InjectFailPointResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecoverFailPointRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecoverFailPointResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListFailPointsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListFailPointsResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListFailPointsResponseEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetMetricsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetMetricsResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionConsistencyCheckRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionConsistencyCheckResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModifyTikvConfigRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModifyTikvConfigResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Property","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetRegionPropertiesRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetRegionPropertiesResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetStoreInfoRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetStoreInfoResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetClusterInfoRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetClusterInfoResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Db","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EngineClient","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ChangeDataClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DrAutoSync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionReplicationStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DrAutoSyncState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionReplicationState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackupMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Schema","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClusterIdError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackupRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageBackend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Noop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gcs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackupResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error_oneof_detail","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageBackend_oneof_backend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DiagnosticsClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TsoRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TsoResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BootstrapRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BootstrapResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsBootstrappedRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsBootstrappedResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllocIdRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllocIdResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetStoreRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetStoreResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutStoreRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutStoreResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetAllStoresRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetAllStoresResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetRegionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetRegionResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetRegionByIdRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanRegionsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Region","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanRegionsResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetClusterConfigRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetClusterConfigResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutClusterConfigRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutClusterConfigResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetMembersRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetMembersResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeerStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionHeartbeatRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangePeer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangePeerV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransferLeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Merge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SplitRegion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionHeartbeatResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AskSplitRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AskSplitResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReportSplitRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReportSplitResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AskBatchSplitRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SplitId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AskBatchSplitResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReportBatchSplitRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReportBatchSplitResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeInterval","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecordPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreHeartbeatRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreHeartbeatResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScatterRegionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScatterRegionResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateServiceGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateServiceGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionStat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyncRegionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyncRegionResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetOperatorRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetOperatorResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyncMaxTsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyncMaxTsResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OperatorStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SwitchModeRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SwitchModeResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenEngineRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenEngineResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteHead","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mutation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteBatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteEngineRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KvPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteEngineV3Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteEngineResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloseEngineRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloseEngineResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportEngineRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportEngineResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CleanupEngineRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CleanupEngineResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactClusterRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactClusterResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetVersionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetVersionResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetMetricsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetMetricsResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorEngineNotFound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MutationOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteEngineRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TikvClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitForEntriesRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitForEntriesResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitForEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeadlockRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeadlockResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeadlockRequestType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DebugClient","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ConfigClient","synthetic":true,"types":[]}];
implementors["libflate"] = [{"text":"impl&lt;R&gt; !UnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; UnwindSafe for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for Finish&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AutoFinish&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AutoFinishUnchecked&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeaderBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtraField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtraSubField","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; UnwindSafe for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for MultiDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Os","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; UnwindSafe for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lz77WindowSize","synthetic":true,"types":[]}];
implementors["libflate_lz77"] = [{"text":"impl UnwindSafe for DefaultLz77Encoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultLz77EncoderBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoCompressionLz77Encoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Code","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionLevel","synthetic":true,"types":[]}];
implementors["librocksdb_sys"] = [{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloudEnvOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBInstance","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBWriteOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBReadOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBMergeOperator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBBlockBasedTableOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBMemoryAllocator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBLRUCacheOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBCache","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBFilterPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBSnapshot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBCFHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBWriteBatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBComparator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBFlushOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBCompactionFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBCompactionFilterFactory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBCompactionFilterContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnvOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SstFileReader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SstFileWriter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBBackupEngine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBRestoreOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBSliceTransform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBRateLimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBLogger","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBCompactOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBFifoCompactionOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBPinnableSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBUserCollectedPropertiesIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBTableProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBTablePropertiesCollectionIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBTablePropertiesCollector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBTablePropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBFlushJobInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBCompactionJobInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBIngestionInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBEventListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBKeyVersions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBEnv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBSequentialFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBColumnFamilyMetaData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBLevelMetaData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBSstFileMetaData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBCompactionOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBPerfContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBIOStatsContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBWriteStallInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBStatusPtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBMapProperty","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBFileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBEncryptionKeyManagerInstance","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBSstPartitioner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBSstPartitionerRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBSstPartitionerContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBSstPartitionerFactory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBWriteBatchIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBTitanDBOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBTitanReadOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBTitanBlobIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteStallCondition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBStatisticsTickerType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBStatisticsHistogramType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBEntryType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBCompressionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBCompactionStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBUniversalCompactionStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBRecoveryMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactionPriority","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactionReason","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBInfoLogLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBTableProperty","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBBottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBRateLimiterMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBTitanDBBlobRunMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBBackgroundErrorReason","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBEncryptionMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBValueType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBSstPartitionerResult","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl UnwindSafe for gz_header","synthetic":true,"types":[]},{"text":"impl UnwindSafe for z_stream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gzFile_s","synthetic":true,"types":[]},{"text":"impl UnwindSafe for internal_state","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; UnwindSafe for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for Entries&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; UnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for VacantEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]}];
implementors["linked_hash_set"] = [{"text":"impl&lt;T, S&gt; UnwindSafe for LinkedHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; UnwindSafe for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LevelFilter","synthetic":true,"types":[]}];
implementors["log_wrappers"] = [{"text":"impl&lt;T&gt; UnwindSafe for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Value&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyncLoggerBuffer","synthetic":true,"types":[]}];
implementors["match_template"] = [{"text":"impl UnwindSafe for MatchTemplate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchArmIdentFolder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplaceIdentFolder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Substitution","synthetic":true,"types":[]}];
implementors["md5"] = [{"text":"impl UnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl UnwindSafe for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["minitrace"] = [{"text":"impl UnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CrossthreadTrace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpanGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpanSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Link","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TraceSpawned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TraceWrapped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MayTraceRootFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TraceRootFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl !UnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SetReadiness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollOpt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ready","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixReady","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpSocket","synthetic":true,"types":[]}];
implementors["mio_uds"] = [{"text":"impl UnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixDatagram","synthetic":true,"types":[]}];
implementors["native_tls"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for MidHandshakeTlsStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsConnectorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Protocol","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl UnwindSafe for TcpBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpBuilder","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; !UnwindSafe for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SealFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FallocateFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlockArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MntFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MqAttr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenptyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForkptyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PtyMaster","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloneFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CpuSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LioOpcode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LioMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EfdFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MapFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MmapAdvise","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dqblk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaFmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RebootMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Fds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SaFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigAction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigmaskHow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigevNotify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SfdFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlgAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VsockAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsgFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, C&gt; UnwindSafe for SendMmsgData&lt;'a, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for RecvMmsgData&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddressFamily","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InetAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockProtocol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReuseAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReusePort","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Linger","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpAddMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpDropMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendTimeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Broadcast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OobInline","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SocketError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeepAlive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeerCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcvBuf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SndBuf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcvBufForce","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SndBufForce","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptConn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindToDevice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OriginalDst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpTransparent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mark","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PassCred","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpCongestion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpGsoSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpGroSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Statfs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FsType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Statvfs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SysInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Termios","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BaudRate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlowArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeVal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IoVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UtsName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inotify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerSetTimeFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClockId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expiration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for User","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FchownatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathconfVar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SysconfVar","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl UnwindSafe for CompareResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Needed","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for VerboseError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerboseErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I, E, F&gt; UnwindSafe for ParserIterator&lt;I, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Endianness","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; UnwindSafe for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_format"] = [{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CustomFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CustomFormatBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Grouping","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Locale","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DecimalStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for InfinityStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MinusSignStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for NanStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PlusSignStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SeparatorStr&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; UnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; UnwindSafe for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; UnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl UnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; UnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;UnwindSafe&gt; UnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl UnwindSafe for KeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AesKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1GeneralizedTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1GeneralizedTimeRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeDiff","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1TimeRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1String","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1StringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Integer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1IntegerRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1BitString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1BitStringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1ObjectRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsbOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMSOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmsContentInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmsContentInfoRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Conf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Deriver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Dh&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DhRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Dsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DsaRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PointConversionForm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcGroupRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcPointRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EcKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EcKeyRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaSig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaSigRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Seal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorStack","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageDigest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DigestBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspBasicResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspBasicResponseRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertIdRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponseRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRequestRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspOneReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspOneReqRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyIvPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PKeyRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Params","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Private","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Padding","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RsaRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Signer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Verifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProtectionProfile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProtectionProfileRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAcceptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslConnector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtensionContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslFiletype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NameType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SniError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAlert","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlpnError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CipherBits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslCipher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslCipherRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSession","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSessionRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ssl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for MidHandshakeSslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShutdownResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for StackRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpensslString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpensslStringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cipher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crypter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Ref","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Extension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ExtensionRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Name","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameEntryRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Req","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ReqRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GeneralName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GeneralNameRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509AlgorithmRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyParamRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BasicConstraints","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyUsage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreBuilderRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Store","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreRef","synthetic":true,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl UnwindSafe for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl UnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl UnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; UnwindSafe for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl UnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl UnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["pd_client"] = [{"text":"impl UnwindSafe for DummyPdClient","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RpcClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionStat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClusterVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PD_REQUEST_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PD_HEARTBEAT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PD_VALIDATE_PEER_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_SIZE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REGION_READ_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REGION_READ_BYTES_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REGION_WRITTEN_BYTES_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REGION_WRITTEN_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for HeartbeatReceiver","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LeaderClient","synthetic":true,"types":[]},{"text":"impl&lt;Req, F&gt; !UnwindSafe for Request&lt;Req, F&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl UnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["pnet_base"] = [{"text":"impl UnwindSafe for MacAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseMacAddrErr","synthetic":true,"types":[]}];
implementors["pnet_datalink"] = [{"text":"impl UnwindSafe for FanoutOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetworkInterface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChannelType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Channel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FanoutType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Config","synthetic":true,"types":[]}];
implementors["pnet_sys"] = [{"text":"impl UnwindSafe for FileDesc","synthetic":true,"types":[]}];
implementors["pprof"] = [{"text":"impl UnwindSafe for Frames","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ProfilerGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Report","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ReportBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Profile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sample","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mapping","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Line","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Function","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl UnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]}];
implementors["procfs"] = [{"text":"impl UnwindSafe for Meminfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CpuInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGroupController","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProcessCgroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PressureRecord","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CpuPressure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryPressure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IoPressure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiskStat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoadAverage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CpuTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KernelStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KernelModule","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ProcError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigSetting","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NFSServerCaps","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MountInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MountStat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MountNFSStatistics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NFSEventCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NFSByteCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NFSOperationStat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoredumpFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FDPermissions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Io","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryMap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FDInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Process","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LimitValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MountOptFields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProcState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MMapPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FDTarget","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpNetEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpNetEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixNetEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DropCache","synthetic":true,"types":[]}];
implementors["procinfo"] = [{"text":"impl UnwindSafe for LoadAvg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Io","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mountinfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Statm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cpu","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SeccompMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceStatus","synthetic":true,"types":[]}];
implementors["prometheus"] = [{"text":"impl UnwindSafe for ProtobufEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Histogram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HistogramOpts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HistogramTimer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Opts","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LabelPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gauge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Counter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Quantile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Summary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Untyped","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Histogram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bucket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Metric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricFamily","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtomicF64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtomicI64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtomicU64","synthetic":true,"types":[]},{"text":"impl&lt;T, V, D&gt; UnwindSafe for AFLocalCounter&lt;T, V, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; UnwindSafe for AFLocalHistogram&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for GenericCounter&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for GenericLocalCounter&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Atomic&gt;::T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !UnwindSafe for GenericLocalCounterVec&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Desc","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for GenericGauge&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalHistogram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalHistogramTimer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalHistogramVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for MetricVec&lt;T&gt;","synthetic":true,"types":[]}];
implementors["prost"] = [{"text":"impl UnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncodeError","synthetic":true,"types":[]}];
implementors["protobuf"] = [{"text":"impl UnwindSafe for CachedSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RepeatedField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SingularField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SingularPtrField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CodedInputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CodedOutputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnknownFields","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; UnwindSafe for UnknownFieldsIter&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnknownValues","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; UnwindSafe for UnknownValuesIter&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnknownValue","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; UnwindSafe for UnknownValueRef&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WireType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileDescriptorSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileDescriptorProto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptorProto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptorProto_ExtensionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptorProto_ReservedRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldDescriptorProto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OneofDescriptorProto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnumDescriptorProto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnumValueDescriptorProto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServiceDescriptorProto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodDescriptorProto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OneofOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnumOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnumValueOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServiceOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UninterpretedOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UninterpretedOption_NamePart","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourceCodeInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourceCodeInfo_Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GeneratedCodeInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GeneratedCodeInfo_Annotation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldDescriptorProto_Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldDescriptorProto_Label","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileOptions_OptimizeMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldOptions_CType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldOptions_JSType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CodeGeneratorRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CodeGeneratorResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CodeGeneratorResponse_File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WireError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ProtobufError","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; UnwindSafe for ExtFieldOptional&lt;M, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; UnwindSafe for ExtFieldRepeated&lt;M, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Lazy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FieldDescriptor","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MessageDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnumValueDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnumDescriptor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ProtobufValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ReflectFieldRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeDouble","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeInt32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeInt64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeUint32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeUint64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeSint32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeSint64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeFixed32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeFixed64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeSfixed32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeSfixed64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtobufTypeChars","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for ProtobufTypeEnum&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; UnwindSafe for ProtobufTypeMessage&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Api","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mixin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourceContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnumValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Option","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DoubleValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Int64Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UInt64Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Int32Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UInt32Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoolValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BytesValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value_oneof_kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NullValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field_Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field_Cardinality","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Syntax","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; UnwindSafe for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quick_xml"] = [{"text":"impl&lt;B&gt; UnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BytesStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BytesDecl&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BytesEnd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BytesText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["raft"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Changer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unstable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Raft&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SoftState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RaftLog&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inflights","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgressTracker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadState","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Status&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StorageError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StateRole","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgressState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadOnlyOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Peer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ready","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RawNode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemStorageCore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemStorage","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Union&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["raft_engine"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;E, W&gt; UnwindSafe for LogBatch&lt;E, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CacheStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecoveryMode","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["raft_log_engine"] = [{"text":"impl UnwindSafe for RaftLogBatch","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RaftLogEngine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntryExtTyped","synthetic":true,"types":[]}];
implementors["raft_proto"] = [{"text":"impl UnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Snapshot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HardState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfChange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfChangeSingle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfChangeV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntryType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfChangeTransition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfChangeType","synthetic":true,"types":[]}];
implementors["raftstore"] = [{"text":"impl&lt;E&gt; UnwindSafe for Raw&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HalfCheckObserver","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; !UnwindSafe for Host&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; UnwindSafe for KeysCheckObserver&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; UnwindSafe for SizeCheckObserver&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableCheckObserver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ObserverContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmdBatch","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionChangeEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SplitCheckConfigManager","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConsistencyCheckMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Entry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BoxAdminObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for WrappedAdminObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BoxQueryObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for WrappedQueryObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BoxApplySnapshotObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for WrappedApplySnapshotObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for BoxSplitCheckObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; UnwindSafe for WrappedSplitCheckObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BoxRoleObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for WrappedRoleObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BoxRegionChangeObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for WrappedRegionChangeObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for BoxCmdObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; UnwindSafe for WrappedCmdObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for BoxConsistencyCheckObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; UnwindSafe for WrappedConsistencyCheckObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for Registry&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for CoprocessorHost&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REGION_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REGION_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REGION_COUNT_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionEventListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionCollector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionInfoAccessor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftStoreEvent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RegionInfoQuery","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Checker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Checker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Checker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Checker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SplitObserver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiscardReason","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftStoreBlackHole","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; UnwindSafe for ServerRaftStoreRouter&lt;EK, ER&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EK: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;EK as KvEngine&gt;::Snapshot: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactionGuardGeneratorFactory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DestroyPeerJob","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !UnwindSafe for Peer&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeerStat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProposalContext","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !UnwindSafe for PeerStorage&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for RegionIterator&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Iterable&gt;::Iterator: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for RegionSnapshot&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalReplicationState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreGroup","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !UnwindSafe for ApplyOptions&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapManager","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapManagerBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotStatistics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AutoSplitController","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlowStatistics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadDelegate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SplitConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SplitConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; UnwindSafe for LocalReader&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as KvEngine&gt;::Snapshot: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, S&gt; !UnwindSafe for Runner&lt;E, S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestPolicy","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SnapState","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapEntry","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for Task&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Task&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONFIG_RAFTSTORE_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftstoreConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !UnwindSafe for PeerFsm&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for PendingCmd&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for PendingCmdQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangePeer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecContext","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !UnwindSafe for ApplyCallback&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !UnwindSafe for ApplyContext&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitSourceMergeState","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !UnwindSafe for YieldState&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewSplitPeer","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !UnwindSafe for ApplyDelegate&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Apply&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Proposal&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Destroy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CatchUpLogs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenSnapTask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObserveID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObserveCmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ApplyMetrics","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for ApplyRes&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !UnwindSafe for ApplyFsm&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlMsg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlFsm","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !UnwindSafe for ApplyPoller&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !UnwindSafe for Builder&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; UnwindSafe for ApplyRouter&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !UnwindSafe for ApplyBatchSystem&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for ExecResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for ApplyResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangeCmd","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !UnwindSafe for Msg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for TaskRes&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for APPLY_PROPOSAL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreStat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalStoreStat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalStoreStat","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for BatchRaftCmdRequestBuilder&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, EK, ER, T, C&gt; !UnwindSafe for PeerFsmDelegate&lt;'a, EK, ER, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StoreInfo&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreMeta","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; UnwindSafe for RaftRouter&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PeerTickBatch","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T, C&gt; !UnwindSafe for PollContext&lt;EK, ER, T, C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Store","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; UnwindSafe for StoreFsm&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, EK, ER, T, C&gt; !UnwindSafe for StoreFsmDelegate&lt;'a, EK, ER, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T, C&gt; !UnwindSafe for RaftPoller&lt;EK, ER, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T, C&gt; !UnwindSafe for RaftPollerBuilder&lt;EK, ER, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !UnwindSafe for Workers&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !UnwindSafe for RaftBatchSystem&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckMsgStatus","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for ReadResponse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeerTicks","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for RaftCommand&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Callback&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreTick","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergeResultKind","synthetic":true,"types":[]},{"text":"impl&lt;SK&gt; !UnwindSafe for SignificantMsg&lt;SK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !UnwindSafe for CasualMessage&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !UnwindSafe for PeerMsg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !UnwindSafe for StoreMsg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdminCmdEpochState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ADMIN_CMD_EPOCH_MAP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lease","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoteLease","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for KeysInfoFormatter&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfContextStatistics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeaseState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfChangeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COMPACTION_GUARD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactionGuardGenerator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftReadyMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftMessageMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftMessageDropMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftProposeMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftInvalidProposeMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PEER_PROPOSAL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PEER_PROPOSAL_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PEER_ADMIN_CMD_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PEER_ADMIN_CMD_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PEER_APPEND_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PEER_COMMIT_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_APPLY_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for APPLY_TASK_WAIT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_RAFT_READY_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_RAFT_READY_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_RAFT_SENT_MESSAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_RAFT_SENT_MESSAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_RAFT_DROPPED_MESSAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_RAFT_DROPPED_MESSAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_SNAPSHOT_TRAFFIC_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_SNAPSHOT_VALIDATION_FAILURE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_SNAPSHOT_VALIDATION_FAILURE_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PEER_RAFT_PROCESS_DURATION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PEER_PROPOSE_LOG_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REGION_HASH_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REGION_HASH_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REGION_MAX_LOG_LAG","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REQUEST_WAIT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PEER_GC_RAFT_LOG_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UPDATE_REGION_SIZE_BY_COMPACTION_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COMPACTION_RELATED_REGION_COUNT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COMPACTION_DECLINED_BYTES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAPSHOT_CF_KV_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAPSHOT_CF_KV_COUNT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAPSHOT_CF_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAPSHOT_CF_SIZE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAPSHOT_BUILD_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAPSHOT_KV_COUNT_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAPSHOT_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_ENTRY_FETCHES_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_ENTRY_FETCHES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LEADER_MISSING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for INGEST_SST_DURATION_SECONDS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_INVALID_PROPOSAL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_INVALID_PROPOSAL_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_EVENT_DURATION_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_EVENT_DURATION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_READ_INDEX_PENDING_DURATION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_READ_INDEX_PENDING_COUNT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for APPLY_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for APPLY_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STORE_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for READ_QPS_TOPN","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_ENTRIES_CACHES_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for APPLY_PENDING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for APPLY_PENDING_ENTRIES_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfContextType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProposalType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdminCmdType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdminCmdStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftReadyType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageCounterType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftDroppedMessage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapValidationType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionHashType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionHashResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CfNames","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftEntryType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftInvalidProposal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftEventDurationType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftEventDurationInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftEventDurationDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftEventDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftInvalidProposalCountInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftInvalidProposalCountDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftInvalidProposalCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftEntryFetchesInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftEntryFetchesDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftEntryFetches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapCfInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapCfDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapCf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapCfSizeInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapCfSizeDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapCfSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionHashCounterInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionHashCounterDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionHashCounter2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionHashCounter2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionHashCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProposalVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProposalVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProposalVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdminCmdVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdminCmdVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdminCmdVec2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdminCmdVec2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdminCmdVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftReadyVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftReadyVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftReadyVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftDropedVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftDropedVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftDropedVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapValidVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapValidVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapValidVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfContextTimeDurationInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfContextTimeDurationDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfContextTimeDuration","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for ProposalQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConsistencyState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckTickResult","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for ProposedAdminCmd&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for CmdEpochChecker&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StaleState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntryCache","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ApplySnapResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvokeContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckApplyingSnapStatus","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for ReadIndexRequest&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for ReadIndexQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CfFileForRecving","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CfFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaFile","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Snap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ApplyAbortChecker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapManagerCore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuildStatistics","synthetic":true,"types":[]},{"text":"impl&lt;E, C, S&gt; UnwindSafe for Runner&lt;E, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;EK, C, S&gt; UnwindSafe for Runner&lt;EK, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;EK: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Runner&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;EK, C&gt; !UnwindSafe for Runner&lt;EK, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Task&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAP_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAP_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CHECK_SPILT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CHECK_SPILT_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAP_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CHECK_SPILT_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COMPACT_RANGE_CF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REGION_HASH_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STALE_PEER_PENDING_DELETE_RANGE_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LOCAL_READ_REJECT_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LOCAL_READ_REJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LOCAL_READ_EXECUTED_REQUESTS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LOCAL_READ_EXECUTED_CACHE_REQUESTS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RejectReason","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapCounterInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapCounterDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapCounter2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapCounter2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckSplitCounterInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckSplitCounterDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckSplitCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapHistogramInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapHistogramDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapHistogram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadRejectCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreStat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeerStat","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for StatsMonitor&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !UnwindSafe for Runner&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, R&gt; !UnwindSafe for Runner&lt;EK, ER, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'r, 'm&gt; !UnwindSafe for Inspector&lt;'r, 'm&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StalePeerInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PendingDeleteRanges","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, R&gt; !UnwindSafe for SnapContext&lt;EK, ER, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, R&gt; !UnwindSafe for Runner&lt;EK, ER, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MergedIterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SplitInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sample","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Recorder","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl UnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; UnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; UnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; UnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl UnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_hc"] = [{"text":"impl UnwindSafe for Hc128Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hc128Core","synthetic":true,"types":[]}];
implementors["rand_isaac"] = [{"text":"impl UnwindSafe for IsaacRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsaacCore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Isaac64Core","synthetic":true,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl UnwindSafe for JitterRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerError","synthetic":true,"types":[]}];
implementors["rand_os"] = [{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl UnwindSafe for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl UnwindSafe for XorShiftRng","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; UnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; UnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; UnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; UnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; UnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; UnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; !UnwindSafe for SplitMut&lt;'data, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !UnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !UnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;D&gt; UnwindSafe for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequence","synthetic":true,"types":[]}];
implementors["resolved_ts"] = [{"text":"impl UnwindSafe for Resolver","synthetic":true,"types":[]}];
implementors["rev_lines"] = [{"text":"impl&lt;R&gt; UnwindSafe for RevLines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl UnwindSafe for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nonce","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnboundKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LessSafeKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SealingKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpeningKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unspecified","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyRejected","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Salt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; UnwindSafe for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SystemRandom","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RsaParameters","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for UnparsedPublicKey&lt;B&gt;","synthetic":true,"types":[]}];
implementors["rocksdb"] = [{"text":"impl UnwindSafe for CompactionFilterContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactionFilterFactoryHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactionFilterHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactionJobInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushJobInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IngestionInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteStallInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColumnFamilyMetaData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LevelMetaData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SstFileMetaData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IOStatsContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TablePropertiesCollectionView","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserCollectedProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TitanBlobIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TitanDBOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteBatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WriteBatchRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ComparatorCallback","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergeOperatorCallback","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MergeOperands","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MapProperty","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DB","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Snapshot&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for DBIterator&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Range&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBVector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackupEngine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SstFileReader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SstFileWriter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Env","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SequentialFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cache","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryAllocator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HistogramData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockBasedOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RateLimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsafeSnap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactionOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ColumnFamilyDescriptor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnvOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FifoCompactionOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LRUCacheOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SstPartitionerRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SstPartitionerContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TablePropertiesKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserCollectedProperties","synthetic":true,"types":[]}];
implementors["rusoto_core"] = [{"text":"impl&lt;E&gt; UnwindSafe for RusotoError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for EventStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for HttpResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferedHttpResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpDispatchError","synthetic":true,"types":[]},{"text":"impl&lt;C&nbsp;=&nbsp;HttpsConnector&lt;HttpConnector&lt;GaiResolver&gt;&gt;&gt; !UnwindSafe for HttpClient&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsError","synthetic":true,"types":[]}];
implementors["rusoto_credential"] = [{"text":"impl !UnwindSafe for ContainerProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnvironmentProvider","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InstanceMetadataProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProfileProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Secret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StaticProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AwsCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CredentialsError","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !UnwindSafe for AutoRefreshingProvider&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DefaultCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ChainProvider","synthetic":true,"types":[]},{"text":"impl&lt;T, E&nbsp;=&nbsp;CredentialsError&gt; !UnwindSafe for Variable&lt;T, E&gt;","synthetic":true,"types":[]}];
implementors["rusoto_kms"] = [{"text":"impl UnwindSafe for AliasListEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CancelKeyDeletionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CancelKeyDeletionResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateAliasRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateGrantRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateGrantResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateKeyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateKeyResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CustomKeyStoresListEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecryptRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecryptResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteAliasRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteImportedKeyMaterialRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescribeCustomKeyStoresRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescribeCustomKeyStoresResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescribeKeyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescribeKeyResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisableKeyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisableKeyRotationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisconnectCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisconnectCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnableKeyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnableKeyRotationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyPairRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyPairResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyPairWithoutPlaintextRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyPairWithoutPlaintextResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyWithoutPlaintextRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyWithoutPlaintextResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateRandomRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateRandomResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetKeyPolicyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetKeyPolicyResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetKeyRotationStatusRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetKeyRotationStatusResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetParametersForImportRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetParametersForImportResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetPublicKeyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetPublicKeyResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrantConstraints","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrantListEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportKeyMaterialRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportKeyMaterialResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyListEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListAliasesRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListAliasesResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListGrantsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListGrantsResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListKeyPoliciesRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListKeyPoliciesResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListKeysRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListKeysResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListResourceTagsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListResourceTagsResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListRetirableGrantsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutKeyPolicyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReEncryptRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReEncryptResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RetireGrantRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RevokeGrantRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScheduleKeyDeletionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScheduleKeyDeletionResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TagResourceRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UntagResourceRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateAliasRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateKeyDescriptionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerifyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerifyResponse","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for KmsClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CancelKeyDeletionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateAliasError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateGrantError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateKeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecryptError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteAliasError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteImportedKeyMaterialError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescribeCustomKeyStoresError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescribeKeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisableKeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisableKeyRotationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisconnectCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnableKeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnableKeyRotationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyPairError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyPairWithoutPlaintextError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateDataKeyWithoutPlaintextError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenerateRandomError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetKeyPolicyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetKeyRotationStatusError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetParametersForImportError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetPublicKeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportKeyMaterialError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListAliasesError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListGrantsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListKeyPoliciesError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListKeysError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListResourceTagsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListRetirableGrantsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutKeyPolicyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReEncryptError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RetireGrantError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RevokeGrantError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScheduleKeyDeletionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TagResourceError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UntagResourceError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateAliasError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateKeyDescriptionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerifyError","synthetic":true,"types":[]}];
implementors["rusoto_s3"] = [{"text":"impl UnwindSafe for AbortIncompleteMultipartUpload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbortIncompleteMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbortMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbortMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccelerateConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccelerateConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlPolicySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlTranslation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlTranslationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccountIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowQuotedRecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedHeaderSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedHeadersSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedMethodSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedMethodsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedOriginSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllowedOriginsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsAndOperator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsExportDestination","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsExportDestinationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsS3BucketDestination","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyticsS3ExportFileFormatSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BodySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bucket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketAccelerateStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLocationConstraintSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLoggingStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLoggingStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketLogsPermissionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketNameSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BucketVersioningStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CORSConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CORSConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CORSRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CORSRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CORSRulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CSVInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CSVInputSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CSVOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CSVOutputSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloudFunctionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloudFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloudFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloudFunctionInvocationRoleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommentsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommonPrefix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompleteMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompleteMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompletedMultipartUpload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompletedMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompletedPart","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompletedPartSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompletedPartListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Condition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConditionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContinuationEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyObjectOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyObjectResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyPartResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateBucketConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateBucketConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateBucketOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateBucketRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DateSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DaysSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DaysAfterInitiationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultRetention","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultRetentionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delete","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteMarkerEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteMarkerReplication","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteMarkerReplicationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteMarkerReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeletePublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeletedObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DelimiterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Destination","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DestinationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisplayNameSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ETagSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmailAddressSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnableRequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncodingTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Encryption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EndSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EndEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S3Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorDocument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorDocumentSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExistingObjectReplication","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExistingObjectReplicationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExistingObjectReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpirationStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpiredObjectDeleteMarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExposeHeaderSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExposeHeadersSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpressionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FetchOwnerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileHeaderInfoSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterRuleListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterRuleNameSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterRuleValueSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAccelerateConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAclOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAclRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAnalyticsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketCorsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketEncryptionOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketInventoryConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLocationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLocationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLoggingOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketMetricsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyStatusOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyStatusRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketReplicationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketRequestPaymentOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketTaggingOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketVersioningOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketWebsiteOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectAclOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectAclRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GetObjectOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GetObjectTorrentOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectTorrentRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetPublicAccessBlockOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlacierJobParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlacierJobParametersSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Grant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrantSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Grantee","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GranteeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrantsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeadBucketRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeadObjectOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeadObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostNameSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpErrorCodeReturnedEqualsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpRedirectCodeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IDSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexDocument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexDocumentSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Initiator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputSerialization","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryDestination","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryDestinationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryEncryption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryFormatSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryFrequencySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryIncludedObjectVersionsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryOptionalFieldSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryOptionalFieldsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryS3BucketDestination","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventorySchedule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InventoryScheduleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsEnabledSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JSONInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JSONInputSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JSONOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JSONOutputSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JSONTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KMSContextSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyMarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyPrefixEqualsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LambdaFunctionArnSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LambdaFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LambdaFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LambdaFunctionConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleExpiration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleExpirationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRuleAndOperator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRuleFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifecycleRulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketAnalyticsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketAnalyticsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketInventoryConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketInventoryConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketMetricsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketMetricsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListMultipartUploadsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListMultipartUploadsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectVersionsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectVersionsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsV2Output","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsV2Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListPartsOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListPartsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocationPrefixSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoggingEnabled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoggingEnabledSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MFADeleteSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxAgeSecondsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxKeysSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxPartsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxUploadsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataEntrySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataKeySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataValueSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Metrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsAndOperator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricsStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinutesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultipartUpload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultipartUploadIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoncurrentVersionExpiration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoncurrentVersionExpirationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoncurrentVersionTransition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoncurrentVersionTransitionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoncurrentVersionTransitionListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfigurationFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationConfigurationFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotificationIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectCannedACLSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectIdentifierSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectIdentifierListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectKeySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockEnabledSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockLegalHold","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockLegalHoldSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockLegalHoldStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockRetention","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockRetentionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockRetentionModeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectLockRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjectVersionIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputLocationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputSerialization","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Owner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnerOverrideSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParquetInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParquetInputSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Part","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PartNumberSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PartNumberMarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PayerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PermissionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PolicyStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrefixSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrioritySerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgressEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtocolSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicAccessBlockConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PublicAccessBlockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAclRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketNotificationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectAclOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectAclRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectOutput","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PutObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueArnSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuietSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuoteCharacterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuoteEscapeCharacterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuoteFieldsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecordsEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Redirect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RedirectSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RedirectAllRequestsTo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RedirectAllRequestsToSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplaceKeyPrefixWithSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplaceKeyWithSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicaKmsKeyIDSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleAndOperator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRuleStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationRulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationTimeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationTimeStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationTimeValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReplicationTimeValueSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestPaymentConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestPaymentConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestProgress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseCacheControlSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseContentDispositionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseContentEncodingSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseContentLanguageSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseContentTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponseExpiresSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreObjectOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreObjectRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreRequestSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreRequestTypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoutingRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoutingRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoutingRulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S3KeyFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S3KeyFilterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S3Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S3LocationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSEKMS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSEKMSSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSEKMSKeyIdSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSES3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSES3Serializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanRangeSerializer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SelectObjectContentOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectObjectContentRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectObjectContentRequestSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectParametersSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionByDefault","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionByDefaultSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionRuleSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerSideEncryptionRulesSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SettingSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourceSelectionCriteria","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SourceSelectionCriteriaSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SseKmsEncryptedObjects","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SseKmsEncryptedObjectsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SseKmsEncryptedObjectsStatusSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StartSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StartAfterSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatsEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassAnalysis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassAnalysisSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassAnalysisDataExport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassAnalysisDataExportSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClassAnalysisSchemaVersionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SuffixSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TagSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TagSetSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tagging","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TaggingSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetBucketSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetGrant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetGrantSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetGrantsSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetPrefixSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TierSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicArnSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopicConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransitionSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransitionListSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransitionStorageClassSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for URISerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadPartCopyOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadPartCopyRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadPartOutput","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UploadPartRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserMetadataSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersionIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersioningConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersioningConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WebsiteConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WebsiteConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for YearsSerializer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for S3Client","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectObjectContentEventStreamItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbortMultipartUploadError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompleteMultipartUploadError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopyObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateBucketError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreateMultipartUploadError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketCorsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketPolicyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketReplicationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeletePublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAclError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketCorsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLocationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketLoggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketNotificationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketPolicyStatusError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketReplicationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketVersioningError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectAclError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectRetentionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectTorrentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeadBucketError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeadObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketAnalyticsConfigurationsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketInventoryConfigurationsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketMetricsConfigurationsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListBucketsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListMultipartUploadsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectVersionsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListObjectsV2Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListPartsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAclError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketCorsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketLoggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketNotificationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketPolicyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketReplicationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketVersioningError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectAclError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectRetentionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutObjectTaggingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PutPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RestoreObjectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectObjectContentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadPartError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UploadPartCopyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreSignedRequestOption","synthetic":true,"types":[]}];
implementors["rusoto_signature"] = [{"text":"impl UnwindSafe for ParseRegionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Region","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SignedRequest","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SignedRequestPayload","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ByteStream","synthetic":true,"types":[]}];
implementors["rusoto_sts"] = [{"text":"impl !UnwindSafe for StsAssumeRoleSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StsSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StsWebIdentityFederationSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WebIdentityProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssumeRoleRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssumeRoleResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssumeRoleWithSAMLRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssumeRoleWithSAMLResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssumeRoleWithWebIdentityRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssumeRoleWithWebIdentityResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssumedRoleUser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Credentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeAuthorizationMessageRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeAuthorizationMessageResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FederatedUser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetAccessKeyInfoRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetAccessKeyInfoResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetCallerIdentityRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetCallerIdentityResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetFederationTokenRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetFederationTokenResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetSessionTokenRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetSessionTokenResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PolicyDescriptorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StsClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssumeRoleError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssumeRoleWithSAMLError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssumeRoleWithWebIdentityError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeAuthorizationMessageError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetAccessKeyInfoError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetCallerIdentityError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetFederationTokenError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetSessionTokenError","synthetic":true,"types":[]}];
implementors["rusoto_util"] = [{"text":"impl !UnwindSafe for DefaultCredentialsProvider","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CredentialsProvider","synthetic":true,"types":[]}];
implementors["rustyline"] = [{"text":"impl&lt;'h&gt; UnwindSafe for Context&lt;'h&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for Editor&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; !UnwindSafe for Iter&lt;'a, H&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharSearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cmd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Movement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Word","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyPress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilenameCompleter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Quote","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BellStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HistoryDuplicates","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompletionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputStreamType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadlineError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchingBracketHighlighter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HistoryHinter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for History","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LineBuffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WordAction","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; !UnwindSafe for ValidationContext&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchingBracketValidator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValidationResult","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl UnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["security"] = [{"text":"impl UnwindSafe for SecurityConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecurityManager","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fetcher","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersionReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SemVerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersionReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Predicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WildcardVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Op","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl UnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; UnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; UnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_ignored"] = [{"text":"impl&lt;'a, 'b, D, F&gt; !UnwindSafe for Deserializer&lt;'a, 'b, D, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Path&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; UnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; UnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; UnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Serializer","synthetic":true,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl&lt;'de&gt; UnwindSafe for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !UnwindSafe for Serializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !UnwindSafe for SeqSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !UnwindSafe for TupleSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !UnwindSafe for TupleStructSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !UnwindSafe for TupleVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !UnwindSafe for MapSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !UnwindSafe for StructSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !UnwindSafe for StructVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["serde_with"] = [{"text":"impl UnwindSafe for SpaceSeparator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommaSeparator","synthetic":true,"types":[]},{"text":"impl&lt;Sep&gt; UnwindSafe for StringWithSeparator&lt;Sep&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Sep: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl UnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["shlex"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Shlex&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal"] = [{"text":"impl UnwindSafe for Trap","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl UnwindSafe for SigId","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; UnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog"] = [{"text":"impl&lt;D&gt; UnwindSafe for Logger&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Discard","synthetic":true,"types":[]},{"text":"impl&lt;D, F&gt; UnwindSafe for Filter&lt;D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for LevelFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, E&gt; UnwindSafe for MapError&lt;D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D1, D2&gt; UnwindSafe for Duplicate&lt;D1, D2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Fuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for IgnoreResult&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RecordStatic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; UnwindSafe for FnValue&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for PushFnValueSerializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for PushFnValue&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for SingleKV&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for OwnedKV&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for BorrowedKV&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnedKVList","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for MutexDrainError&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Drain&gt;::Err: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterLevel","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["slog_async"] = [{"text":"impl&lt;D&gt; UnwindSafe for AsyncCoreBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AsyncGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsyncCore","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for AsyncBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AsyncError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OverflowStrategy","synthetic":true,"types":[]}];
implementors["slog_json"] = [{"text":"impl&lt;W&gt; UnwindSafe for Json&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for JsonBuilder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog_term"] = [{"text":"impl&lt;D&gt; UnwindSafe for FullFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for FullFormatBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for CompactFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for CompactFormatBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for PlainDecorator&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for PlainRecordDecorator&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for PlainSyncDecorator&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for PlainSyncRecordDecorator&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TermDecoratorBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TermDecorator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TermRecordDecorator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestStdoutWriter","synthetic":true,"types":[]}];
implementors["sst_importer"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IMPORT_RPC_DURATION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IMPORT_UPLOAD_CHUNK_BYTES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IMPORT_UPLOAD_CHUNK_DURATION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IMPORT_WRITE_CHUNK_DURATION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IMPORTER_DOWNLOAD_DURATION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IMPORTER_DOWNLOAD_BYTES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IMPORTER_INGEST_DURATION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IMPORTER_INGEST_BYTES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IMPORTER_ERROR_VEC","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for ImportModeSwitcherInner&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for ImportModeSwitcher&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportModeDBOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportModeCFOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSTImporter","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for SSTWriter&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as SstExt&gt;::SstWriter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportDir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImportFile","synthetic":true,"types":[]}];
implementors["str_stack"] = [{"text":"impl UnwindSafe for StrStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Writer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl UnwindSafe for StrSimError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["syn_mid"] = [{"text":"impl UnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pat","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindStyle","synthetic":true,"types":[]}];
implementors["sysinfo"] = [{"text":"impl UnwindSafe for DiskUsage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoadAvg","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for NetworksIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RefreshKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for User","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Component","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Disk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetworkData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Networks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Process","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Processor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for System","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiskType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProcessStatus","synthetic":true,"types":[]}];
implementors["take_mut"] = [{"text":"impl&lt;'s&gt; !UnwindSafe for Scope&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'm, T, F&gt; !UnwindSafe for Hole&lt;'c, 'm, T, F&gt;","synthetic":true,"types":[]}];
implementors["tame_gcs"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scopes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StandardQueryParameters&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Conditionals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredefinedAcl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Projection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DeleteObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DownloadObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DownloadObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for GetObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GetObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for InsertObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InsertResponse","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Multipart&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ListOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ListResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PatchObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatchObjectResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpStatusError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IoError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for JsonError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ApiErrorInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ApiError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; UnwindSafe for UrlSigner&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SignedUrlOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServiceAccount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DigestAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigningAlgorithm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Key&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BucketName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ObjectName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ObjectId&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tame_oauth"] = [{"text":"impl UnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServiceAccountInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServiceAccountAccess","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestReason","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TokenOrRequest","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl UnwindSafe for TempDir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NamedTempFile","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PathPersistError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PersistError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TempPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; UnwindSafe for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["term"] = [{"text":"impl UnwindSafe for Attr","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TermInfo","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TerminfoTerminal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variables","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Param","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["test_coprocessor"] = [{"text":"impl UnwindSafe for Column","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColumnBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DAGSelect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DAGChunkSpliter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProductTable","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; !UnwindSafe for Insert&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; !UnwindSafe for Delete&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for Store&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableBuilder","synthetic":true,"types":[]}];
implementors["test_pd"] = [{"text":"impl&lt;C&gt; !UnwindSafe for Server&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlreadyBootstrapped","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Incompatible","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeaderChange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotRetry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Retry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Split","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Roulette","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for PdMock&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["test_raftstore"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Cluster&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChannelTransportCore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChannelTransport","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for NodeCluster","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TestPdClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MockRaftStoreRouter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddressMap","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ServerCluster","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageTypeNotifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DropPacketFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DelayFilter","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for SimulateTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for DefaultFilterFactory&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for CloneFilterFactory&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PartitionFilterFactory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsolationFilterFactory","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RegionPacketFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapshotFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CollectSnapshotFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DropSnapshotFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvSnapshotFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeadingFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeadingDuplicatedSnapshotFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RandomLatencyFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeaseReadFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DropMessageFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Store","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Cluster","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedulePolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Operator","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ServerMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PartitionFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TEST_CONFIG","synthetic":true,"types":[]}];
implementors["test_sst_importer"] = [{"text":"impl UnwindSafe for TestPropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestPropertiesCollector","synthetic":true,"types":[]}];
implementors["test_storage"] = [{"text":"impl&lt;E&gt; !UnwindSafe for AssertionStorage&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for SyncTestStorageBuilder&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for SyncTestStorage&lt;E&gt;","synthetic":true,"types":[]}];
implementors["test_util"] = [{"text":"impl UnwindSafe for KvGenerator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaseTraceLogger","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Never","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nope","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; UnwindSafe for CaseLifeWatcher&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FailpointHook","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl UnwindSafe for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoHyphenation","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; UnwindSafe for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send + UnwindSafe&gt; UnwindSafe for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send + UnwindSafe&gt; UnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tidb_query_codegen"] = [{"text":"impl UnwindSafe for AggrFunctionStateExpr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AggrFunctionOpts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for state","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpnFnAttr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpnFnRefEvaluableTypeWithOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpnFnEvaluableType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpnFnSignatureParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VargsRpnFnSignatureParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpnFnSignatureReturnGuardType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpnFnSignatureReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValidatorFnGenerator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VargsRpnFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawVargsRpnFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NormalRpnFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpnFnRefEvaluableType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Option","synthetic":true,"types":[]}];
implementors["tidb_query_common"] = [{"text":"impl !UnwindSafe for StorageError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EvaluateError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecSummary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecSummaryCollectorEnabled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecSummaryCollectorDisabled","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; UnwindSafe for WithSummaryCollector&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecuteStats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalCoprExecutorCountInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalCoprExecutorCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_EXECUTOR_COUNT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EXECUTOR_COUNT_METRICS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecutorName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalCoprExecutorCountDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntervalRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PointRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangesIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IterStatus","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RangesScanner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RangesScannerOptions&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FixtureStorage","synthetic":true,"types":[]}];
implementors["tidb_query_datatype"] = [{"text":"impl UnwindSafe for FieldTypeBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldTypeFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EvalType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Collation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldTypeTp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataTypeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LazyBatchColumnVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LazyBatchColumn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Chunk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Column","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Row&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RowIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharsetUtf8mb4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CollatorUtf8Mb4GeneralCi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CollatorUtf8Mb4UnicodeCi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CollatorUtf8Mb4Bin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CollatorUtf8Mb4BinNoPadding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharsetBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CollatorBinary","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; UnwindSafe for SortKey&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BitAndIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BytesGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BytesWriter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChunkedVecBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PartialBytesWriter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChunkedVecJson","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ChunkedVecSized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LogicalRows&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScalarValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ScalarValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VectorValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LogicalRowsIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Datum","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathExpression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModifyType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tz","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinaryLiteral","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Decimal","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Res&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for JsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Json","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JsonType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BinaryModifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathLeg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JsonVisitor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MergeUnit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TzOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeekMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for LEBytes&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RowSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Column","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RowColMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RowColsDict","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SqlMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EvalConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EvalWarnings","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EvalContext","synthetic":true,"types":[]}];
implementors["tidb_query_normal_executors"] = [{"text":"impl&lt;Src&gt; !UnwindSafe for HashAggExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !UnwindSafe for StreamAggExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; UnwindSafe for LimitExecutor&lt;Src&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for ScanExecutor&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for ScanExecutorOptions&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !UnwindSafe for SelectionExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !UnwindSafe for TopNExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprColumnRefVisitor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OriginCols","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AggCols","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Row","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AggBitAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AggBitOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AggBitXor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Count","synthetic":true,"types":[]},{"text":"impl UnwindSafe for First","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Avg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extremum","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AggFuncExpr","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !UnwindSafe for AggExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexInnerExecutor","synthetic":true,"types":[]},{"text":"impl&lt;SS&gt; !UnwindSafe for ExecutorsRunner&lt;SS&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableInnerExecutor","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OrderBy","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SortRow","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TopNHeap","synthetic":true,"types":[]}];
implementors["tidb_query_normal_expr"] = [{"text":"impl UnwindSafe for Column","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constant","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ScalarFunc","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Expression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmpOp","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for JsonFuncArgsParser&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tidb_query_shared_expr"] = [{"text":"impl UnwindSafe for IntWithSign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MySQLRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrimDirection","synthetic":true,"types":[]}];
implementors["tidb_query_vec_aggr"] = [{"text":"impl UnwindSafe for AllAggrDefinitionParser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AggrFnDefinitionParserAvg","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AggrFnAvg&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AggrFnStateAvg&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitXor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AggrFnDefinitionParserBitOp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AggrFnBitOp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AggrFnStateBitOp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AggrFnDefinitionParserCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AggrFnCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AggrFnStateCount","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AggrFnDefinitionParserFirst","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AggrFnFirst&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AggrFnStateFirst&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as EvaluableRef&lt;'static&gt;&gt;::EvaluableType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Max","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Min","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AggrFnDefinitionParserExtremum&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; UnwindSafe for AggFnExtremumForBytes&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; UnwindSafe for AggFnStateExtremum4Bytes&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for AggFnExtremum&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for AggFnStateExtremum&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as EvaluableRef&lt;'static&gt;&gt;::EvaluableType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AggrFnDefinitionParserSum","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AggrFnSum&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AggrFnStateSum&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tidb_query_vec_executors"] = [{"text":"impl&lt;Src&gt; !UnwindSafe for BatchFastHashAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for BatchIndexScanExecutor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; UnwindSafe for BatchLimitExecutor&lt;Src&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !UnwindSafe for BatchSelectionExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !UnwindSafe for BatchSimpleAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !UnwindSafe for BatchSlowHashAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !UnwindSafe for BatchStreamAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for BatchTableScanExecutor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !UnwindSafe for BatchTopNExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FastHashAggregationImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Groups","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexScanExecutorImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeHandleStrategy","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BatchExecuteResult","synthetic":true,"types":[]},{"text":"impl&lt;SS&gt; !UnwindSafe for BatchExecutorsRunner&lt;SS&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SimpleAggregationImpl","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SlowHashAggregationImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKeyRefUnsafe","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BatchStreamAggregationImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableScanExecutorImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeapItemSourceData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeapItemUnsafe","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !UnwindSafe for Entities&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src, I&gt; !UnwindSafe for AggregationExecutor&lt;Src, I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HashAggregationHelper","synthetic":true,"types":[]},{"text":"impl&lt;S, I&gt; UnwindSafe for ScanExecutor&lt;S, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, I&gt; UnwindSafe for ScanExecutorOptions&lt;S, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tidb_query_vec_expr"] = [{"text":"impl !UnwindSafe for RpnExpression","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RpnExpressionBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RpnExpressionNode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RpnStackNode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RpnStackNodeVectorValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpnFnMeta","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RpnFnCallExtra&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ScalarArg&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&gt; UnwindSafe for VectorArg&lt;'a, T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, Rem&gt; UnwindSafe for Arg&lt;A, Rem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Null","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, E&gt; UnwindSafe for ArgConstructor&lt;'a, A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Arithmetic_Evaluator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for ArithmeticWithCtx_Evaluator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntIntPlus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntUintPlus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintIntPlus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintUintPlus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RealPlus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecimalPlus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntIntMinus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntUintMinus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintIntMinus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintUintMinus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RealMinus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecimalMinus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntIntMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntUintMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintIntMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintUintMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RealMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecimalMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecimalMultiply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RealMultiply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntIntMultiply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntUintMultiply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintIntMultiply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintUintMultiply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntDivideInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntDivideUint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintDivideUint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UintDivideInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntDivideDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecimalDivide","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RealDivide","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastSignedIntAsUnsignedInt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastIntAsIntOthers_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastRealAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastStringAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastBinaryStringAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastDecimalAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastJsonAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastSignedIntAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastSignedIntAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastUnsignedIntAsSignedOrUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastRealAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastRealAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastStringAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastBinaryStringAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastStringAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastBinaryStringAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastDecimalAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CastAnyAsString_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastUintAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastFloatRealAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastStringAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastUnsignedIntAsSignedOrUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastSignedIntAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastRealAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastStringAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastDecimalAsSignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastDecimalAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; UnwindSafe for CastAnyAsDecimal_Evaluator&lt;From&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;From: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastJsonAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastBytesAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastIntAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastTimeAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastDurationAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastRealAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastBytesAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastDecimalAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastJsonAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastIntAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastRealAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastStringAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastDecimalAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastTimeAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastDurationAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastBoolAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastUintAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastStringAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastJsonAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;From, To&gt; UnwindSafe for CastAnyAsAny_Evaluator&lt;From, To&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;From: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;To: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;To&gt; UnwindSafe for CastJsonAsAny_Evaluator&lt;To&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;To: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; UnwindSafe for CastAnyAsJson_Evaluator&lt;From&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;From: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; UnwindSafe for CastAnyAsBytes_Evaluator&lt;From&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;From: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CastJsonAsBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for Compare_Evaluator&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for CompareJson_Evaluator&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, F&gt; UnwindSafe for CompareBytes_Evaluator&lt;C, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; UnwindSafe for BasicComparer&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for UintUintComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for UintIntComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for IntUintComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmpOpLT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmpOpLE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmpOpGT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmpOpGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmpOpNE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmpOpEQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmpOpNullEQ","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for NormalInByHash&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for CollationAwareBytesInByHash&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CompareInMeta&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IfNull_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfNullJson_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfNullBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IfCondition_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfConditionJson_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfConditionBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Md5_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha1_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha2_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Password_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UncompressedLength_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RandomBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JsonDepth_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JsonType_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JsonUnquote_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for Like_Evaluator&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pi_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crc32_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Log1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Log2Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Log2_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Log10_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for Ceil_Evaluator&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CeilReal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CeilDecToDec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CeilIntToDec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CeilDecToInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CeilIntToInt","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Floor_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloorReal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloorIntToDec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloorDecToInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloorDecToDec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloorIntToInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbsReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AbsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sign_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sqrt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Radians_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sin_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cos_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tan_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cot_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pow_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rand_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RandWithSeedFirstGen_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Degrees_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asin_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Acos_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Atan1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Atan2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Conv_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundInt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundDec_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TruncateIntWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TruncateIntWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TruncateRealWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TruncateRealWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundWithFracInt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundWithFracDec_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundWithFracReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InetAton_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InetNtoa_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inet6Aton_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inet6Ntoa_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsIpv4_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsIpv4Compat_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsIpv4Mapped_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsIpv6_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uuid_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogicalAnd_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogicalOr_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogicalXor_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnaryNotInt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnaryNotReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnaryNotDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnaryMinusUint_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnaryMinusInt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnaryMinusReal_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnaryMinusDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IsNull_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNullBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNullJson_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitAnd_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitOr_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitXor_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitNeg_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeepNullOn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeepNullOff","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for IntIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for RealIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for DecimalIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for IntIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for RealIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for DecimalIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeftShift_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RightShift_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitCount_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bin_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OctInt_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Length_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unhex_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitLength_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ord_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ascii_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReverseUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HexIntArg_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ltrim_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rtrim_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lpad_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LpadUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rpad_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Replace_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Left_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeftUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Right_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Insert_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RightUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpperUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Upper_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HexStrArg_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Locate2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Reverse_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Locate3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Space_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubstringIndex_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Strcmp_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstrUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FindInSet_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trim1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trim3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharLength_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharLengthUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ToBase64_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FromBase64_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Quote_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repeat_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DateFormat_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeekWithMode_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeekDay_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DayOfWeek_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DayOfYear_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeekOfYear_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ToDays_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ToSeconds_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FromDays_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MakeDate_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Month_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MonthName_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hour_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Minute_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Second_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeToSec_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MicroSecond_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Year_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DayOfMonth_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DayName_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeriodAdd_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeriodDiff_Evaluator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LastDay_Evaluator","synthetic":true,"types":[]}];
implementors["tikv"] = [{"text":"impl UnwindSafe for TitanCfConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultCfConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteCfConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LockCfConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftCfConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersionCfConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TitanDBConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DbConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftDefaultCfConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftDbConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftEngineConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBConfigManger","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetricConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnifiedReadPoolConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageReadPoolConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprReadPoolConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadPoolConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackupConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CdcConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TiKvConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TIKVCONFIG_TYPED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigController","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ConfigInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DBType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Module","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for Endpoint&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReqContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CachedRequestHandler","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for ChecksumContext&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Snapshot&gt;::Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for TiKVStorage&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Store&gt;::Scanner: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for DagHandlerBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DAGHandler","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BatchDAGHandler","synthetic":true,"types":[]},{"text":"impl&lt;'a, PF, F&gt; !UnwindSafe for ConcurrencyLimiter&lt;'a, PF, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, PF, F&gt; !UnwindSafe for __ConcurrencyLimiterProjection&lt;'pin, 'a, PF, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, PF, F&gt; !UnwindSafe for __ConcurrencyLimiterProjectionRef&lt;'pin, 'a, PF, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for LimitationState&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !UnwindSafe for Tracker&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, F&gt; !UnwindSafe for __TrackerProjection&lt;'pin, 'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, F&gt; UnwindSafe for __TrackerProjectionRef&lt;'pin, 'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_REQ_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_REQ_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_REQ_HANDLE_TIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_REQ_HANDLE_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_REQ_WAIT_TIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_REQ_WAIT_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_REQ_HANDLER_BUILD_TIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_REQ_HANDLER_BUILD_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_REQ_ERROR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_SCAN_KEYS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_SCAN_KEYS_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_SCAN_DETAILS_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_ROCKSDB_PERF_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_ROCKSDB_PERF_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_DAG_REQ_COUNT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_RESP_SIZE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_ACQUIRE_SEMAPHORE_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COPR_WAITING_FOR_SEMAPHORE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CopLocalMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReqTag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanKeysKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfMetric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcquireSemaphoreType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprReqHistogramInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprReqHistogramDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprReqHistogram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReqWaitHistogramInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReqWaitHistogramDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReqWaitHistogram2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReqWaitHistogram2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReqWaitHistogram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfCounterInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfCounterDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfCounter2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfCounter2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanKeysHistogramInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanKeysHistogramDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanKeysHistogram2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanKeysHistogram2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanKeysHistogram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanDetailsInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanDetailsDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanDetails2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanDetails2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanDetails3Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanDetails3Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprScanDetails","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoprAcquireSemaphoreTypeCounterVec","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for FuturePoolTicker&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for AnalyzeContext&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Snapshot&gt;::Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SampleBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Snapshot&gt;::Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleCollector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmSketch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FmSketch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bucket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Histogram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tracker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrackerState","synthetic":true,"types":[]},{"text":"impl&lt;E, Router&gt; UnwindSafe for ImportSSTService&lt;E, Router&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Router: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReporterTicker&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadPoolHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadPoolError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UNIFIED_READ_POOL_RUNNING_TASKS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONFIG_ROCKSDB_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CPU_CORES_QUOTA_GAUGE","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !UnwindSafe for ConnectionBuilder&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !UnwindSafe for RaftClient&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_COMMAND_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAP_TASK_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_GCTASK_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_GCTASK_FAIL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RESOLVE_STORE_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GRPC_MSG_FAIL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_KEYS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GRPC_MSG_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GRPC_MSG_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GRPC_MSG_HISTOGRAM_GLOBAL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_COMMAND_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SNAP_TASK_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_GCTASK_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_GCTASK_FAIL_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RESOLVE_STORE_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GRPC_MSG_FAIL_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_KEYS_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SEND_SNAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GRPC_REQ_BATCH_COMMANDS_SIZE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GRPC_RESP_BATCH_COMMANDS_SIZE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_EMPTY_RANGE_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_SKIPPED_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_TASK_DURATION_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_TOO_BUSY_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AUTO_GC_STATUS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AUTO_GC_SAFE_POINT_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AUTO_GC_PROCESSED_REGIONS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_MESSAGE_RECV_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_MESSAGE_BATCH_SIZE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REPORT_FAILURE_MSG_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_MESSAGE_FLUSH_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RAFT_MESSAGE_DELAY_FLUSH_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REQUEST_BATCH_SIZE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REQUEST_BATCH_RATIO_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASYNC_REQUESTS_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASYNC_REQUESTS_DURATIONS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASYNC_REQUESTS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASYNC_REQUESTS_DURATIONS_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrpcTypeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcCommandKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapTask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolveStore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcKeysCF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcKeysDetail","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalGrpcTypeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchableRequestKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestStatusKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestTypeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcCommandCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcCommandCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcCommandCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapTaskCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapTaskCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SnapTaskCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcTaskCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcTaskCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcTaskCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcTaskFailCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcTaskFailCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcTaskFailCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolveStoreCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolveStoreCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolveStoreCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrpcMsgFailCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrpcMsgFailCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrpcMsgFailCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcKeysCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcKeysCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcKeysCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcKeysCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcKeysCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrpcMsgHistogramVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrpcMsgHistogramVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrpcMsgHistogramVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrpcMsgHistogramGlobal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestBatchSizeHistogramVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestBatchRatioHistogramVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsyncRequestsCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsyncRequestsCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsyncRequestsCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsyncRequestsCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsyncRequestsCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsyncRequestsDurationVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsyncRequestsDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AsyncRequestsDurationVec","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Queue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchMessageBuffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SnapshotReporter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, M, B&gt; !UnwindSafe for RaftCall&lt;R, M, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !UnwindSafe for StreamBackEnd&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ConnectionPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CachedQueue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GrpcCompressionType","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for MvccInfoIterator&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; UnwindSafe for Debugger&lt;ER&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ER: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccChecker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteCompactionFilterFactory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcWorkerConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !UnwindSafe for AutoGcConfig&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, RR&gt; !UnwindSafe for GcWorker&lt;E, RR&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GcTask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LockObserverState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LockObserver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LockCollectorRunner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AppliedLockCollector","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LockCollectorTask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_CONTEXT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteCompactionFilter","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GcManagerContext","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GcManagerHandle","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !UnwindSafe for GcManager&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcManagerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcManagerState","synthetic":true,"types":[]},{"text":"impl&lt;E, RR&gt; UnwindSafe for GcRunner&lt;E, RR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;RR: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadLoad","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadLoadStatistics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LockManagerConfigManager","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LockManager","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Locks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DetectTable","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Scheduler","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RoleChangeNotifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inner","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; !UnwindSafe for Detector&lt;S, P&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Role","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DetectType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TASK_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ERROR_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WAITER_LIFETIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DETECT_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WAIT_TABLE_STATUS_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DETECTOR_LEADER_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TASK_COUNTER_METRICS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ERROR_COUNTER_METRICS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalTaskCounterInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalTaskCounterDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalTaskCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalErrorCounterInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalErrorCounterDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalErrorCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitTableStatusGauge","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DelayInner","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Waiter","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WaitTable","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Scheduler","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WaiterManager","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;C, ER&gt; !UnwindSafe for Node&lt;C, ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for RaftKv&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmdRes","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StoreAddr","synthetic":true,"types":[]},{"text":"impl&lt;T, RR&gt; UnwindSafe for Runner&lt;T, RR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RR: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PdStoreAddrResolver","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; !UnwindSafe for Server&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TestRaftStoreRouter","synthetic":true,"types":[]},{"text":"impl&lt;ER, T&gt; !UnwindSafe for Service&lt;ER, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Service","synthetic":true,"types":[]},{"text":"impl&lt;T, E, L&gt; !UnwindSafe for Service&lt;T, E, L&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReqBatcher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IoLoad","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NUM_REGEX","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NicSnapshot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchRespCollector","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SnapChunk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendStat","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RecvSnapContext","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for Runner&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl&lt;E, R&gt; !UnwindSafe for StatusServer&lt;E, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for TlsIncoming&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, S&gt; !UnwindSafe for __TlsIncomingProjection&lt;'pin, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'pin, S&gt; UnwindSafe for __TlsIncomingProjectionRef&lt;'pin, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftProgress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftHardState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftSoftState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Epoch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionPeer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionMergeState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftTruncatedState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftApplyState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegionMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftProgressState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftStateRole","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RaftPeerRole","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PROFILER_MUTEX","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ProfGuard","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; !UnwindSafe for ServerTransport&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CfStatistics","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Cursor&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RocksEngine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Statistics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestEngineBuilder","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SnapshotStore&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Snapshot&gt;::Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for PrewriteResult","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; !UnwindSafe for Storage&lt;E, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; UnwindSafe for TestStorageBuilder&lt;E, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PessimisticLockRes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondaryLocksStatus","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for StorageCallback","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TxnStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageConfigManger","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlockCacheConfig","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorHeaderKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BTreeEngine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BTreeEngineIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BTreeEngineSnapshot","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; UnwindSafe for CursorBuilder&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfStatisticsDelta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfStatisticsInstant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatisticsSummary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CbContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteData","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Modify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanMode","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PerfStatisticsFields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Runner","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RocksEngineCore","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DummyLockManager","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitTimeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StorageLocalMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KV_COMMAND_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KV_COMMAND_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_STAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_STAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_WRITING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_CONTEX_GAUGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_HISTOGRAM_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_LATCH_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_LATCH_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_PROCESSING_READ_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_PROCESSING_READ_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_PROCESSING_WRITE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_TOO_BUSY_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_TOO_BUSY_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_COMMANDS_PRI_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SCHED_COMMANDS_PRI_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KV_COMMAND_KEYREAD_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KV_COMMAND_KEYREAD_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KV_COMMAND_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KV_COMMAND_SCAN_DETAILS_STATIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KV_COMMAND_KEYWRITE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KV_COMMAND_KEYWRITE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for REQUEST_EXCEED_BOUND","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandStageKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandPriority","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcKeysCF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcKeysDetail","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandScanDetailsInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandScanDetailsDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandScanDetails2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandScanDetails2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandScanDetails3Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandScanDetails3Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandScanDetails","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedDurationVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedDurationVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProcessingReadVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProcessingReadVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProcessingReadVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KReadVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KReadVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KReadVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KvCommandCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KvCommandCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KvCommandCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedStageCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedStageCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedStageCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedStageCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedStageCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedLatchDurationVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedLatchDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedLatchDurationVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KvCommandKeysWrittenVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KvCommandKeysWrittenVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KvCommandKeysWrittenVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedTooBusyVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedTooBusyVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedTooBusyVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedCommandPriCounterVecInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedCommandPriCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedCommandPriCounterVec","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Mvcc&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GC_DELETE_VERSIONS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MVCC_VERSIONS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for PointGetter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Snapshot&gt;::Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for PointGetterBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for MvccReader&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Snapshot&gt;::Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for ScannerBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GcInfo","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for MvccTxn&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReleasedLock","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TxnCommitRecord","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Scanner&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Snapshot&gt;::Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewerTsCheckState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondaryLockStatus","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl&lt;Iter, Ob&gt; UnwindSafe for MvccInfoScanner&lt;Iter, Ob&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ob: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccInfoCollector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccChecksum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONCURRENCY_MANAGER_LOCK_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MVCC_CONFLICT_COUNTER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MVCC_DUPLICATE_CMD_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MVCC_CHECK_TXN_STATUS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccConflictKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccDuplicateCommandKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccCheckTxnStatusKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccConflictCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccDuplicateCmdCounterVec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccCheckTxnStatusCounterVec","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for ScannerConfig&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for BackwardKvScanner&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Snapshot&gt;::Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Cursors&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Snapshot&gt;::Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; UnwindSafe for ForwardScanner&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Snapshot&gt;::Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LatestKvPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LatestEntryPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeltaEntryPolicy","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for HandleRes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntryBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MissingLockAction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntryBatch","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FixtureStore","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FixtureStoreScanner","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TxnEntry","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ProcessResult","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorInner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcquirePessimisticLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckSecondaryLocks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckTxnStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cleanup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Commit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccByKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccByStartTs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pause","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PessimisticRollback","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Prewrite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrewritePessimistic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolveLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolveLockLite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolveLockReadPhase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rollback","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScanLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TxnHeartBeat","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TypedCommand&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReleasedLocks","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WriteResult","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; !UnwindSafe for WriteContext&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Command","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResponsePolicy","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SchedLocalMetrics","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SchedPool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedTicker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmdTimer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TaskContext","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; !UnwindSafe for SchedulerInner&lt;L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; !UnwindSafe for Scheduler&lt;E, L&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Latch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Latches","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for FuturePoolTicker&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MvccInfo","synthetic":true,"types":[]}];
implementors["tikv_alloc"] = [{"text":"impl !UnwindSafe for ProfError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for THREAD_MEMORY_MAP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryStatsAccessor","synthetic":true,"types":[]}];
implementors["tikv_util"] = [{"text":"impl UnwindSafe for DefaultRng","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DeferContext&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RingQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MustConsumeVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; UnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for WithConcatExtend&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadableSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OptionReadableSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadableDuration","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for VersionTrack&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Tracker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TomlWriter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TomlLine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FsInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Sha256Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchCommandsWaker","synthetic":true,"types":[]},{"text":"impl&lt;T, C, A&gt; UnwindSafe for MustCall&lt;T, C, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeadlineError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Deadline","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyBuilder","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for TikvFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for RocksFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for LogAndFuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for SlowLogFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SlowCostSerializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogCost","synthetic":true,"types":[]},{"text":"impl&lt;N, R, S, T&gt; UnwindSafe for LogDispatcher&lt;N, R, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RotatingFileLogger","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RotatingFileLoggerBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RotateByTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RotateBySize","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for Record&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for ValueEntry&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; UnwindSafe for Trace&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for LruCache&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadInfoStatistics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HistogramReader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CRITICAL_ERROR","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Metrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadsCollector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CLK_TCK","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TidRetriever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProcessCollector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CLK_TCK","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PAGESIZE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BOOT_TIME","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AllocStatsCollector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LooseBoundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Notifier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VecCollector","synthetic":true,"types":[]},{"text":"impl&lt;T, E, I, C&gt; UnwindSafe for BatchReceiver&lt;T, E, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SYS_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LiunxStyleCpuTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MountPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGroupSubsys","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGroupSys","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MountInfoFieldPart1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MountInfoFieldPart2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubsysFields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SysQuota","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixSecs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SlowTimer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Monitor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoarseClock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadReadId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Timer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TimeoutTask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GLOBAL_TIMER_HANDLE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeZero","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SteadyClock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for STEADY_CLOCK","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SteadyTimer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GLOBAL_STEADY_TIMER","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Scheduler&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stopped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DefaultRunnerWithTimer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Scheduler&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Builder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ScheduleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WORKER_PENDING_TASK_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WORKER_HANDLED_TASK_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Full","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FuturePool","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TickerWrapper&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultTicker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for YatpPoolRunner&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for YatpPoolBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Env","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FUTUREPOOL_RUNNING_TASK_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FUTUREPOOL_HANDLED_TASK_VEC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FUTUREPOOL_SCHEDULE_DURATION_VEC","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl UnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ComponentRangeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConversionRangeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndeterminateOffsetError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OffsetDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrimitiveDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UtcOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weekday","synthetic":true,"types":[]}];
implementors["tipb"] = [{"text":"impl UnwindSafe for InUnionMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompareInMetadata","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RpnExpr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ByItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Row","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Chunk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RowMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DagRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChunkMemoryLayout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserIdentity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Executor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableScan","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexScan","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Selection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Projection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aggregation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopN","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecutorExecutionSummary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChecksumRewriteRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChecksumRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChecksumResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TableInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColumnInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyzeReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyzeIndexReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyzeColumnsReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyzeColumnsResp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyzeIndexResp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bucket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Histogram","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FmSketch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleCollector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmSketchRow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmSketchTopN","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmSketch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScalarFuncSig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncodeType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Endian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExecType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChecksumScanOn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChecksumAlgorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnalyzeType","synthetic":true,"types":[]}];
implementors["tipb_helper"] = [{"text":"impl UnwindSafe for ExprDefBuilder","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl UnwindSafe for DirBuilder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadDir","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for PollEvented&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Registration","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Stderr","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Stdin","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; !UnwindSafe for Seek&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; UnwindSafe for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W&gt; !UnwindSafe for Copy&lt;'a, R, W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, B&gt; UnwindSafe for StreamReader&lt;S, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RecvHalf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SendHalf","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UCred","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Command","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Child","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ChildStdin","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ChildStdout","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ChildStderr","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryCurrentError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JoinError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for JoinHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for StreamMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Barrier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryLockError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for OwnedMutexGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Notify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClosedError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for DelayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Elapsed","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Timeout&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Throttle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl !UnwindSafe for Enter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnterError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkThread","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnparkThread","synthetic":true,"types":[]}];
implementors["tokio_openssl"] = [{"text":"impl&lt;S&gt; UnwindSafe for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl !UnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for DelayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Timeout&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Clock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Throttle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ThrottleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl&lt;T, N&nbsp;=&nbsp;Clock&gt; !UnwindSafe for Timer&lt;T, N&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Turn","synthetic":true,"types":[]}];
implementors["tokio_tls"] = [{"text":"impl&lt;S&gt; UnwindSafe for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsAcceptor","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl UnwindSafe for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; UnwindSafe for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; UnwindSafe for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinesCodec","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LinesCodecError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LengthDelimitedCodec","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl UnwindSafe for Datetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;T&gt; UnwindSafe for TryLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Locked&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["txn_types"] = [{"text":"impl UnwindSafe for Lock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeStamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OldValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TxnExtra","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Write","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for WriteRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TsSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mutation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MutationType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorInner","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl UnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; UnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNormalized","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl UnwindSafe for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["uuid"] = [{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uuid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hyphenated","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for HyphenatedRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Simple","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SimpleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Urn","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for UrnRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; UnwindSafe for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for VacantEntry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for OccupiedEntry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for IterMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for ValuesMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; UnwindSafe for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; !UnwindSafe for Entry&lt;'a, V&gt;","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl UnwindSafe for Void","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl UnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WalkDir","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl !UnwindSafe for Giver","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Taker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SharedGiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Closed","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl UnwindSafe for ParserConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; UnwindSafe for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextPosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XmlVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Namespace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for EventReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for Events&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XmlEvent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EmitterError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["yatp"] = [{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Remote&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MULTILEVEL_LEVEL_ELAPSED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MULTILEVEL_LEVEL0_CHANCE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SchedConfig","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for CloneRunnerBuilder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Local&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for ThreadPool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extras","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Pop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for QueueType","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for MultilevelRunnerBuilder&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for MultilevelRunner&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TaskCell","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Handle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Runner","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Task","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TaskCell","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Runner","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()