(function() {var implementors = {};
implementors["ahash"] = [{"text":"impl&lt;K, V, S&gt; Extend&lt;(K, V)&gt; for AHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Extend&lt;(&amp;'a K, &amp;'a V)&gt; for AHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Copy + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Copy + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Extend&lt;T&gt; for AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, S&gt; Extend&lt;&amp;'a T&gt; for AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + Eq + Hash + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Extend&lt;&lt;A as Array&gt;::Item&gt; for ArrayVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["bytes"] = [{"text":"impl Extend&lt;u8&gt; for BytesMut","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Extend&lt;&amp;'a u8&gt; for BytesMut","synthetic":false,"types":[]}];
implementors["cdc"] = [{"text":"impl Extend&lt;FeatureGate&gt; for FeatureGate","synthetic":false,"types":[]}];
implementors["dashmap"] = [{"text":"impl&lt;K:&nbsp;Eq + Hash, S:&nbsp;BuildHasher + Clone&gt; Extend&lt;K&gt; for DashSet&lt;K, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Eq + Hash, V, S:&nbsp;BuildHasher + Clone&gt; Extend&lt;(K, V)&gt; for DashMap&lt;K, V, S&gt;","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R, A&gt; Extend&lt;A&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Extend&lt;A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Extend&lt;A&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut:&nbsp;Future&gt; Extend&lt;Fut&gt; for FuturesOrdered&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut&gt; Extend&lt;Fut&gt; for FuturesUnordered&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Stream + Unpin&gt; Extend&lt;St&gt; for SelectAll&lt;St&gt;","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl&lt;T&gt; Extend&lt;(Option&lt;HeaderName&gt;, T)&gt; for HeaderMap&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Extend&lt;(HeaderName, T)&gt; for HeaderMap&lt;T&gt;","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;T, S&gt; Extend&lt;T&gt; for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash + Eq,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, S&gt; Extend&lt;&amp;'a T&gt; for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash + Eq + Copy + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S&gt; Extend&lt;(K, V)&gt; for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Hash + Eq,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Extend&lt;(&amp;'a K, &amp;'a V)&gt; for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Hash + Eq + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K:&nbsp;Hash + Eq, V, S:&nbsp;BuildHasher&gt; Extend&lt;(K, V)&gt; for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Extend&lt;(&amp;'a K, &amp;'a V)&gt; for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: 'a + Hash + Eq + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: 'a + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["linked_hash_set"] = [{"text":"impl&lt;T, S&gt; Extend&lt;T&gt; for LinkedHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, S&gt; Extend&lt;&amp;'a T&gt; for LinkedHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + Eq + Hash + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Extend&lt;AtFlags&gt; for AtFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;OFlag&gt; for OFlag","synthetic":false,"types":[]},{"text":"impl Extend&lt;SealFlag&gt; for SealFlag","synthetic":false,"types":[]},{"text":"impl Extend&lt;FdFlag&gt; for FdFlag","synthetic":false,"types":[]},{"text":"impl Extend&lt;SpliceFFlags&gt; for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;FallocateFlags&gt; for FallocateFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;ModuleInitFlags&gt; for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;DeleteModuleFlags&gt; for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;MsFlags&gt; for MsFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;MntFlags&gt; for MntFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;MQ_OFlag&gt; for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl Extend&lt;FdFlag&gt; for FdFlag","synthetic":false,"types":[]},{"text":"impl Extend&lt;InterfaceFlags&gt; for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;PollFlags&gt; for PollFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;CloneFlags&gt; for CloneFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;EpollFlags&gt; for EpollFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;EpollCreateFlags&gt; for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;EfdFlags&gt; for EfdFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;MemFdCreateFlag&gt; for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl Extend&lt;ProtFlags&gt; for ProtFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;MapFlags&gt; for MapFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;MsFlags&gt; for MsFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;MlockAllFlags&gt; for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;Options&gt; for Options","synthetic":false,"types":[]},{"text":"impl Extend&lt;QuotaValidFlags&gt; for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;SaFlags&gt; for SaFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;SfdFlags&gt; for SfdFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;SockFlag&gt; for SockFlag","synthetic":false,"types":[]},{"text":"impl Extend&lt;MsgFlags&gt; for MsgFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;SFlag&gt; for SFlag","synthetic":false,"types":[]},{"text":"impl Extend&lt;Mode&gt; for Mode","synthetic":false,"types":[]},{"text":"impl Extend&lt;FsFlags&gt; for FsFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;InputFlags&gt; for InputFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;OutputFlags&gt; for OutputFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;ControlFlags&gt; for ControlFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;LocalFlags&gt; for LocalFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;WaitPidFlag&gt; for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl Extend&lt;AddWatchFlags&gt; for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;InitFlags&gt; for InitFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;TimerFlags&gt; for TimerFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;TimerSetTimeFlags&gt; for TimerSetTimeFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;AccessFlags&gt; for AccessFlags","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Extend&lt;CMSOptions&gt; for CMSOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;OcspFlag&gt; for OcspFlag","synthetic":false,"types":[]},{"text":"impl Extend&lt;Pkcs7Flags&gt; for Pkcs7Flags","synthetic":false,"types":[]},{"text":"impl Extend&lt;SslOptions&gt; for SslOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;SslMode&gt; for SslMode","synthetic":false,"types":[]},{"text":"impl Extend&lt;SslVerifyMode&gt; for SslVerifyMode","synthetic":false,"types":[]},{"text":"impl Extend&lt;SslSessionCacheMode&gt; for SslSessionCacheMode","synthetic":false,"types":[]},{"text":"impl Extend&lt;ExtensionContext&gt; for ExtensionContext","synthetic":false,"types":[]},{"text":"impl Extend&lt;ShutdownState&gt; for ShutdownState","synthetic":false,"types":[]},{"text":"impl Extend&lt;X509CheckFlags&gt; for X509CheckFlags","synthetic":false,"types":[]}];
implementors["procfs"] = [{"text":"impl Extend&lt;NFSServerCaps&gt; for NFSServerCaps","synthetic":false,"types":[]},{"text":"impl Extend&lt;StatFlags&gt; for StatFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;CoredumpFlags&gt; for CoredumpFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;FDPermissions&gt; for FDPermissions","synthetic":false,"types":[]}];
implementors["raftstore"] = [{"text":"impl Extend&lt;PeerTicks&gt; for PeerTicks","synthetic":false,"types":[]},{"text":"impl Extend&lt;ProposalContext&gt; for ProposalContext","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Extend&lt;(String, Value)&gt; for Map&lt;String, Value&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Extend&lt;&lt;A as Array&gt;::Item&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["str_stack"] = [{"text":"impl&lt;S&gt; Extend&lt;S&gt; for StrStack <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: AsRef&lt;str&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tidb_query_datatype"] = [{"text":"impl Extend&lt;FieldTypeFlag&gt; for FieldTypeFlag","synthetic":false,"types":[]},{"text":"impl Extend&lt;WeekMode&gt; for WeekMode","synthetic":false,"types":[]},{"text":"impl Extend&lt;Flags&gt; for Flags","synthetic":false,"types":[]},{"text":"impl Extend&lt;SqlMode&gt; for SqlMode","synthetic":false,"types":[]},{"text":"impl Extend&lt;Flag&gt; for Flag","synthetic":false,"types":[]}];
implementors["tikv"] = [{"text":"impl Extend&lt;WriteBatchFlags&gt; for WriteBatchFlags","synthetic":false,"types":[]}];
implementors["tikv_util"] = [{"text":"impl Extend&lt;u8&gt; for BufferVec","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Extend&lt;&amp;'a u8&gt; for BufferVec","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Extend&lt;u8&gt; for WithConcatExtend&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Extend&lt;&amp;'a u8&gt; for WithConcatExtend&lt;'b&gt;","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Extend&lt;(String, Value)&gt; for Map&lt;String, Value&gt;","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; Extend&lt;(usize, V)&gt; for VecMap&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V:&nbsp;Copy&gt; Extend&lt;(usize, &amp;'a V)&gt; for VecMap&lt;V&gt;","synthetic":false,"types":[]}];
implementors["xml"] = [{"text":"impl&lt;'a&gt; Extend&lt;(&amp;'a str, &amp;'a str)&gt; for Namespace","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Extend&lt;(&amp;'a str, &amp;'a str)&gt; for NamespaceStack","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Extend&lt;(&amp;'b str, &amp;'b str)&gt; for CheckedTarget&lt;'a&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()