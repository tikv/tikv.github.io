(function() {var implementors = {};
implementors["async_speed_limit"] = [{"text":"impl Future for ManualDelay","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Clock, R:&nbsp;Unpin&gt; Future for Consume&lt;C, R&gt;","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Future for Cancellation&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_task"] = [{"text":"impl&lt;T&gt; Future for LocalFutureObj&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for FutureObj&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["futures_timer"] = [{"text":"impl Future for Delay","synthetic":false,"types":[]}];
implementors["grpcio"] = [{"text":"impl&lt;T&gt; Future for ClientUnaryReceiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for ClientCStreamReceiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Future for UnarySinkResult","synthetic":false,"types":[]},{"text":"impl Future for ClientStreamingSinkResult","synthetic":false,"types":[]},{"text":"impl Future for ServerStreamingSinkFailure","synthetic":false,"types":[]},{"text":"impl Future for DuplexSinkFailure","synthetic":false,"types":[]},{"text":"impl Future for ShutdownFuture","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl&lt;B&gt; Future for ReadySendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, B&gt; Future for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for ResponseFuture","synthetic":false,"types":[]},{"text":"impl Future for PushedResponseFuture","synthetic":false,"types":[]},{"text":"impl&lt;T, B:&nbsp;Buf&gt; Future for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;Body + Unpin + ?Sized&gt; Future for Data&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Body + Unpin + ?Sized&gt; Future for Trailers&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl&lt;T, B&gt; Future for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Payload + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for ResponseFuture","synthetic":false,"types":[]},{"text":"impl Future for GaiFuture","synthetic":false,"types":[]},{"text":"impl Future for ResponseFuture","synthetic":false,"types":[]},{"text":"impl&lt;I, B, S, E&gt; Future for Connection&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: HttpService&lt;Body, ResBody = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: AsyncRead + AsyncWrite + Unpin + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Payload + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;S::Future, B&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, F, S, FE, E, B&gt; Future for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future&lt;Output = Result&lt;S, FE&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: HttpService&lt;Body, ResBody = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Payload,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;S::Future, B&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, IO, IE, S, B, E&gt; Future for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Accept&lt;Conn = IO, Error = IE&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;IE: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: AsyncRead + AsyncWrite + Unpin + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: MakeServiceRef&lt;IO, Body, ResBody = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Payload,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;&lt;S::Service as HttpService&lt;Body&gt;&gt;::Future, B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: NewSvcExec&lt;IO, S::Future, S::Service, E, NoopWatcher&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for OnUpgrade","synthetic":false,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T:&nbsp;AsyncRead + AsyncWrite + Unpin&gt; Future for HttpsConnecting&lt;T&gt;","synthetic":false,"types":[]}];
implementors["minitrace"] = [{"text":"impl&lt;T:&nbsp;Future&gt; Future for TraceSpawned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Future&gt; Future for TraceWrapped&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Future&gt; Future for MayTraceRootFuture&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Future&gt; Future for TraceRootFuture&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tikv"] = [{"text":"impl&lt;'a, PF, F&gt; Future for ConcurrencyLimiter&lt;'a, PF, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: Future&lt;Output = SemaphorePermit&lt;'a&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Future&gt; Future for Tracker&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R, M, B&gt; Future for RaftCall&lt;R, M, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RaftStoreRouter&lt;RocksEngine&gt; + Unpin + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buffer&lt;OutputMessage = M&gt; + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for Delay","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl&lt;S:&nbsp;?Sized&gt; Future for Seek&lt;'_, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: AsyncSeek + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized, W:&nbsp;?Sized&gt; Future for Copy&lt;'_, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsyncRead + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for Child","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for JoinHandle&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Future for LocalSet","synthetic":false,"types":[]},{"text":"impl Future for Delay","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Future,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()