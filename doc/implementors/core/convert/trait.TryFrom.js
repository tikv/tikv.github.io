(function() {var implementors = {};
implementors["http"] = [{"text":"impl&lt;'a, K, V, T&gt; TryFrom&lt;&amp;'a HashMap&lt;K, V, RandomState&gt;&gt; for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;HeaderName: TryFrom&lt;&amp;'a K&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;HeaderName as TryFrom&lt;&amp;'a K&gt;&gt;::Error: Into&lt;Error&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: TryFrom&lt;&amp;'a V&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Error: Into&lt;Error&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a str&gt; for HeaderName","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a String&gt; for HeaderName","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a [u8]&gt; for HeaderName","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a str&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a String&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a [u8]&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;String&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;Vec&lt;u8, Global&gt;&gt; for HeaderValue","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a [u8]&gt; for Method","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a str&gt; for Method","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a [u8]&gt; for StatusCode","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a str&gt; for StatusCode","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;u16&gt; for StatusCode","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a [u8]&gt; for Authority","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a str&gt; for Authority","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a [u8]&gt; for PathAndQuery","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a str&gt; for PathAndQuery","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a [u8]&gt; for Scheme","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a str&gt; for Scheme","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a [u8]&gt; for Uri","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a str&gt; for Uri","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a String&gt; for Uri","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;String&gt; for Uri","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;Parts&gt; for Uri","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a Uri&gt; for Uri","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl TryFrom&lt;i32&gt; for Signal","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;u32&gt; for BaudRate","synthetic":false,"types":[]}];
implementors["reqwest"] = [{"text":"impl&lt;T&gt; TryFrom&lt;Request&lt;T&gt;&gt; for Request <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;Body&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; TryFrom&lt;Request&lt;T&gt;&gt; for Request <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;Body&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tame_gcs"] = [{"text":"impl&lt;B&gt; TryFrom&lt;Response&lt;B&gt;&gt; for DeleteObjectResponse <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;Response&lt;Bytes&gt;&gt; for DownloadObjectResponse","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; TryFrom&lt;Response&lt;B&gt;&gt; for GetObjectResponse <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; TryFrom&lt;Response&lt;B&gt;&gt; for InsertResponse <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; TryFrom&lt;Response&lt;B&gt;&gt; for ListResponse <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; TryFrom&lt;Response&lt;B&gt;&gt; for PatchObjectResponse <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a str&gt; for BucketName&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;String&gt; for BucketName&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;&amp;'a str&gt; for ObjectName&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; TryFrom&lt;String&gt; for ObjectName&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["tidb_query_datatype"] = [{"text":"impl TryFrom&lt;FieldTypeTp&gt; for EvalType","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;u8&gt; for JsonType","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;FieldTypeTp&gt; for TimeType","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl TryFrom&lt;Duration&gt; for Duration","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl TryFrom&lt;TcpListener&gt; for TcpListener","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;TcpStream&gt; for TcpStream","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;UdpSocket&gt; for UdpSocket","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;UnixDatagram&gt; for UnixDatagram","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;UnixListener&gt; for UnixListener","synthetic":false,"types":[]},{"text":"impl TryFrom&lt;UnixStream&gt; for UnixStream","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()