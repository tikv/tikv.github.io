(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl Freeze for RollingAdler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Freeze for AHasher","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for AHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RandomState","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Freeze for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindIter&lt;'a, 'b, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Freeze for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Freeze for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Freeze for Prefix","synthetic":true,"types":[]},{"text":"impl Freeze for Infix","synthetic":true,"types":[]},{"text":"impl Freeze for Suffix","synthetic":true,"types":[]},{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl Freeze for Colour","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for ANSIGenericStrings&lt;'a, S&gt;","synthetic":true,"types":[]}];
implementors["antidote"] = [{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Condvar","synthetic":true,"types":[]},{"text":"impl Freeze for TryLockError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;T&gt; Freeze for DirectDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for DynGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, F, T, R&gt; Freeze for MapGuard&lt;G, F, T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Freeze for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ConstantDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Freeze for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Freeze for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Shard","synthetic":true,"types":[]},{"text":"impl Freeze for Global","synthetic":true,"types":[]},{"text":"impl !Freeze for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for PrivateSharded&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'l, T&gt; Freeze for Guard&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&nbsp;=&nbsp;Global&gt; !Freeze for ArcSwapAny&lt;T, S&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Freeze for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Drain&lt;'a, A&gt;","synthetic":true,"types":[]}];
implementors["async_speed_limit"] = [{"text":"impl Freeze for StandardClock","synthetic":true,"types":[]},{"text":"impl Freeze for Nanoseconds","synthetic":true,"types":[]},{"text":"impl Freeze for ManualDelay","synthetic":true,"types":[]},{"text":"impl Freeze for ManualClock","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Builder&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Instant: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Limiter&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, R&gt; Freeze for Consume&lt;C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Delay: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, C&gt; Freeze for Resource&lt;R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Delay: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["atty"] = [{"text":"impl Freeze for Stream","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl Freeze for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PrintFmt","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; Freeze for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Backtrace","synthetic":true,"types":[]},{"text":"impl Freeze for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl Freeze for BacktraceSymbol","synthetic":true,"types":[]}];
implementors["backtrace_sys"] = [{"text":"impl Freeze for backtrace_state","synthetic":true,"types":[]}];
implementors["backup"] = [{"text":"impl !Freeze for Request","synthetic":true,"types":[]},{"text":"impl !Freeze for Task","synthetic":true,"types":[]},{"text":"impl Freeze for LimitedStorage","synthetic":true,"types":[]},{"text":"impl !Freeze for BackupRange","synthetic":true,"types":[]},{"text":"impl Freeze for ConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;E, R&gt; !Freeze for Endpoint&lt;E, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Progress&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ControlThreadPool","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for BACKUP_REQUEST_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for BACKUP_RANGE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for BACKUP_RANGE_SIZE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for BACKUP_THREAD_POOL_SIZE_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for BACKUP_RANGE_ERROR_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for Service","synthetic":true,"types":[]},{"text":"impl Freeze for Writer","synthetic":true,"types":[]},{"text":"impl !Freeze for BackupWriterBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for BackupWriter","synthetic":true,"types":[]},{"text":"impl Freeze for BackupRawKVWriter","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Freeze for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for DecoderReader&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for EncoderWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for CharacterSet","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]}];
implementors["batch_system"] = [{"text":"impl&lt;N, C&gt; Freeze for FsmTypes&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; Freeze for NormalScheduler&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; Freeze for ControlScheduler&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; Freeze for Batch&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C, Handler&gt; !Freeze for Poller&lt;N, C, Handler&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReschedulePolicy","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; !Freeze for BatchSystem&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; !Freeze for FsmState&lt;N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Owner&gt; !Freeze for BasicMailbox&lt;Owner&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Owner, Scheduler&gt; !Freeze for Mailbox&lt;Owner, Scheduler&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CheckDoResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C, Ns, Cs&gt; !Freeze for Router&lt;N, C, Ns, Cs&gt;","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Freeze for BlockBuffer&lt;BlockSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl Freeze for BStr","synthetic":true,"types":[]},{"text":"impl Freeze for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Freeze for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Error","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;'a&gt; Freeze for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BytesMut","synthetic":true,"types":[]},{"text":"impl !Freeze for Bytes","synthetic":true,"types":[]}];
implementors["bzip2_sys"] = [{"text":"impl Freeze for bz_stream","synthetic":true,"types":[]}];
implementors["c2_chacha"] = [{"text":"impl Freeze for ChaCha","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for State&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cargo_metadata"] = [{"text":"impl Freeze for DependencyKind","synthetic":true,"types":[]},{"text":"impl Freeze for Dependency","synthetic":true,"types":[]},{"text":"impl Freeze for DiagnosticCode","synthetic":true,"types":[]},{"text":"impl Freeze for DiagnosticSpanLine","synthetic":true,"types":[]},{"text":"impl Freeze for DiagnosticSpanMacroExpansion","synthetic":true,"types":[]},{"text":"impl Freeze for DiagnosticSpan","synthetic":true,"types":[]},{"text":"impl Freeze for Applicability","synthetic":true,"types":[]},{"text":"impl Freeze for DiagnosticLevel","synthetic":true,"types":[]},{"text":"impl Freeze for Diagnostic","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ArtifactProfile","synthetic":true,"types":[]},{"text":"impl Freeze for Artifact","synthetic":true,"types":[]},{"text":"impl Freeze for CompilerMessage","synthetic":true,"types":[]},{"text":"impl Freeze for BuildScript","synthetic":true,"types":[]},{"text":"impl Freeze for Message","synthetic":true,"types":[]},{"text":"impl Freeze for PackageId","synthetic":true,"types":[]},{"text":"impl Freeze for Metadata","synthetic":true,"types":[]},{"text":"impl Freeze for Resolve","synthetic":true,"types":[]},{"text":"impl Freeze for Node","synthetic":true,"types":[]},{"text":"impl Freeze for NodeDep","synthetic":true,"types":[]},{"text":"impl Freeze for DepKindInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Package","synthetic":true,"types":[]},{"text":"impl Freeze for Source","synthetic":true,"types":[]},{"text":"impl Freeze for Target","synthetic":true,"types":[]},{"text":"impl Freeze for CargoOpt","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataCommand","synthetic":true,"types":[]}];
implementors["cdc"] = [{"text":"impl Freeze for DownstreamID","synthetic":true,"types":[]},{"text":"impl Freeze for DownstreamState","synthetic":true,"types":[]},{"text":"impl !Freeze for Downstream","synthetic":true,"types":[]},{"text":"impl Freeze for Pending","synthetic":true,"types":[]},{"text":"impl Freeze for PendingLock","synthetic":true,"types":[]},{"text":"impl !Freeze for Delegate","synthetic":true,"types":[]},{"text":"impl !Freeze for Deregister","synthetic":true,"types":[]},{"text":"impl Freeze for OldValueCache","synthetic":true,"types":[]},{"text":"impl !Freeze for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Endpoint&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Initializer","synthetic":true,"types":[]},{"text":"impl Freeze for CdcTxnExtraScheduler","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for CDC_RESOLVED_TS_GAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for CDC_SCAN_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for CDC_MIN_RESOLVED_TS_REGION","synthetic":true,"types":[]},{"text":"impl Freeze for CDC_MIN_RESOLVED_TS","synthetic":true,"types":[]},{"text":"impl Freeze for CDC_PENDING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for CDC_CAPTURED_REGION_COUNT","synthetic":true,"types":[]},{"text":"impl Freeze for CDC_OLD_VALUE_CACHE_MISS","synthetic":true,"types":[]},{"text":"impl Freeze for CDC_OLD_VALUE_CACHE_ACCESS","synthetic":true,"types":[]},{"text":"impl Freeze for CDC_OLD_VALUE_CACHE_BYTES","synthetic":true,"types":[]},{"text":"impl Freeze for CDC_OLD_VALUE_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl Freeze for CDC_OLD_VALUE_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl !Freeze for CdcObserver","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for OldValueReader&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ConnID","synthetic":true,"types":[]},{"text":"impl !Freeze for CdcEvent","synthetic":true,"types":[]},{"text":"impl Freeze for EventBatcher","synthetic":true,"types":[]},{"text":"impl Freeze for FeatureGate","synthetic":true,"types":[]},{"text":"impl Freeze for Conn","synthetic":true,"types":[]},{"text":"impl Freeze for Service","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Freeze for FixedOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDate","synthetic":true,"types":[]},{"text":"impl Freeze for IsoWeek","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveTime","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Freeze for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SecondsFormat","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Freeze for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Pad","synthetic":true,"types":[]},{"text":"impl Freeze for Numeric","synthetic":true,"types":[]},{"text":"impl Freeze for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Freeze for Fixed","synthetic":true,"types":[]},{"text":"impl Freeze for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Weekday","synthetic":true,"types":[]},{"text":"impl Freeze for ParseWeekdayError","synthetic":true,"types":[]}];
implementors["chrono_tz"] = [{"text":"impl Freeze for Tz","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl Freeze for AppSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Freeze for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ArgSettings","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Shell","synthetic":true,"types":[]}];
implementors["cmd"] = [{"text":"impl&lt;ER&gt; !Freeze for TiKVServer&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; !Freeze for TiKVEngines&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; !Freeze for Servers&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EngineMetricsManager&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["codec"] = [{"text":"impl Freeze for MemComparableByteCodec","synthetic":true,"types":[]},{"text":"impl Freeze for AscendingMemComparableCodecHelper","synthetic":true,"types":[]},{"text":"impl Freeze for DescendingMemComparableCodecHelper","synthetic":true,"types":[]},{"text":"impl Freeze for CompactByteCodec","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorInner","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for NumberCodec","synthetic":true,"types":[]}];
implementors["concurrency_manager"] = [{"text":"impl !Freeze for KeyHandle","synthetic":true,"types":[]},{"text":"impl Freeze for KeyHandleGuard","synthetic":true,"types":[]},{"text":"impl Freeze for LockTable","synthetic":true,"types":[]},{"text":"impl Freeze for ConcurrencyManager","synthetic":true,"types":[]}];
implementors["configuration"] = [{"text":"impl Freeze for ConfigValue","synthetic":true,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl !Freeze for LazyBool","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Freeze for Hasher","synthetic":true,"types":[]}];
implementors["crc64fast"] = [{"text":"impl Freeze for Digest","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl Freeze for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TrySelectError","synthetic":true,"types":[]},{"text":"impl Freeze for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TryReadyError","synthetic":true,"types":[]},{"text":"impl Freeze for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !Freeze for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Stealer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; Freeze for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Atomic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Owned&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; Freeze for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Collector","synthetic":true,"types":[]},{"text":"impl Freeze for LocalHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !Freeze for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SegQueue&lt;T&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_skiplist"] = [{"text":"impl&lt;K, V&gt; !Freeze for SkipList&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, K, V&gt; Freeze for Entry&lt;'a, 'g, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for RefEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, K, V&gt; Freeze for Iter&lt;'a, 'g, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for RefIter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, Q:&nbsp;?Sized, R, K, V&gt; Freeze for Range&lt;'a, 'g, Q, R, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q:&nbsp;?Sized, R, K, V&gt; Freeze for RefRange&lt;'a, Q, R, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Freeze for SkipMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q:&nbsp;?Sized, R, K, V&gt; Freeze for Range&lt;'a, Q, R, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SkipSet&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q:&nbsp;?Sized, R, T&gt; Freeze for Range&lt;'a, Q, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; !Freeze for AtomicCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Backoff","synthetic":true,"types":[]},{"text":"impl Freeze for Parker","synthetic":true,"types":[]},{"text":"impl Freeze for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ShardedLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Freeze for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Freeze for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; Freeze for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Freeze for MacError","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for Output&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;M as Mac&gt;::OutputSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["darling_core"] = [{"text":"impl&lt;V, F&gt; Freeze for Data&lt;V, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Fields&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl&lt;T, L, C&gt; Freeze for GenericParam&lt;T, L, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, W&gt; Freeze for Generics&lt;P, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl Freeze for Purpose","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for IdentString","synthetic":true,"types":[]},{"text":"impl Freeze for Ignored","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Override&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PathList","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; Freeze for WithOriginal&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SpannedValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Flag","synthetic":true,"types":[]}];
implementors["dashmap"] = [{"text":"impl&lt;K, V, S&gt; Freeze for OwningIter&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S, M&gt; Freeze for Iter&lt;'a, K, V, S, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S, M&gt; Freeze for IterMut&lt;'a, K, V, S, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, S&gt; Freeze for OwningIter&lt;K, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, S, M&gt; Freeze for Iter&lt;'a, K, S, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RefMulti&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RefMutMulti&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Ref&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RefMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for ReadOnlyView&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, S&gt; Freeze for DashSet&lt;K, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, S&gt; Freeze for RefMulti&lt;'a, K, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, S&gt; Freeze for Ref&lt;'a, K, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for DashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["debugid"] = [{"text":"impl Freeze for ParseDebugIdError","synthetic":true,"types":[]},{"text":"impl Freeze for DebugId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BreakpadFormat&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ParseCodeIdError","synthetic":true,"types":[]},{"text":"impl Freeze for CodeId","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl Freeze for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Freeze for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["encoding_rs"] = [{"text":"impl Freeze for Latin1Bidi","synthetic":true,"types":[]},{"text":"impl Freeze for Encoding","synthetic":true,"types":[]},{"text":"impl Freeze for CoderResult","synthetic":true,"types":[]},{"text":"impl Freeze for DecoderResult","synthetic":true,"types":[]},{"text":"impl Freeze for Decoder","synthetic":true,"types":[]},{"text":"impl Freeze for EncoderResult","synthetic":true,"types":[]},{"text":"impl Freeze for Encoder","synthetic":true,"types":[]}];
implementors["encryption"] = [{"text":"impl Freeze for EncryptionConfig","synthetic":true,"types":[]},{"text":"impl Freeze for FileConfig","synthetic":true,"types":[]},{"text":"impl Freeze for KmsConfig","synthetic":true,"types":[]},{"text":"impl Freeze for MasterKeyConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Iv","synthetic":true,"types":[]},{"text":"impl Freeze for AesGcmTag","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Freeze for AesGcmCrypter&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PlainKey","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for Header","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EncryptedFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for LogRecord","synthetic":true,"types":[]},{"text":"impl !Freeze for FileDictionaryFile","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EncrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DecrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for EncrypterWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Dicts","synthetic":true,"types":[]},{"text":"impl Freeze for DataKeyManager","synthetic":true,"types":[]},{"text":"impl Freeze for DataKeyManagerArgs","synthetic":true,"types":[]},{"text":"impl !Freeze for LoadDicts","synthetic":true,"types":[]},{"text":"impl Freeze for MemAesGcmBackend","synthetic":true,"types":[]},{"text":"impl Freeze for FileBackend","synthetic":true,"types":[]},{"text":"impl Freeze for KeyId","synthetic":true,"types":[]},{"text":"impl Freeze for AwsKms","synthetic":true,"types":[]},{"text":"impl Freeze for KmsClientDebug","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for EncryptedKey","synthetic":true,"types":[]},{"text":"impl Freeze for DataKeyPair","synthetic":true,"types":[]},{"text":"impl !Freeze for KmsBackend","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataKey","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataMethod","synthetic":true,"types":[]},{"text":"impl Freeze for PlaintextBackend","synthetic":true,"types":[]},{"text":"impl Freeze for ENCRYPTION_DATA_KEY_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for ENCRYPTION_FILE_NUM_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for ENCRYPTION_INITIALIZED_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for ENCRYPT_DECRPTION_FILE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for ENCRYPTION_FILE_SIZE_GAUGE","synthetic":true,"types":[]}];
implementors["engine_panic"] = [{"text":"impl Freeze for PanicColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl Freeze for PanicCompactedEvent","synthetic":true,"types":[]},{"text":"impl Freeze for PanicDBOptions","synthetic":true,"types":[]},{"text":"impl Freeze for PanicTitanDBOptions","synthetic":true,"types":[]},{"text":"impl Freeze for PanicDBVector","synthetic":true,"types":[]},{"text":"impl Freeze for PanicEngine","synthetic":true,"types":[]},{"text":"impl Freeze for PanicEngineIterator","synthetic":true,"types":[]},{"text":"impl Freeze for PanicIngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl Freeze for PanicSnapshot","synthetic":true,"types":[]},{"text":"impl Freeze for PanicSnapshotIterator","synthetic":true,"types":[]},{"text":"impl Freeze for PanicSstReader","synthetic":true,"types":[]},{"text":"impl Freeze for PanicSstReaderIterator","synthetic":true,"types":[]},{"text":"impl Freeze for PanicSstWriter","synthetic":true,"types":[]},{"text":"impl Freeze for PanicSstWriterBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for PanicExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl Freeze for PanicExternalSstFileReader","synthetic":true,"types":[]},{"text":"impl Freeze for PanicTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl Freeze for PanicTablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl Freeze for PanicTablePropertiesKey","synthetic":true,"types":[]},{"text":"impl Freeze for PanicTableProperties","synthetic":true,"types":[]},{"text":"impl Freeze for PanicUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Freeze for PanicWriteBatch","synthetic":true,"types":[]},{"text":"impl Freeze for PanicPerfContext","synthetic":true,"types":[]}];
implementors["engine_rocks"] = [{"text":"impl Freeze for RocksColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl Freeze for RocksDBOptions","synthetic":true,"types":[]},{"text":"impl Freeze for RocksTitanDBOptions","synthetic":true,"types":[]},{"text":"impl Freeze for RocksDBVector","synthetic":true,"types":[]},{"text":"impl Freeze for RocksEngine","synthetic":true,"types":[]},{"text":"impl Freeze for RocksIngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl Freeze for RocksdbLogger","synthetic":true,"types":[]},{"text":"impl Freeze for RaftDBLogger","synthetic":true,"types":[]},{"text":"impl Freeze for RocksSnapshot","synthetic":true,"types":[]},{"text":"impl Freeze for RocksSstReader","synthetic":true,"types":[]},{"text":"impl Freeze for RocksSstIterator","synthetic":true,"types":[]},{"text":"impl Freeze for RocksSstWriterBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RocksSstWriter","synthetic":true,"types":[]},{"text":"impl Freeze for RocksExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RocksSstPartitionerFactory&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for RocksSstPartitioner&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RocksTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl Freeze for RocksTablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl Freeze for RocksTablePropertiesKey","synthetic":true,"types":[]},{"text":"impl Freeze for RocksTableProperties","synthetic":true,"types":[]},{"text":"impl Freeze for RocksUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Freeze for RocksUserCollectedPropertiesNoRc","synthetic":true,"types":[]},{"text":"impl Freeze for RocksWriteBatch","synthetic":true,"types":[]},{"text":"impl Freeze for RocksWriteBatchVec","synthetic":true,"types":[]},{"text":"impl Freeze for RocksMvccProperties","synthetic":true,"types":[]},{"text":"impl Freeze for RocksPerfContext","synthetic":true,"types":[]},{"text":"impl Freeze for PerfContextStatistics","synthetic":true,"types":[]},{"text":"impl !Freeze for PerfContextTimeDurationInner","synthetic":true,"types":[]},{"text":"impl Freeze for PerfContextTimeDurationDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for PerfContextTimeDuration","synthetic":true,"types":[]},{"text":"impl Freeze for PerfContextType","synthetic":true,"types":[]},{"text":"impl Freeze for APPLY_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for APPLY_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for RocksEngineIterator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RocksSeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RocksReadOptions","synthetic":true,"types":[]},{"text":"impl Freeze for RocksWriteOptions","synthetic":true,"types":[]},{"text":"impl Freeze for TsFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RocksCFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSuffixSliceTransform","synthetic":true,"types":[]},{"text":"impl Freeze for FixedPrefixSliceTransform","synthetic":true,"types":[]},{"text":"impl Freeze for NoopSliceTransform","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RocksCompactionJobInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RocksCompactedEvent","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionListener","synthetic":true,"types":[]},{"text":"impl Freeze for SizeProperties","synthetic":true,"types":[]},{"text":"impl Freeze for UserProperties","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UserCollectedPropertiesDecoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RangeOffsetKind","synthetic":true,"types":[]},{"text":"impl Freeze for RangeOffsets","synthetic":true,"types":[]},{"text":"impl Freeze for RangeProperties","synthetic":true,"types":[]},{"text":"impl Freeze for RangePropertiesCollector","synthetic":true,"types":[]},{"text":"impl Freeze for RangePropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl Freeze for MvccPropertiesCollector","synthetic":true,"types":[]},{"text":"impl Freeze for MvccPropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl !Freeze for EngineTickerMetricsInner","synthetic":true,"types":[]},{"text":"impl Freeze for EngineTickerMetricsDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for EngineTickerMetrics2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for EngineTickerMetrics2Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for EngineTickerMetrics","synthetic":true,"types":[]},{"text":"impl !Freeze for SimpleEngineTickerMetricsInner","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleEngineTickerMetricsDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleEngineTickerMetrics","synthetic":true,"types":[]},{"text":"impl Freeze for TickerName","synthetic":true,"types":[]},{"text":"impl Freeze for TickerEnum","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_SIZE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOCK_CACHE_USAGE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_CACHE_USAGE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_MEMORY_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_ESTIMATE_NUM_KEYS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_PENDING_COMPACTION_BYTES_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_COMPRESSION_RATIO_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_NUM_FILES_AT_LEVEL_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_NUM_SNAPSHOTS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_OLDEST_SNAPSHOT_DURATION_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_WRITE_STALL_REASON_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_TITANDB_NUM_BLOB_FILES_AT_LEVEL_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_TITANDB_LIVE_BLOB_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_TITANDB_NUM_LIVE_BLOB_FILE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_TITANDB_NUM_OBSOLETE_BLOB_FILE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_TITANDB_LIVE_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_TITANDB_OBSOLETE_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_TITANDB_BLOB_FILE_DISCARDABLE_RATIO_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_CACHE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_CACHE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_MEMTABLE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_MEMTABLE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_GET_SERVED_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_GET_SERVED","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_WRITE_SERVED_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_WRITE_SERVED","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOOM_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOOM_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_FLOW","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_STALL_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_STALL_MICROS","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_COMPACTION_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_COMPACTION_FLOW","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_COMPACTION_DROP_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_COMPACTION_DROP","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_COMPACTION_DURATIONS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_COMPACTION_NUM_CORRUPT_KEYS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_COMPACTION_REASON_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_LOCATE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_LOCATE","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_FILE_STATUS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_FILE_STATUS","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_READ_AMP_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_READ_AMP_FLOW","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_NO_ITERATORS","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_WAL_FILE_SYNCED_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_WAL_FILE_SYNCED","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_EVENT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_NUM_IMMUTABLE_MEM_TABLE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_LOCATE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_LOCATE","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_FLOW","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_GC_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_GC_FLOW","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_GC_FILE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_GC_FILE","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_GC_ACTION_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_GC_ACTION","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_FILE_SYNCED_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_FILE_SYNCED","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_CACHE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_CACHE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_GET_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_WRITE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_COMPACTION_TIME_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_TABLE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_COMPACTION_OUTFILE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_MANIFEST_FILE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_WAL_FILE_SYNC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_STALL_L0_SLOWDOWN_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_STALL_MEMTABLE_COMPACTION_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_STALL_L0_NUM_FILES_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_HARD_RATE_LIMIT_DELAY_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_SOFT_RATE_LIMIT_DELAY_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_NUM_FILES_IN_SINGLE_COMPACTION_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_SEEK_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_WRITE_STALL_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_SST_READ_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_NUM_SUBCOMPACTION_SCHEDULED_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BYTES_PER_READ_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BYTES_PER_WRITE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BYTES_COMPRESSED_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BYTES_DECOMPRESSED_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_COMPRESSION_TIMES_NANOS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_DECOMPRESSION_TIMES_NANOS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_WRITE_WAL_TIME_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_KEY_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_VALUE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_GET_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_SEEK_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_NEXT_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_PREV_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_FILE_WRITE_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_FILE_READ_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_FILE_SYNC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_BLOB_GC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_GC_INPUT_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_GC_OUTPUT_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_ENGINE_ITER_TOUCH_BLOB_FILE_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for RocksEventListener","synthetic":true,"types":[]},{"text":"impl Freeze for LogLevel","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionType","synthetic":true,"types":[]},{"text":"impl Freeze for BlobRunMode","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WrappedEncryptionKeyManager&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WrappedFileSystemInspector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["engine_test"] = [{"text":"impl Freeze for CryptoOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnFamilyOptions","synthetic":true,"types":[]}];
implementors["engine_traits"] = [{"text":"impl Freeze for EngineFileSystemInspector","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for SstCompressionType","synthetic":true,"types":[]},{"text":"impl Freeze for FileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for EncryptionMethod","synthetic":true,"types":[]},{"text":"impl Freeze for IndexHandle","synthetic":true,"types":[]},{"text":"impl Freeze for IndexHandles","synthetic":true,"types":[]},{"text":"impl Freeze for MvccProperties","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SstPartitionerRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SstPartitionerResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SstPartitionerContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PerfLevel","synthetic":true,"types":[]},{"text":"impl Freeze for PerfContextKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, R&gt; Freeze for Engines&lt;K, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ReadOptions","synthetic":true,"types":[]},{"text":"impl Freeze for WriteOptions","synthetic":true,"types":[]},{"text":"impl Freeze for SeekMode","synthetic":true,"types":[]},{"text":"impl Freeze for IterOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Range&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CacheStats","synthetic":true,"types":[]}];
implementors["error_code"] = [{"text":"impl Freeze for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Freeze for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Freeze for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Freeze for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Freeze for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Freeze for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Freeze for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Freeze for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Freeze for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorCode","synthetic":true,"types":[]}];
implementors["external_storage"] = [{"text":"impl Freeze for LocalStorage","synthetic":true,"types":[]},{"text":"impl Freeze for NoopStorage","synthetic":true,"types":[]},{"text":"impl !Freeze for S3Storage","synthetic":true,"types":[]},{"text":"impl&lt;'client&gt; Freeze for S3Uploader&lt;'client&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for GCSStorage","synthetic":true,"types":[]},{"text":"impl !Freeze for RequestError","synthetic":true,"types":[]},{"text":"impl Freeze for EXT_STORAGE_CREATE_HISTOGRAM","synthetic":true,"types":[]}];
implementors["fail"] = [{"text":"impl&lt;'a&gt; Freeze for FailScenario&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl !Freeze for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Freeze for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Freeze for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["farmhash"] = [{"text":"impl Freeze for FarmHasher","synthetic":true,"types":[]}];
implementors["file_system"] = [{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl Freeze for OpenOptions","synthetic":true,"types":[]},{"text":"impl Freeze for IOLatencyVec","synthetic":true,"types":[]},{"text":"impl Freeze for IOLatencyVec2","synthetic":true,"types":[]},{"text":"impl Freeze for IOBytesVec","synthetic":true,"types":[]},{"text":"impl Freeze for IOBytesVec2","synthetic":true,"types":[]},{"text":"impl Freeze for IOType","synthetic":true,"types":[]},{"text":"impl Freeze for IOOp","synthetic":true,"types":[]},{"text":"impl Freeze for IO_BYTES_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for IO_LATENCY_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for BytesFetcher","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsManager","synthetic":true,"types":[]},{"text":"impl !Freeze for IORateLimiterStatistics","synthetic":true,"types":[]},{"text":"impl Freeze for IORateLimiter","synthetic":true,"types":[]},{"text":"impl Freeze for IO_RATE_LIMITER","synthetic":true,"types":[]},{"text":"impl Freeze for WithIORateLimit","synthetic":true,"types":[]},{"text":"impl Freeze for IOOp","synthetic":true,"types":[]},{"text":"impl Freeze for IOType","synthetic":true,"types":[]},{"text":"impl Freeze for WithIOType","synthetic":true,"types":[]},{"text":"impl Freeze for IOBytes","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Sha256Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl Freeze for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GzHeader","synthetic":true,"types":[]},{"text":"impl Freeze for GzBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Compress","synthetic":true,"types":[]},{"text":"impl Freeze for Decompress","synthetic":true,"types":[]},{"text":"impl Freeze for FlushCompress","synthetic":true,"types":[]},{"text":"impl Freeze for FlushDecompress","synthetic":true,"types":[]},{"text":"impl Freeze for DecompressError","synthetic":true,"types":[]},{"text":"impl Freeze for CompressError","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Compression","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Freeze for FnvHasher","synthetic":true,"types":[]}];
implementors["foreign_types_shared"] = [{"text":"impl !Freeze for Opaque","synthetic":true,"types":[]}];
implementors["fs2"] = [{"text":"impl Freeze for FsStats","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl !Freeze for LocalPool","synthetic":true,"types":[]},{"text":"impl Freeze for LocalSpawner","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPool","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPoolBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Enter","synthetic":true,"types":[]},{"text":"impl Freeze for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl Freeze for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_timer"] = [{"text":"impl Freeze for Delay","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; Freeze for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RemoteHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Remote&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; Freeze for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; Freeze for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Freeze for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Freeze for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Freeze for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Freeze for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Freeze for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Freeze for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Freeze for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Freeze for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for JoinAll&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for SelectAll&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Freeze for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Freeze for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Freeze for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Freeze for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for TryJoinAll&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for SelectOk&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AbortRegistration","synthetic":true,"types":[]},{"text":"impl Freeze for AbortHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Freeze for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Freeze for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for Next&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for SelectNextSome&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; Freeze for Peek&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; Freeze for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; Freeze for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !Freeze for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; Freeze for SplitSink&lt;S, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Freeze for ReuniteError&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; Freeze for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; Freeze for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Freeze for TryNext&lt;'a, St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Freeze for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Freeze for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Freeze for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !Freeze for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Freeze for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; Freeze for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Freeze for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Freeze for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Freeze for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; Freeze for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !Freeze for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !Freeze for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Close&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Drain&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; Freeze for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Flush&lt;'a, Si, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; Freeze for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; Freeze for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Freeze for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; Freeze for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; Freeze for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; Freeze for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; Freeze for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ex&gt; Freeze for Executor01As03&lt;Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Compat01As03&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, SinkItem&gt; !Freeze for Compat01As03Sink&lt;S, SinkItem&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Compat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Freeze for CompatSink&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Close&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Freeze for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Freeze for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for FillBuf&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Flush&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; Freeze for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for Read&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadVectored&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadExact&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadLine&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadToEnd&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadToString&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReadUntil&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for Seek&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for Write&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for WriteVectored&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Freeze for WriteAll&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized, U:&nbsp;?Sized&gt; Freeze for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]}];
implementors["fuzz"] = [{"text":"impl Freeze for WORKSPACE_ROOT","synthetic":true,"types":[]},{"text":"impl Freeze for FUZZ_ROOT","synthetic":true,"types":[]},{"text":"impl Freeze for FUZZ_TARGETS","synthetic":true,"types":[]},{"text":"impl Freeze for SEED_ROOT","synthetic":true,"types":[]},{"text":"impl Freeze for Cli","synthetic":true,"types":[]},{"text":"impl Freeze for Fuzzer","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl Freeze for FxHasher","synthetic":true,"types":[]},{"text":"impl Freeze for FxHasher64","synthetic":true,"types":[]},{"text":"impl Freeze for FxHasher32","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Freeze for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for GenericArray&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["grpcio"] = [{"text":"impl Freeze for AuthContext","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AuthPropertyIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AuthProperty&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GrpcSlice","synthetic":true,"types":[]},{"text":"impl Freeze for CallOption","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ClientUnaryReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ClientCStreamReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Req&gt; Freeze for StreamingCallSink&lt;Req&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Resp&gt; Freeze for ClientSStreamReceiver&lt;Resp&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Resp&gt; Freeze for ClientDuplexReceiver&lt;Resp&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Deadline","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RequestStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UnarySinkResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnarySink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClientStreamingSinkResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ClientStreamingSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ServerStreamingSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ServerStreamingSinkFailure","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DuplexSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DuplexSinkFailure","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RpcContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RpcStatusCode","synthetic":true,"types":[]},{"text":"impl Freeze for MethodType","synthetic":true,"types":[]},{"text":"impl&lt;Req, Resp&gt; Freeze for Method&lt;Req, Resp&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RpcStatus","synthetic":true,"types":[]},{"text":"impl Freeze for WriteFlags","synthetic":true,"types":[]},{"text":"impl Freeze for OptTarget","synthetic":true,"types":[]},{"text":"impl Freeze for LbPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for ChannelBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Channel","synthetic":true,"types":[]},{"text":"impl Freeze for Client","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Marshaller&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for EnvBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Environment","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Metadata","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MetadataIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ResourceQuota","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateRequestType","synthetic":true,"types":[]},{"text":"impl Freeze for ServerCredentialsBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for ServerCredentials","synthetic":true,"types":[]},{"text":"impl Freeze for ChannelCredentialsBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for ChannelCredentials","synthetic":true,"types":[]},{"text":"impl Freeze for ServiceBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for CheckResult","synthetic":true,"types":[]},{"text":"impl Freeze for Service","synthetic":true,"types":[]},{"text":"impl Freeze for ServerBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for ShutdownFuture","synthetic":true,"types":[]},{"text":"impl Freeze for Server","synthetic":true,"types":[]}];
implementors["grpcio_sys"] = [{"text":"impl Freeze for grpc_compression_algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_compression_level","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_compression_options","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_compression_options_grpc_compression_options_default_level","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_compression_options_grpc_compression_options_default_algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_slice_refcount","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_slice","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_slice_grpc_slice_data","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_slice_grpc_slice_data_grpc_slice_refcounted","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_slice_grpc_slice_data_grpc_slice_inlined","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_slice_buffer","synthetic":true,"types":[]},{"text":"impl Freeze for gpr_clock_type","synthetic":true,"types":[]},{"text":"impl Freeze for gpr_timespec","synthetic":true,"types":[]},{"text":"impl Freeze for gpr_event","synthetic":true,"types":[]},{"text":"impl Freeze for gpr_refcount","synthetic":true,"types":[]},{"text":"impl Freeze for gpr_stats_counter","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_slice_ref_whom","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_byte_buffer_type","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_byte_buffer","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_byte_buffer_grpc_byte_buffer_data","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_byte_buffer_grpc_byte_buffer_data__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_byte_buffer_grpc_byte_buffer_data_grpc_compressed_buffer","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_completion_queue","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_alarm","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_channel","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_server","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_call","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_socket_mutator","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_socket_factory","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_arg_type","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_arg_pointer_vtable","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_arg","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_arg_grpc_arg_value","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_arg_grpc_arg_value_grpc_arg_pointer","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_channel_args","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_call_error","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_metadata","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_metadata__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_completion_type","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_event","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_metadata_array","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_call_details","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op_type","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op_grpc_op_data","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op_grpc_op_data__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op_grpc_op_data_grpc_op_send_initial_metadata","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op_grpc_op_data_grpc_op_send_initial_metadata_grpc_op_send_initial_metadata_maybe_compression_level","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op_grpc_op_data_grpc_op_send_message","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op_grpc_op_data_grpc_op_send_status_from_server","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op_grpc_op_data_grpc_op_recv_initial_metadata","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op_grpc_op_data_grpc_op_recv_message","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op_grpc_op_data_grpc_op_recv_status_on_client","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_op_grpc_op_data_grpc_op_recv_close_on_server","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_channel_info","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_resource_quota","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_cq_polling_type","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_cq_completion_type","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_experimental_completion_queue_functor","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_completion_queue_attributes","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_completion_queue_factory","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_connectivity_state","synthetic":true,"types":[]},{"text":"impl Freeze for census_context","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_server_register_method_payload_handling","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_ssl_roots_override_result","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_ssl_certificate_config_reload_status","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_ssl_client_certificate_request_type","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_security_level","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_tls_server_verification_option","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_local_connect_type","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_tls_version","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_auth_context","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_auth_property_iterator","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_auth_property","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_ssl_session_cache","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_call_credentials","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_channel_credentials","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_ssl_pem_key_cert_pair","synthetic":true,"types":[]},{"text":"impl Freeze for verify_peer_options","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_ssl_verify_peer_options","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_sts_credentials_options","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_auth_metadata_context","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_metadata_credentials_plugin","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_server_credentials","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_ssl_server_certificate_config","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_ssl_server_credentials_options","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_auth_metadata_processor","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_alts_credentials_options","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_tls_error_details","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_tls_key_materials_config","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_tls_credential_reload_config","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_tls_server_authorization_check_config","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_tls_credentials_options","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_tls_credential_reload_arg","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_tls_server_authorization_check_arg","synthetic":true,"types":[]},{"text":"impl Freeze for gpr_log_severity","synthetic":true,"types":[]},{"text":"impl Freeze for gpr_log_func_args","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_byte_buffer_reader","synthetic":true,"types":[]},{"text":"impl Freeze for grpc_byte_buffer_reader_grpc_byte_buffer_reader_current","synthetic":true,"types":[]},{"text":"impl Freeze for grpcwrap_batch_context","synthetic":true,"types":[]},{"text":"impl Freeze for grpcwrap_batch_context__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Freeze for grpcwrap_batch_context__bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl Freeze for grpcwrap_request_call_context","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Reason","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ReadySendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&nbsp;=&nbsp;Bytes&gt; !Freeze for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Freeze for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl !Freeze for PushPromise","synthetic":true,"types":[]},{"text":"impl Freeze for PushPromises","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&nbsp;=&nbsp;Bytes&gt; !Freeze for Handshake&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !Freeze for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SendResponse&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SendPushedResponse&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SendStream&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StreamId","synthetic":true,"types":[]},{"text":"impl Freeze for RecvStream","synthetic":true,"types":[]},{"text":"impl Freeze for FlowControl","synthetic":true,"types":[]},{"text":"impl Freeze for PingPong","synthetic":true,"types":[]},{"text":"impl Freeze for Ping","synthetic":true,"types":[]},{"text":"impl Freeze for Pong","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Freeze for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Freeze for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl&lt;T&gt; Freeze for HeaderMap&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Keys&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Values&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValuesMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for GetAll&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Freeze for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Freeze for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for HeaderName","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl !Freeze for HeaderValue","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl Freeze for ToStrError","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Request&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Parts","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Response&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Parts","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for StatusCode","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl !Freeze for Authority","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl !Freeze for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Scheme","synthetic":true,"types":[]},{"text":"impl !Freeze for Uri","synthetic":true,"types":[]},{"text":"impl !Freeze for Parts","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidUri","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Extensions","synthetic":true,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for Data&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for Trailers&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Freeze for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Freeze for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Header&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl !Freeze for Body","synthetic":true,"types":[]},{"text":"impl Freeze for Sender","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Freeze for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Parts&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Name","synthetic":true,"types":[]},{"text":"impl Freeze for GaiResolver","synthetic":true,"types":[]},{"text":"impl Freeze for GaiAddrs","synthetic":true,"types":[]},{"text":"impl Freeze for GaiFuture","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidNameError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for HttpInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Connected","synthetic":true,"types":[]},{"text":"impl&lt;C, B, T&gt; Freeze for Connect&lt;C, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; Freeze for Client&lt;C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for AddrIncoming","synthetic":true,"types":[]},{"text":"impl !Freeze for AddrStream","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Http&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F, E&gt; Freeze for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, E&nbsp;=&nbsp;Exec&gt; !Freeze for Connection&lt;T, S, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; !Freeze for Parts&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; Freeze for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for Builder&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Upgraded","synthetic":true,"types":[]},{"text":"impl Freeze for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Parts&lt;T&gt;","synthetic":true,"types":[]}];
implementors["hyper_openssl"] = [{"text":"impl&lt;T&gt; Freeze for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T&gt; Freeze for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HttpsConnecting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ident_case"] = [{"text":"impl Freeze for RenameRule","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;T, S&gt; Freeze for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Freeze for SymmetricDifference&lt;'a, T, S1, S2&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]}];
implementors["inferno"] = [{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for Folder","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for Folder","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for Folder","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for Folder","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for Folder","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for FuncFrameAttrsMap","synthetic":true,"types":[]},{"text":"impl Freeze for PaletteMap","synthetic":true,"types":[]},{"text":"impl Freeze for BackgroundColor","synthetic":true,"types":[]},{"text":"impl Freeze for Palette","synthetic":true,"types":[]},{"text":"impl Freeze for BasicPalette","synthetic":true,"types":[]},{"text":"impl Freeze for MultiPalette","synthetic":true,"types":[]},{"text":"impl Freeze for SearchColor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Options&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Direction","synthetic":true,"types":[]},{"text":"impl Freeze for TextTruncateDirection","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl Freeze for IoVec","synthetic":true,"types":[]}];
implementors["ipnet"] = [{"text":"impl Freeze for IpAddrRange","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4AddrRange","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6AddrRange","synthetic":true,"types":[]},{"text":"impl Freeze for IpNet","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4Net","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6Net","synthetic":true,"types":[]},{"text":"impl Freeze for PrefixLenError","synthetic":true,"types":[]},{"text":"impl Freeze for IpSubnets","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4Subnets","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6Subnets","synthetic":true,"types":[]},{"text":"impl Freeze for AddrParseError","synthetic":true,"types":[]}];
implementors["ipnetwork"] = [{"text":"impl Freeze for IpNetworkError","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4Network","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6Network","synthetic":true,"types":[]},{"text":"impl Freeze for IpNetwork","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkSize","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, Pred&gt; Freeze for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Freeze for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MultiProduct&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Freeze for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !Freeze for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Freeze for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for Chunk&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !Freeze for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Freeze for Group&lt;'a, K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Freeze for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Freeze for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Freeze for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["keys"] = [{"text":"impl Freeze for WrongPrefix","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["kvproto"] = [{"text":"impl Freeze for DebugClient","synthetic":true,"types":[]},{"text":"impl !Freeze for Header","synthetic":true,"types":[]},{"text":"impl !Freeze for DuplicateRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for Compatibility","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for TxnInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for TxnStatus","synthetic":true,"types":[]},{"text":"impl !Freeze for Event","synthetic":true,"types":[]},{"text":"impl !Freeze for Event_oneof_event","synthetic":true,"types":[]},{"text":"impl !Freeze for EventRow","synthetic":true,"types":[]},{"text":"impl Freeze for EventRowOpType","synthetic":true,"types":[]},{"text":"impl !Freeze for EventEntries","synthetic":true,"types":[]},{"text":"impl !Freeze for EventAdmin","synthetic":true,"types":[]},{"text":"impl !Freeze for EventLongTxn","synthetic":true,"types":[]},{"text":"impl Freeze for EventLogType","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangeDataEvent","synthetic":true,"types":[]},{"text":"impl !Freeze for ResolvedTs","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangeDataRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangeDataRequest_oneof_request","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangeDataRequestRegister","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangeDataRequestNotifyTxnStatus","synthetic":true,"types":[]},{"text":"impl !Freeze for ReplicationStatus","synthetic":true,"types":[]},{"text":"impl !Freeze for DrAutoSync","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionReplicationStatus","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationMode","synthetic":true,"types":[]},{"text":"impl Freeze for DrAutoSyncState","synthetic":true,"types":[]},{"text":"impl Freeze for RegionReplicationState","synthetic":true,"types":[]},{"text":"impl !Freeze for SearchLogRequest","synthetic":true,"types":[]},{"text":"impl Freeze for SearchLogRequestTarget","synthetic":true,"types":[]},{"text":"impl !Freeze for SearchLogResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for LogMessage","synthetic":true,"types":[]},{"text":"impl !Freeze for ServerInfoRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ServerInfoPair","synthetic":true,"types":[]},{"text":"impl !Freeze for ServerInfoItem","synthetic":true,"types":[]},{"text":"impl !Freeze for ServerInfoResponse","synthetic":true,"types":[]},{"text":"impl Freeze for LogLevel","synthetic":true,"types":[]},{"text":"impl Freeze for ServerInfoType","synthetic":true,"types":[]},{"text":"impl Freeze for BackupClient","synthetic":true,"types":[]},{"text":"impl Freeze for EngineClient","synthetic":true,"types":[]},{"text":"impl !Freeze for EncryptionMeta","synthetic":true,"types":[]},{"text":"impl !Freeze for FileInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for FileDictionary","synthetic":true,"types":[]},{"text":"impl !Freeze for DataKey","synthetic":true,"types":[]},{"text":"impl !Freeze for KeyDictionary","synthetic":true,"types":[]},{"text":"impl !Freeze for MasterKey","synthetic":true,"types":[]},{"text":"impl !Freeze for MasterKey_oneof_backend","synthetic":true,"types":[]},{"text":"impl !Freeze for MasterKeyPlaintext","synthetic":true,"types":[]},{"text":"impl !Freeze for MasterKeyFile","synthetic":true,"types":[]},{"text":"impl !Freeze for MasterKeyKms","synthetic":true,"types":[]},{"text":"impl !Freeze for EncryptedContent","synthetic":true,"types":[]},{"text":"impl Freeze for EncryptionMethod","synthetic":true,"types":[]},{"text":"impl !Freeze for WaitForEntriesRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for WaitForEntriesResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for WaitForEntry","synthetic":true,"types":[]},{"text":"impl !Freeze for DeadlockRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for DeadlockResponse","synthetic":true,"types":[]},{"text":"impl Freeze for DeadlockRequestType","synthetic":true,"types":[]},{"text":"impl !Freeze for CommandRequestHeader","synthetic":true,"types":[]},{"text":"impl !Freeze for CommandRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CommandRequestBatch","synthetic":true,"types":[]},{"text":"impl !Freeze for CommandResponseHeader","synthetic":true,"types":[]},{"text":"impl !Freeze for CommandResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CommandResponseBatch","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapshotState","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapshotData","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapshotRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapshotRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapshotDone","synthetic":true,"types":[]},{"text":"impl !Freeze for Cluster","synthetic":true,"types":[]},{"text":"impl !Freeze for StoreLabel","synthetic":true,"types":[]},{"text":"impl !Freeze for Store","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionEpoch","synthetic":true,"types":[]},{"text":"impl !Freeze for Region","synthetic":true,"types":[]},{"text":"impl !Freeze for Peer","synthetic":true,"types":[]},{"text":"impl Freeze for StoreState","synthetic":true,"types":[]},{"text":"impl Freeze for PeerRole","synthetic":true,"types":[]},{"text":"impl !Freeze for Status","synthetic":true,"types":[]},{"text":"impl !Freeze for Version","synthetic":true,"types":[]},{"text":"impl !Freeze for Local","synthetic":true,"types":[]},{"text":"impl !Freeze for Global","synthetic":true,"types":[]},{"text":"impl !Freeze for ConfigKind","synthetic":true,"types":[]},{"text":"impl !Freeze for ConfigKind_oneof_kind","synthetic":true,"types":[]},{"text":"impl !Freeze for ConfigEntry","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalConfig","synthetic":true,"types":[]},{"text":"impl !Freeze for Header","synthetic":true,"types":[]},{"text":"impl !Freeze for CreateRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CreateResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetAllRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetAllResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for UpdateRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for UpdateResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for DeleteRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for DeleteResponse","synthetic":true,"types":[]},{"text":"impl Freeze for StatusCode","synthetic":true,"types":[]},{"text":"impl !Freeze for SpanSet","synthetic":true,"types":[]},{"text":"impl !Freeze for Root","synthetic":true,"types":[]},{"text":"impl !Freeze for Parent","synthetic":true,"types":[]},{"text":"impl !Freeze for Continue","synthetic":true,"types":[]},{"text":"impl !Freeze for Link","synthetic":true,"types":[]},{"text":"impl !Freeze for Link_oneof_link","synthetic":true,"types":[]},{"text":"impl !Freeze for Span","synthetic":true,"types":[]},{"text":"impl !Freeze for GetRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for PutRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for PutResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for DeleteRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for DeleteResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for DeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for DeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for PrewriteRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for PrewriteResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for IngestSstRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for IngestSstResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ReadIndexRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ReadIndexResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for Request","synthetic":true,"types":[]},{"text":"impl !Freeze for Response","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangePeerRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangePeerResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangePeerV2Request","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangePeerV2Response","synthetic":true,"types":[]},{"text":"impl !Freeze for SplitRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SplitResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchSplitRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchSplitResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CompactLogRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CompactLogResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for TransferLeaderRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for TransferLeaderResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ComputeHashRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for VerifyHashRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for VerifyHashResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for PrepareMergeRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for PrepareMergeResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CommitMergeRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CommitMergeResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RollbackMergeRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RollbackMergeResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for AdminRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for AdminResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionLeaderRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionLeaderResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionDetailRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionDetailResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for StatusRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for StatusResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftRequestHeader","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftResponseHeader","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftCmdRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftCmdResponse","synthetic":true,"types":[]},{"text":"impl Freeze for CmdType","synthetic":true,"types":[]},{"text":"impl Freeze for AdminCmdType","synthetic":true,"types":[]},{"text":"impl Freeze for StatusCmdType","synthetic":true,"types":[]},{"text":"impl !Freeze for TaskMeta","synthetic":true,"types":[]},{"text":"impl !Freeze for DispatchTaskRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for DispatchTaskResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CancelTaskRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CancelTaskResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for EstablishMppConnectionRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for MppDataPacket","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for SwitchModeRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SwitchModeResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for Range","synthetic":true,"types":[]},{"text":"impl !Freeze for SstMeta","synthetic":true,"types":[]},{"text":"impl !Freeze for RewriteRule","synthetic":true,"types":[]},{"text":"impl !Freeze for UploadRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for UploadRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl !Freeze for UploadResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for IngestRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for IngestResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CompactRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CompactResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for DownloadRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for DownloadResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for SetDownloadSpeedLimitRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SetDownloadSpeedLimitResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for Pair","synthetic":true,"types":[]},{"text":"impl Freeze for PairOp","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteBatch","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteResponse","synthetic":true,"types":[]},{"text":"impl Freeze for SwitchMode","synthetic":true,"types":[]},{"text":"impl Freeze for TikvClient","synthetic":true,"types":[]},{"text":"impl !Freeze for GetRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftLogRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftLogResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionInfoRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionInfoResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionSizeRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionSizeResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionSizeResponseEntry","synthetic":true,"types":[]},{"text":"impl !Freeze for ScanMvccRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ScanMvccResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CompactRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CompactResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for InjectFailPointRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for InjectFailPointResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RecoverFailPointRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RecoverFailPointResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ListFailPointsRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ListFailPointsResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ListFailPointsResponseEntry","synthetic":true,"types":[]},{"text":"impl !Freeze for GetMetricsRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetMetricsResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionConsistencyCheckRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionConsistencyCheckResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ModifyTikvConfigRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ModifyTikvConfigResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for Property","synthetic":true,"types":[]},{"text":"impl !Freeze for GetRegionPropertiesRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetRegionPropertiesResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetStoreInfoRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetStoreInfoResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetClusterInfoRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetClusterInfoResponse","synthetic":true,"types":[]},{"text":"impl Freeze for Db","synthetic":true,"types":[]},{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl Freeze for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl Freeze for ImportSstClient","synthetic":true,"types":[]},{"text":"impl Freeze for ConfigClient","synthetic":true,"types":[]},{"text":"impl Freeze for DeadlockClient","synthetic":true,"types":[]},{"text":"impl Freeze for ChangeDataClient","synthetic":true,"types":[]},{"text":"impl !Freeze for GetRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ScanRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ScanResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for PrewriteRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for PrewriteResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for PessimisticLockRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for PessimisticLockResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for PessimisticRollbackRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for PessimisticRollbackResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for TxnHeartBeatRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for TxnHeartBeatResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CheckTxnStatusRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CheckTxnStatusResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CheckSecondaryLocksRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CheckSecondaryLocksResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CommitRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CommitResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ImportRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ImportResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CleanupRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CleanupResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchGetRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchGetResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchRollbackRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchRollbackResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ScanLockRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ScanLockResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ResolveLockRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ResolveLockResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GcRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GcResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for DeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for DeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RawGetRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RawGetResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RawBatchGetRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RawBatchGetResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RawPutRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RawPutResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RawBatchPutRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RawBatchPutResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RawDeleteRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RawDeleteResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RawBatchDeleteRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RawBatchDeleteResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RawScanRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RawScanResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RawDeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RawDeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RawBatchScanRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RawBatchScanResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for UnsafeDestroyRangeRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for UnsafeDestroyRangeResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RegisterLockObserverRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RegisterLockObserverResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CheckLockObserverRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CheckLockObserverResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RemoveLockObserverRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for RemoveLockObserverResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for PhysicalScanLockRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for PhysicalScanLockResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for SplitRegionRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SplitRegionResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ReadIndexRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ReadIndexResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for VerMutation","synthetic":true,"types":[]},{"text":"impl !Freeze for VerValue","synthetic":true,"types":[]},{"text":"impl !Freeze for VerError","synthetic":true,"types":[]},{"text":"impl !Freeze for VerKvPair","synthetic":true,"types":[]},{"text":"impl !Freeze for VerGetRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for VerGetResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for VerBatchGetRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for VerBatchGetResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for VerMutRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for VerMutResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for VerBatchMutRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for VerBatchMutResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for VerScanRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for VerScanResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for VerDeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for VerDeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for MvccGetByKeyRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for MvccGetByKeyResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for MvccGetByStartTsRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for MvccGetByStartTsResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for Context","synthetic":true,"types":[]},{"text":"impl !Freeze for LockInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for KeyError","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteConflict","synthetic":true,"types":[]},{"text":"impl !Freeze for AlreadyExist","synthetic":true,"types":[]},{"text":"impl !Freeze for Deadlock","synthetic":true,"types":[]},{"text":"impl !Freeze for CommitTsExpired","synthetic":true,"types":[]},{"text":"impl !Freeze for TxnNotFound","synthetic":true,"types":[]},{"text":"impl !Freeze for CommitTsTooLarge","synthetic":true,"types":[]},{"text":"impl !Freeze for TimeDetail","synthetic":true,"types":[]},{"text":"impl !Freeze for ScanInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for ScanDetail","synthetic":true,"types":[]},{"text":"impl !Freeze for ScanDetailV2","synthetic":true,"types":[]},{"text":"impl !Freeze for ExecDetails","synthetic":true,"types":[]},{"text":"impl !Freeze for ExecDetailsV2","synthetic":true,"types":[]},{"text":"impl !Freeze for KvPair","synthetic":true,"types":[]},{"text":"impl !Freeze for Mutation","synthetic":true,"types":[]},{"text":"impl !Freeze for MvccWrite","synthetic":true,"types":[]},{"text":"impl !Freeze for MvccValue","synthetic":true,"types":[]},{"text":"impl !Freeze for MvccLock","synthetic":true,"types":[]},{"text":"impl !Freeze for MvccInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for TxnInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for KeyRange","synthetic":true,"types":[]},{"text":"impl !Freeze for LeaderInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for CheckLeaderRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CheckLeaderResponse","synthetic":true,"types":[]},{"text":"impl Freeze for VerOp","synthetic":true,"types":[]},{"text":"impl Freeze for CommandPri","synthetic":true,"types":[]},{"text":"impl Freeze for IsolationLevel","synthetic":true,"types":[]},{"text":"impl Freeze for Op","synthetic":true,"types":[]},{"text":"impl Freeze for Assertion","synthetic":true,"types":[]},{"text":"impl Freeze for Action","synthetic":true,"types":[]},{"text":"impl Freeze for ExtraOp","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftMessage","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftTruncatedState","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapshotCfFile","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapshotMeta","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapshotChunk","synthetic":true,"types":[]},{"text":"impl !Freeze for Done","synthetic":true,"types":[]},{"text":"impl !Freeze for KeyValue","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftSnapshotData","synthetic":true,"types":[]},{"text":"impl !Freeze for StoreIdent","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftLocalState","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftApplyState","synthetic":true,"types":[]},{"text":"impl !Freeze for MergeState","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionLocalState","synthetic":true,"types":[]},{"text":"impl !Freeze for ExtraMessage","synthetic":true,"types":[]},{"text":"impl Freeze for PeerState","synthetic":true,"types":[]},{"text":"impl Freeze for ExtraMessageType","synthetic":true,"types":[]},{"text":"impl !Freeze for SwitchModeRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SwitchModeResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for OpenEngineRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for OpenEngineResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteHead","synthetic":true,"types":[]},{"text":"impl !Freeze for Mutation","synthetic":true,"types":[]},{"text":"impl Freeze for MutationOp","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteBatch","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteEngineRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteEngineRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl !Freeze for KvPair","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteEngineV3Request","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteEngineResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CloseEngineRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CloseEngineResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ImportEngineRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ImportEngineResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CleanupEngineRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CleanupEngineResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CompactClusterRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CompactClusterResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetVersionRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetVersionResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetMetricsRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetMetricsResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for ErrorEngineNotFound","synthetic":true,"types":[]},{"text":"impl !Freeze for BackupMeta","synthetic":true,"types":[]},{"text":"impl !Freeze for File","synthetic":true,"types":[]},{"text":"impl !Freeze for Schema","synthetic":true,"types":[]},{"text":"impl !Freeze for RawRange","synthetic":true,"types":[]},{"text":"impl !Freeze for ClusterIdError","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for Error_oneof_detail","synthetic":true,"types":[]},{"text":"impl !Freeze for BackupRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for StorageBackend","synthetic":true,"types":[]},{"text":"impl !Freeze for StorageBackend_oneof_backend","synthetic":true,"types":[]},{"text":"impl !Freeze for Noop","synthetic":true,"types":[]},{"text":"impl !Freeze for Local","synthetic":true,"types":[]},{"text":"impl !Freeze for S3","synthetic":true,"types":[]},{"text":"impl !Freeze for Gcs","synthetic":true,"types":[]},{"text":"impl !Freeze for BackupResponse","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionType","synthetic":true,"types":[]},{"text":"impl Freeze for ImportKvClient","synthetic":true,"types":[]},{"text":"impl Freeze for DiagnosticsClient","synthetic":true,"types":[]},{"text":"impl Freeze for PdClient","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchCommandsRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchCommandsRequestRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchCommandsRequest_Request_oneof_cmd","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchCommandsResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchCommandsResponseResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchCommandsResponse_Response_oneof_cmd","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchRaftMessage","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchCommandsEmptyRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchCommandsEmptyResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for NotLeader","synthetic":true,"types":[]},{"text":"impl !Freeze for StoreNotMatch","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionNotFound","synthetic":true,"types":[]},{"text":"impl !Freeze for KeyNotInRegion","synthetic":true,"types":[]},{"text":"impl !Freeze for EpochNotMatch","synthetic":true,"types":[]},{"text":"impl !Freeze for ServerIsBusy","synthetic":true,"types":[]},{"text":"impl !Freeze for StaleCommand","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftEntryTooLarge","synthetic":true,"types":[]},{"text":"impl !Freeze for MaxTimestampNotSynced","synthetic":true,"types":[]},{"text":"impl !Freeze for ReadIndexNotReady","synthetic":true,"types":[]},{"text":"impl !Freeze for ProposalInMergingMode","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for RequestHeader","synthetic":true,"types":[]},{"text":"impl !Freeze for ResponseHeader","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for TsoRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl !Freeze for TsoResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for BootstrapRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for BootstrapResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for IsBootstrappedRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for IsBootstrappedResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for AllocIdRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for AllocIdResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetStoreRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetStoreResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for PutStoreRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for PutStoreResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetAllStoresRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetAllStoresResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetRegionRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetRegionResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetRegionByIdRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ScanRegionsRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for Region","synthetic":true,"types":[]},{"text":"impl !Freeze for ScanRegionsResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetClusterConfigRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetClusterConfigResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for PutClusterConfigRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for PutClusterConfigResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for Member","synthetic":true,"types":[]},{"text":"impl !Freeze for GetMembersRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetMembersResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for PeerStats","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionHeartbeatRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangePeer","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangePeerV2","synthetic":true,"types":[]},{"text":"impl !Freeze for TransferLeader","synthetic":true,"types":[]},{"text":"impl !Freeze for Merge","synthetic":true,"types":[]},{"text":"impl !Freeze for SplitRegion","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionHeartbeatResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for AskSplitRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for AskSplitResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ReportSplitRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ReportSplitResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for AskBatchSplitRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SplitId","synthetic":true,"types":[]},{"text":"impl !Freeze for AskBatchSplitResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ReportBatchSplitRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ReportBatchSplitResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for TimeInterval","synthetic":true,"types":[]},{"text":"impl !Freeze for RecordPair","synthetic":true,"types":[]},{"text":"impl !Freeze for StoreStats","synthetic":true,"types":[]},{"text":"impl !Freeze for StoreHeartbeatRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for StoreHeartbeatResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for ScatterRegionRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ScatterRegionResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for UpdateGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for UpdateGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for UpdateServiceGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for UpdateServiceGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionStat","synthetic":true,"types":[]},{"text":"impl !Freeze for SyncRegionRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SyncRegionResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetOperatorRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetOperatorResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for SyncMaxTsRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SyncMaxTsResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for SplitRegionsRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SplitRegionsResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for GetDcLocationInfoRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetDcLocationInfoResponse","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorType","synthetic":true,"types":[]},{"text":"impl Freeze for CheckPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for OperatorStatus","synthetic":true,"types":[]},{"text":"impl !Freeze for KeyRange","synthetic":true,"types":[]},{"text":"impl !Freeze for Request","synthetic":true,"types":[]},{"text":"impl !Freeze for Response","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchResponse","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Freeze for statvfs","synthetic":true,"types":[]},{"text":"impl Freeze for max_align_t","synthetic":true,"types":[]},{"text":"impl Freeze for sigaction","synthetic":true,"types":[]},{"text":"impl Freeze for statfs","synthetic":true,"types":[]},{"text":"impl Freeze for flock","synthetic":true,"types":[]},{"text":"impl Freeze for flock64","synthetic":true,"types":[]},{"text":"impl Freeze for siginfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for stack_t","synthetic":true,"types":[]},{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl Freeze for stat64","synthetic":true,"types":[]},{"text":"impl Freeze for statfs64","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs64","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Freeze for user_regs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for user","synthetic":true,"types":[]},{"text":"impl Freeze for mcontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for ipc_perm","synthetic":true,"types":[]},{"text":"impl Freeze for shmid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for termios2","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Freeze for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for ucontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for sigset_t","synthetic":true,"types":[]},{"text":"impl Freeze for sysinfo","synthetic":true,"types":[]},{"text":"impl Freeze for msqid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for sem_t","synthetic":true,"types":[]},{"text":"impl Freeze for statx","synthetic":true,"types":[]},{"text":"impl Freeze for statx_timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for aiocb","synthetic":true,"types":[]},{"text":"impl Freeze for __exit_status","synthetic":true,"types":[]},{"text":"impl Freeze for __timeval","synthetic":true,"types":[]},{"text":"impl Freeze for glob64_t","synthetic":true,"types":[]},{"text":"impl Freeze for msghdr","synthetic":true,"types":[]},{"text":"impl Freeze for cmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for termios","synthetic":true,"types":[]},{"text":"impl Freeze for mallinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Freeze for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlattr","synthetic":true,"types":[]},{"text":"impl Freeze for rtentry","synthetic":true,"types":[]},{"text":"impl Freeze for timex","synthetic":true,"types":[]},{"text":"impl Freeze for ntptimeval","synthetic":true,"types":[]},{"text":"impl Freeze for regex_t","synthetic":true,"types":[]},{"text":"impl Freeze for utmpx","synthetic":true,"types":[]},{"text":"impl Freeze for fpos64_t","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit64","synthetic":true,"types":[]},{"text":"impl Freeze for glob_t","synthetic":true,"types":[]},{"text":"impl Freeze for passwd","synthetic":true,"types":[]},{"text":"impl Freeze for spwd","synthetic":true,"types":[]},{"text":"impl Freeze for dqblk","synthetic":true,"types":[]},{"text":"impl Freeze for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Freeze for itimerspec","synthetic":true,"types":[]},{"text":"impl Freeze for fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for packet_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Freeze for if_nameindex","synthetic":true,"types":[]},{"text":"impl Freeze for msginfo","synthetic":true,"types":[]},{"text":"impl Freeze for sembuf","synthetic":true,"types":[]},{"text":"impl Freeze for input_event","synthetic":true,"types":[]},{"text":"impl Freeze for input_id","synthetic":true,"types":[]},{"text":"impl Freeze for input_absinfo","synthetic":true,"types":[]},{"text":"impl Freeze for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Freeze for input_mask","synthetic":true,"types":[]},{"text":"impl Freeze for ff_replay","synthetic":true,"types":[]},{"text":"impl Freeze for ff_trigger","synthetic":true,"types":[]},{"text":"impl Freeze for ff_envelope","synthetic":true,"types":[]},{"text":"impl Freeze for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_effect","synthetic":true,"types":[]},{"text":"impl Freeze for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for ucred","synthetic":true,"types":[]},{"text":"impl Freeze for mntent","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for arpd_request","synthetic":true,"types":[]},{"text":"impl Freeze for inotify_event","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_response","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Freeze for regmatch_t","synthetic":true,"types":[]},{"text":"impl Freeze for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Freeze for dirent","synthetic":true,"types":[]},{"text":"impl Freeze for dirent64","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Freeze for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Freeze for mq_attr","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Freeze for timezone","synthetic":true,"types":[]},{"text":"impl Freeze for in_addr","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Freeze for addrinfo","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Freeze for fd_set","synthetic":true,"types":[]},{"text":"impl Freeze for tm","synthetic":true,"types":[]},{"text":"impl Freeze for sched_param","synthetic":true,"types":[]},{"text":"impl Freeze for Dl_info","synthetic":true,"types":[]},{"text":"impl Freeze for lconv","synthetic":true,"types":[]},{"text":"impl Freeze for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for ifaddrs","synthetic":true,"types":[]},{"text":"impl Freeze for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq_old","synthetic":true,"types":[]},{"text":"impl Freeze for arphdr","synthetic":true,"types":[]},{"text":"impl Freeze for mmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for epoll_event","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Freeze for utsname","synthetic":true,"types":[]},{"text":"impl Freeze for sigevent","synthetic":true,"types":[]},{"text":"impl Freeze for in6_addr","synthetic":true,"types":[]},{"text":"impl Freeze for DIR","synthetic":true,"types":[]},{"text":"impl Freeze for group","synthetic":true,"types":[]},{"text":"impl Freeze for utimbuf","synthetic":true,"types":[]},{"text":"impl Freeze for timeval","synthetic":true,"types":[]},{"text":"impl Freeze for timespec","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit","synthetic":true,"types":[]},{"text":"impl Freeze for rusage","synthetic":true,"types":[]},{"text":"impl Freeze for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for hostent","synthetic":true,"types":[]},{"text":"impl Freeze for iovec","synthetic":true,"types":[]},{"text":"impl Freeze for pollfd","synthetic":true,"types":[]},{"text":"impl Freeze for winsize","synthetic":true,"types":[]},{"text":"impl Freeze for linger","synthetic":true,"types":[]},{"text":"impl Freeze for sigval","synthetic":true,"types":[]},{"text":"impl Freeze for itimerval","synthetic":true,"types":[]},{"text":"impl Freeze for tms","synthetic":true,"types":[]},{"text":"impl Freeze for servent","synthetic":true,"types":[]},{"text":"impl Freeze for protoent","synthetic":true,"types":[]},{"text":"impl Freeze for FILE","synthetic":true,"types":[]},{"text":"impl Freeze for fpos_t","synthetic":true,"types":[]}];
implementors["libflate"] = [{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; Freeze for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Finish&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AutoFinish&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AutoFinishUnchecked&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Freeze for HeaderBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Header","synthetic":true,"types":[]},{"text":"impl Freeze for ExtraField","synthetic":true,"types":[]},{"text":"impl Freeze for ExtraSubField","synthetic":true,"types":[]},{"text":"impl Freeze for Os","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; Freeze for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for MultiDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Freeze for Lz77WindowSize","synthetic":true,"types":[]},{"text":"impl Freeze for Header","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; Freeze for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libflate_lz77"] = [{"text":"impl Freeze for DefaultLz77Encoder","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultLz77EncoderBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Code","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Freeze for NoCompressionLz77Encoder","synthetic":true,"types":[]}];
implementors["librocksdb_sys"] = [{"text":"impl Freeze for DBStatisticsTickerType","synthetic":true,"types":[]},{"text":"impl Freeze for DBStatisticsHistogramType","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for CloudEnvOptions","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for DBInstance","synthetic":true,"types":[]},{"text":"impl Freeze for DBWriteOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBReadOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBMergeOperator","synthetic":true,"types":[]},{"text":"impl Freeze for DBBlockBasedTableOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBMemoryAllocator","synthetic":true,"types":[]},{"text":"impl Freeze for DBLRUCacheOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBCache","synthetic":true,"types":[]},{"text":"impl Freeze for DBFilterPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for DBSnapshot","synthetic":true,"types":[]},{"text":"impl Freeze for DBIterator","synthetic":true,"types":[]},{"text":"impl Freeze for DBCFHandle","synthetic":true,"types":[]},{"text":"impl Freeze for DBWriteBatch","synthetic":true,"types":[]},{"text":"impl Freeze for DBComparator","synthetic":true,"types":[]},{"text":"impl Freeze for DBFlushOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBCompactionFilter","synthetic":true,"types":[]},{"text":"impl Freeze for DBCompactionFilterFactory","synthetic":true,"types":[]},{"text":"impl Freeze for DBCompactionFilterContext","synthetic":true,"types":[]},{"text":"impl Freeze for EnvOptions","synthetic":true,"types":[]},{"text":"impl Freeze for SstFileReader","synthetic":true,"types":[]},{"text":"impl Freeze for SstFileWriter","synthetic":true,"types":[]},{"text":"impl Freeze for ExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl Freeze for IngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBBackupEngine","synthetic":true,"types":[]},{"text":"impl Freeze for DBRestoreOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBSliceTransform","synthetic":true,"types":[]},{"text":"impl Freeze for DBRateLimiter","synthetic":true,"types":[]},{"text":"impl Freeze for DBLogger","synthetic":true,"types":[]},{"text":"impl Freeze for DBCompactOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBFifoCompactionOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBPinnableSlice","synthetic":true,"types":[]},{"text":"impl Freeze for DBUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Freeze for DBUserCollectedPropertiesIterator","synthetic":true,"types":[]},{"text":"impl Freeze for DBTableProperties","synthetic":true,"types":[]},{"text":"impl Freeze for DBTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl Freeze for DBTablePropertiesCollectionIterator","synthetic":true,"types":[]},{"text":"impl Freeze for DBTablePropertiesCollector","synthetic":true,"types":[]},{"text":"impl Freeze for DBTablePropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl Freeze for DBFlushJobInfo","synthetic":true,"types":[]},{"text":"impl Freeze for DBCompactionJobInfo","synthetic":true,"types":[]},{"text":"impl Freeze for DBSubcompactionJobInfo","synthetic":true,"types":[]},{"text":"impl Freeze for DBIngestionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for DBEventListener","synthetic":true,"types":[]},{"text":"impl Freeze for DBKeyVersions","synthetic":true,"types":[]},{"text":"impl Freeze for DBEnv","synthetic":true,"types":[]},{"text":"impl Freeze for DBSequentialFile","synthetic":true,"types":[]},{"text":"impl Freeze for DBColumnFamilyMetaData","synthetic":true,"types":[]},{"text":"impl Freeze for DBLevelMetaData","synthetic":true,"types":[]},{"text":"impl Freeze for DBSstFileMetaData","synthetic":true,"types":[]},{"text":"impl Freeze for DBCompactionOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBPerfContext","synthetic":true,"types":[]},{"text":"impl Freeze for DBIOStatsContext","synthetic":true,"types":[]},{"text":"impl Freeze for DBWriteStallInfo","synthetic":true,"types":[]},{"text":"impl Freeze for DBStatusPtr","synthetic":true,"types":[]},{"text":"impl Freeze for DBMapProperty","synthetic":true,"types":[]},{"text":"impl Freeze for DBFileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for DBEncryptionKeyManagerInstance","synthetic":true,"types":[]},{"text":"impl Freeze for DBSstPartitioner","synthetic":true,"types":[]},{"text":"impl Freeze for DBSstPartitionerRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DBSstPartitionerContext","synthetic":true,"types":[]},{"text":"impl Freeze for DBSstPartitionerFactory","synthetic":true,"types":[]},{"text":"impl Freeze for DBWriteBatchIterator","synthetic":true,"types":[]},{"text":"impl Freeze for DBFileSystemInspectorInstance","synthetic":true,"types":[]},{"text":"impl Freeze for WriteStallCondition","synthetic":true,"types":[]},{"text":"impl Freeze for DBTitanDBOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBTitanReadOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBTitanBlobIndex","synthetic":true,"types":[]},{"text":"impl Freeze for DBEntryType","synthetic":true,"types":[]},{"text":"impl Freeze for DBCompressionType","synthetic":true,"types":[]},{"text":"impl Freeze for DBCompactionStyle","synthetic":true,"types":[]},{"text":"impl Freeze for DBUniversalCompactionStyle","synthetic":true,"types":[]},{"text":"impl Freeze for DBRecoveryMode","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionPriority","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionReason","synthetic":true,"types":[]},{"text":"impl Freeze for DBInfoLogLevel","synthetic":true,"types":[]},{"text":"impl Freeze for DBTableProperty","synthetic":true,"types":[]},{"text":"impl Freeze for DBBottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl Freeze for DBRateLimiterMode","synthetic":true,"types":[]},{"text":"impl Freeze for DBTitanDBBlobRunMode","synthetic":true,"types":[]},{"text":"impl Freeze for IndexType","synthetic":true,"types":[]},{"text":"impl Freeze for DBBackgroundErrorReason","synthetic":true,"types":[]},{"text":"impl Freeze for DBEncryptionMethod","synthetic":true,"types":[]},{"text":"impl Freeze for DBValueType","synthetic":true,"types":[]},{"text":"impl Freeze for DBSstPartitionerResult","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionFilterValueType","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionFilterDecision","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl Freeze for gzFile_s","synthetic":true,"types":[]},{"text":"impl Freeze for internal_state","synthetic":true,"types":[]},{"text":"impl Freeze for gz_header","synthetic":true,"types":[]},{"text":"impl Freeze for z_stream","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; Freeze for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entries&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linked_hash_set"] = [{"text":"impl&lt;T, S&gt; Freeze for LinkedHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntoIter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;R, T&gt; !Freeze for Mutex&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, G&gt; !Freeze for RawReentrantMutex&lt;R, G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, G, T&gt; !Freeze for ReentrantMutex&lt;R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Freeze for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Freeze for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !Freeze for RwLock&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GuardSend","synthetic":true,"types":[]},{"text":"impl Freeze for GuardNoSend","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelError","synthetic":true,"types":[]}];
implementors["log_wrappers"] = [{"text":"impl Freeze for SyncLoggerBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Value&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["lz4_sys"] = [{"text":"impl Freeze for LZ4FCompressionContext","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4FDecompressionContext","synthetic":true,"types":[]},{"text":"impl Freeze for BlockSize","synthetic":true,"types":[]},{"text":"impl Freeze for BlockMode","synthetic":true,"types":[]},{"text":"impl Freeze for ContentChecksum","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4FFrameInfo","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4FPreferences","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4FCompressOptions","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4FDecompressOptions","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4StreamEncode","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4StreamDecode","synthetic":true,"types":[]}];
implementors["match_template"] = [{"text":"impl Freeze for MatchTemplate","synthetic":true,"types":[]},{"text":"impl Freeze for Substitution","synthetic":true,"types":[]}];
implementors["md5"] = [{"text":"impl Freeze for Digest","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Freeze for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl Freeze for MmapOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Mmap","synthetic":true,"types":[]},{"text":"impl Freeze for MmapMut","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl Freeze for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime_guess"] = [{"text":"impl Freeze for MimeGuess","synthetic":true,"types":[]},{"text":"impl Freeze for Iter","synthetic":true,"types":[]},{"text":"impl Freeze for IterRaw","synthetic":true,"types":[]}];
implementors["minitrace"] = [{"text":"impl Freeze for Collector","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TraceSpawned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TraceWrapped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MayTraceRootFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TraceRootFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CrossthreadTrace","synthetic":true,"types":[]},{"text":"impl Freeze for SpanGuard","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Link","synthetic":true,"types":[]},{"text":"impl Freeze for SpanSet","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Freeze for PollOpt","synthetic":true,"types":[]},{"text":"impl Freeze for Ready","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl !Freeze for Poll","synthetic":true,"types":[]},{"text":"impl Freeze for Registration","synthetic":true,"types":[]},{"text":"impl Freeze for SetReadiness","synthetic":true,"types":[]},{"text":"impl Freeze for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UnixReady","synthetic":true,"types":[]},{"text":"impl Freeze for Token","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpStream","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpListener","synthetic":true,"types":[]},{"text":"impl !Freeze for UdpSocket","synthetic":true,"types":[]}];
implementors["mio_uds"] = [{"text":"impl Freeze for UnixDatagram","synthetic":true,"types":[]},{"text":"impl Freeze for UnixListener","synthetic":true,"types":[]},{"text":"impl Freeze for UnixStream","synthetic":true,"types":[]}];
implementors["native_tls"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Identity","synthetic":true,"types":[]},{"text":"impl Freeze for Certificate","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for MidHandshakeTlsStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Protocol","synthetic":true,"types":[]},{"text":"impl Freeze for TlsConnectorBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for TlsConnector","synthetic":true,"types":[]},{"text":"impl Freeze for TlsAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for TlsStream&lt;S&gt;","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl !Freeze for TcpBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for UdpBuilder","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl Freeze for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; Freeze for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Entry","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Errno","synthetic":true,"types":[]},{"text":"impl Freeze for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl Freeze for AtFlags","synthetic":true,"types":[]},{"text":"impl Freeze for OFlag","synthetic":true,"types":[]},{"text":"impl Freeze for SealFlag","synthetic":true,"types":[]},{"text":"impl Freeze for FdFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FlockArg","synthetic":true,"types":[]},{"text":"impl Freeze for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl Freeze for FallocateFlags","synthetic":true,"types":[]},{"text":"impl Freeze for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl Freeze for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MsFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MntFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl Freeze for FdFlag","synthetic":true,"types":[]},{"text":"impl Freeze for MqAttr","synthetic":true,"types":[]},{"text":"impl Freeze for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl Freeze for PollFd","synthetic":true,"types":[]},{"text":"impl Freeze for PollFlags","synthetic":true,"types":[]},{"text":"impl Freeze for OpenptyResult","synthetic":true,"types":[]},{"text":"impl Freeze for ForkptyResult","synthetic":true,"types":[]},{"text":"impl Freeze for PtyMaster","synthetic":true,"types":[]},{"text":"impl Freeze for CloneFlags","synthetic":true,"types":[]},{"text":"impl Freeze for CpuSet","synthetic":true,"types":[]},{"text":"impl Freeze for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl Freeze for LioOpcode","synthetic":true,"types":[]},{"text":"impl Freeze for LioMode","synthetic":true,"types":[]},{"text":"impl Freeze for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for EpollFlags","synthetic":true,"types":[]},{"text":"impl Freeze for EpollOp","synthetic":true,"types":[]},{"text":"impl Freeze for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl Freeze for EpollEvent","synthetic":true,"types":[]},{"text":"impl Freeze for EfdFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl Freeze for ProtFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MapFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MmapAdvise","synthetic":true,"types":[]},{"text":"impl Freeze for MsFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for QuotaType","synthetic":true,"types":[]},{"text":"impl Freeze for QuotaFmt","synthetic":true,"types":[]},{"text":"impl Freeze for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Dqblk","synthetic":true,"types":[]},{"text":"impl Freeze for RebootMode","synthetic":true,"types":[]},{"text":"impl Freeze for FdSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Fds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SigEvent","synthetic":true,"types":[]},{"text":"impl Freeze for Signal","synthetic":true,"types":[]},{"text":"impl Freeze for SignalIterator","synthetic":true,"types":[]},{"text":"impl Freeze for SaFlags","synthetic":true,"types":[]},{"text":"impl Freeze for SigmaskHow","synthetic":true,"types":[]},{"text":"impl Freeze for SigSet","synthetic":true,"types":[]},{"text":"impl Freeze for SigHandler","synthetic":true,"types":[]},{"text":"impl Freeze for SigAction","synthetic":true,"types":[]},{"text":"impl Freeze for SigevNotify","synthetic":true,"types":[]},{"text":"impl Freeze for SfdFlags","synthetic":true,"types":[]},{"text":"impl Freeze for SignalFd","synthetic":true,"types":[]},{"text":"impl Freeze for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl Freeze for AlgAddr","synthetic":true,"types":[]},{"text":"impl Freeze for LinkAddr","synthetic":true,"types":[]},{"text":"impl Freeze for VsockAddr","synthetic":true,"types":[]},{"text":"impl Freeze for AddressFamily","synthetic":true,"types":[]},{"text":"impl Freeze for InetAddr","synthetic":true,"types":[]},{"text":"impl Freeze for IpAddr","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Freeze for UnixAddr","synthetic":true,"types":[]},{"text":"impl Freeze for SockAddr","synthetic":true,"types":[]},{"text":"impl Freeze for ReuseAddr","synthetic":true,"types":[]},{"text":"impl Freeze for ReusePort","synthetic":true,"types":[]},{"text":"impl Freeze for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl Freeze for Linger","synthetic":true,"types":[]},{"text":"impl Freeze for IpAddMembership","synthetic":true,"types":[]},{"text":"impl Freeze for IpDropMembership","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl Freeze for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl Freeze for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl Freeze for SendTimeout","synthetic":true,"types":[]},{"text":"impl Freeze for Broadcast","synthetic":true,"types":[]},{"text":"impl Freeze for OobInline","synthetic":true,"types":[]},{"text":"impl Freeze for SocketError","synthetic":true,"types":[]},{"text":"impl Freeze for KeepAlive","synthetic":true,"types":[]},{"text":"impl Freeze for PeerCredentials","synthetic":true,"types":[]},{"text":"impl Freeze for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl Freeze for TcpKeepCount","synthetic":true,"types":[]},{"text":"impl Freeze for TcpKeepInterval","synthetic":true,"types":[]},{"text":"impl Freeze for RcvBuf","synthetic":true,"types":[]},{"text":"impl Freeze for SndBuf","synthetic":true,"types":[]},{"text":"impl Freeze for RcvBufForce","synthetic":true,"types":[]},{"text":"impl Freeze for SndBufForce","synthetic":true,"types":[]},{"text":"impl Freeze for SockType","synthetic":true,"types":[]},{"text":"impl Freeze for AcceptConn","synthetic":true,"types":[]},{"text":"impl Freeze for BindToDevice","synthetic":true,"types":[]},{"text":"impl Freeze for OriginalDst","synthetic":true,"types":[]},{"text":"impl Freeze for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl Freeze for IpTransparent","synthetic":true,"types":[]},{"text":"impl Freeze for Mark","synthetic":true,"types":[]},{"text":"impl Freeze for PassCred","synthetic":true,"types":[]},{"text":"impl Freeze for TcpCongestion","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl Freeze for UdpGsoSegment","synthetic":true,"types":[]},{"text":"impl Freeze for UdpGroSegment","synthetic":true,"types":[]},{"text":"impl Freeze for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AlgSetKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SockType","synthetic":true,"types":[]},{"text":"impl Freeze for SockProtocol","synthetic":true,"types":[]},{"text":"impl Freeze for SockFlag","synthetic":true,"types":[]},{"text":"impl Freeze for MsgFlags","synthetic":true,"types":[]},{"text":"impl Freeze for UnixCredentials","synthetic":true,"types":[]},{"text":"impl Freeze for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, C&gt; Freeze for SendMmsgData&lt;'a, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for RecvMmsgData&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SockLevel","synthetic":true,"types":[]},{"text":"impl Freeze for Shutdown","synthetic":true,"types":[]},{"text":"impl Freeze for SFlag","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Statfs","synthetic":true,"types":[]},{"text":"impl Freeze for FsType","synthetic":true,"types":[]},{"text":"impl Freeze for FsFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Statvfs","synthetic":true,"types":[]},{"text":"impl Freeze for SysInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for Termios","synthetic":true,"types":[]},{"text":"impl Freeze for BaudRate","synthetic":true,"types":[]},{"text":"impl Freeze for SetArg","synthetic":true,"types":[]},{"text":"impl Freeze for FlushArg","synthetic":true,"types":[]},{"text":"impl Freeze for FlowArg","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl Freeze for InputFlags","synthetic":true,"types":[]},{"text":"impl Freeze for OutputFlags","synthetic":true,"types":[]},{"text":"impl Freeze for ControlFlags","synthetic":true,"types":[]},{"text":"impl Freeze for LocalFlags","synthetic":true,"types":[]},{"text":"impl Freeze for TimeSpec","synthetic":true,"types":[]},{"text":"impl Freeze for TimeVal","synthetic":true,"types":[]},{"text":"impl Freeze for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IoVec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UtsName","synthetic":true,"types":[]},{"text":"impl Freeze for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl Freeze for WaitStatus","synthetic":true,"types":[]},{"text":"impl Freeze for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl Freeze for InitFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Inotify","synthetic":true,"types":[]},{"text":"impl Freeze for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for InotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for TimerFd","synthetic":true,"types":[]},{"text":"impl Freeze for ClockId","synthetic":true,"types":[]},{"text":"impl Freeze for TimerFlags","synthetic":true,"types":[]},{"text":"impl Freeze for TimerSetTimeFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Expiration","synthetic":true,"types":[]},{"text":"impl Freeze for ClockId","synthetic":true,"types":[]},{"text":"impl Freeze for UContext","synthetic":true,"types":[]},{"text":"impl Freeze for Uid","synthetic":true,"types":[]},{"text":"impl Freeze for Gid","synthetic":true,"types":[]},{"text":"impl Freeze for Pid","synthetic":true,"types":[]},{"text":"impl Freeze for ForkResult","synthetic":true,"types":[]},{"text":"impl Freeze for FchownatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Whence","synthetic":true,"types":[]},{"text":"impl Freeze for LinkatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for PathconfVar","synthetic":true,"types":[]},{"text":"impl Freeze for SysconfVar","synthetic":true,"types":[]},{"text":"impl Freeze for AccessFlags","synthetic":true,"types":[]},{"text":"impl Freeze for User","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["nodrop"] = [{"text":"impl&lt;T&gt; Freeze for NoDrop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl&lt;I&gt; Freeze for VerboseError&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for VerboseErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Needed","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CompareResult","synthetic":true,"types":[]},{"text":"impl&lt;I, E, F&gt; Freeze for ParserIterator&lt;I, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Endianness","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Freeze for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_format"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl Freeze for CustomFormat","synthetic":true,"types":[]},{"text":"impl Freeze for CustomFormatBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Grouping","synthetic":true,"types":[]},{"text":"impl Freeze for Locale","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DecimalStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InfinityStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MinusSignStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NanStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PlusSignStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SeparatorStr&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Freeze for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Freeze for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Freeze for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Freeze for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for ParseFloatError","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]}];
implementors["openssl"] = [{"text":"impl Freeze for KeyError","synthetic":true,"types":[]},{"text":"impl Freeze for AesKey","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1GeneralizedTime","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1GeneralizedTimeRef","synthetic":true,"types":[]},{"text":"impl Freeze for TimeDiff","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1Time","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1TimeRef","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1String","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1StringRef","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1Integer","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1IntegerRef","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1BitString","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1BitStringRef","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1Object","synthetic":true,"types":[]},{"text":"impl !Freeze for Asn1ObjectRef","synthetic":true,"types":[]},{"text":"impl Freeze for MsbOption","synthetic":true,"types":[]},{"text":"impl Freeze for BigNumContext","synthetic":true,"types":[]},{"text":"impl !Freeze for BigNumContextRef","synthetic":true,"types":[]},{"text":"impl Freeze for BigNum","synthetic":true,"types":[]},{"text":"impl !Freeze for BigNumRef","synthetic":true,"types":[]},{"text":"impl Freeze for CMSOptions","synthetic":true,"types":[]},{"text":"impl Freeze for CmsContentInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for CmsContentInfoRef","synthetic":true,"types":[]},{"text":"impl Freeze for ConfMethod","synthetic":true,"types":[]},{"text":"impl Freeze for Conf","synthetic":true,"types":[]},{"text":"impl !Freeze for ConfRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Deriver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Dh&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for DhRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Dsa&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for DsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PointConversionForm","synthetic":true,"types":[]},{"text":"impl Freeze for Asn1Flag","synthetic":true,"types":[]},{"text":"impl Freeze for EcGroup","synthetic":true,"types":[]},{"text":"impl !Freeze for EcGroupRef","synthetic":true,"types":[]},{"text":"impl Freeze for EcPoint","synthetic":true,"types":[]},{"text":"impl !Freeze for EcPointRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EcKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for EcKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaSig","synthetic":true,"types":[]},{"text":"impl !Freeze for EcdsaSigRef","synthetic":true,"types":[]},{"text":"impl Freeze for Seal","synthetic":true,"types":[]},{"text":"impl Freeze for Open","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorStack","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Index&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MessageDigest","synthetic":true,"types":[]},{"text":"impl Freeze for Hasher","synthetic":true,"types":[]},{"text":"impl Freeze for DigestBytes","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl Freeze for Nid","synthetic":true,"types":[]},{"text":"impl Freeze for OcspFlag","synthetic":true,"types":[]},{"text":"impl Freeze for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl Freeze for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl Freeze for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OcspBasicResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for OcspBasicResponseRef","synthetic":true,"types":[]},{"text":"impl Freeze for OcspCertId","synthetic":true,"types":[]},{"text":"impl !Freeze for OcspCertIdRef","synthetic":true,"types":[]},{"text":"impl Freeze for OcspResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for OcspResponseRef","synthetic":true,"types":[]},{"text":"impl Freeze for OcspRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for OcspRequestRef","synthetic":true,"types":[]},{"text":"impl Freeze for OcspOneReq","synthetic":true,"types":[]},{"text":"impl !Freeze for OcspOneReqRef","synthetic":true,"types":[]},{"text":"impl Freeze for Pkcs12","synthetic":true,"types":[]},{"text":"impl !Freeze for Pkcs12Ref","synthetic":true,"types":[]},{"text":"impl Freeze for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl Freeze for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl Freeze for KeyIvPair","synthetic":true,"types":[]},{"text":"impl Freeze for Pkcs7","synthetic":true,"types":[]},{"text":"impl !Freeze for Pkcs7Ref","synthetic":true,"types":[]},{"text":"impl Freeze for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl Freeze for Params","synthetic":true,"types":[]},{"text":"impl Freeze for Public","synthetic":true,"types":[]},{"text":"impl Freeze for Private","synthetic":true,"types":[]},{"text":"impl Freeze for Id","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for PKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Padding","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Rsa&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Sha1","synthetic":true,"types":[]},{"text":"impl Freeze for Sha224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha384","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512","synthetic":true,"types":[]},{"text":"impl Freeze for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Signer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Verifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SrtpProtectionProfile","synthetic":true,"types":[]},{"text":"impl !Freeze for SrtpProtectionProfileRef","synthetic":true,"types":[]},{"text":"impl Freeze for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl Freeze for SslConnector","synthetic":true,"types":[]},{"text":"impl Freeze for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for SslAcceptor","synthetic":true,"types":[]},{"text":"impl Freeze for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorCode","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SslOptions","synthetic":true,"types":[]},{"text":"impl Freeze for SslMode","synthetic":true,"types":[]},{"text":"impl Freeze for SslMethod","synthetic":true,"types":[]},{"text":"impl Freeze for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl Freeze for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl Freeze for ExtensionContext","synthetic":true,"types":[]},{"text":"impl Freeze for SslFiletype","synthetic":true,"types":[]},{"text":"impl Freeze for StatusType","synthetic":true,"types":[]},{"text":"impl Freeze for NameType","synthetic":true,"types":[]},{"text":"impl Freeze for SniError","synthetic":true,"types":[]},{"text":"impl Freeze for SslAlert","synthetic":true,"types":[]},{"text":"impl Freeze for AlpnError","synthetic":true,"types":[]},{"text":"impl Freeze for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl Freeze for SslVersion","synthetic":true,"types":[]},{"text":"impl Freeze for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for SslContext","synthetic":true,"types":[]},{"text":"impl !Freeze for SslContextRef","synthetic":true,"types":[]},{"text":"impl Freeze for CipherBits","synthetic":true,"types":[]},{"text":"impl Freeze for SslCipher","synthetic":true,"types":[]},{"text":"impl !Freeze for SslCipherRef","synthetic":true,"types":[]},{"text":"impl Freeze for SslSession","synthetic":true,"types":[]},{"text":"impl !Freeze for SslSessionRef","synthetic":true,"types":[]},{"text":"impl Freeze for Ssl","synthetic":true,"types":[]},{"text":"impl !Freeze for SslRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for MidHandshakeSslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SslStreamBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ShutdownResult","synthetic":true,"types":[]},{"text":"impl Freeze for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Stack&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for StackRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OpensslString","synthetic":true,"types":[]},{"text":"impl !Freeze for OpensslStringRef","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for Cipher","synthetic":true,"types":[]},{"text":"impl Freeze for Crypter","synthetic":true,"types":[]},{"text":"impl Freeze for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl Freeze for X509VerifyParam","synthetic":true,"types":[]},{"text":"impl !Freeze for X509VerifyParamRef","synthetic":true,"types":[]},{"text":"impl Freeze for BasicConstraints","synthetic":true,"types":[]},{"text":"impl Freeze for KeyUsage","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl Freeze for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl Freeze for X509StoreBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for X509StoreBuilderRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509Store","synthetic":true,"types":[]},{"text":"impl !Freeze for X509StoreRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509StoreContext","synthetic":true,"types":[]},{"text":"impl !Freeze for X509StoreContextRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509Builder","synthetic":true,"types":[]},{"text":"impl Freeze for X509","synthetic":true,"types":[]},{"text":"impl !Freeze for X509Ref","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for X509Extension","synthetic":true,"types":[]},{"text":"impl !Freeze for X509ExtensionRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for X509Name","synthetic":true,"types":[]},{"text":"impl !Freeze for X509NameRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for X509NameEntry","synthetic":true,"types":[]},{"text":"impl !Freeze for X509NameEntryRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for X509Req","synthetic":true,"types":[]},{"text":"impl !Freeze for X509ReqRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl Freeze for GeneralName","synthetic":true,"types":[]},{"text":"impl !Freeze for GeneralNameRef","synthetic":true,"types":[]},{"text":"impl Freeze for X509Algorithm","synthetic":true,"types":[]},{"text":"impl !Freeze for X509AlgorithmRef","synthetic":true,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl Freeze for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl Freeze for AES_KEY","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Freeze for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_void","synthetic":true,"types":[]},{"text":"impl Freeze for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl Freeze for EC_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for EC_GROUP","synthetic":true,"types":[]},{"text":"impl Freeze for EC_POINT","synthetic":true,"types":[]},{"text":"impl Freeze for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl Freeze for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl Freeze for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl Freeze for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl Freeze for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl Freeze for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl Freeze for bio_st","synthetic":true,"types":[]},{"text":"impl Freeze for BIO","synthetic":true,"types":[]},{"text":"impl Freeze for BIGNUM","synthetic":true,"types":[]},{"text":"impl Freeze for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl Freeze for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for BN_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for BN_GENCB","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_MD","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for DH","synthetic":true,"types":[]},{"text":"impl Freeze for DH_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for DSA","synthetic":true,"types":[]},{"text":"impl Freeze for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for RSA","synthetic":true,"types":[]},{"text":"impl Freeze for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for EC_KEY","synthetic":true,"types":[]},{"text":"impl Freeze for X509","synthetic":true,"types":[]},{"text":"impl Freeze for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl Freeze for X509_CRL","synthetic":true,"types":[]},{"text":"impl Freeze for X509_NAME","synthetic":true,"types":[]},{"text":"impl Freeze for X509_STORE","synthetic":true,"types":[]},{"text":"impl Freeze for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl Freeze for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for CONF","synthetic":true,"types":[]},{"text":"impl Freeze for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl Freeze for ENGINE","synthetic":true,"types":[]},{"text":"impl Freeze for SSL","synthetic":true,"types":[]},{"text":"impl Freeze for SSL_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl Freeze for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS12","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl Freeze for PKCS7","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl Freeze for SHA_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl Freeze for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Freeze for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Freeze for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl Freeze for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl Freeze for X509_VAL","synthetic":true,"types":[]},{"text":"impl Freeze for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl Freeze for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl Freeze for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for X509_REQ","synthetic":true,"types":[]},{"text":"impl Freeze for X509_CINF","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_X509","synthetic":true,"types":[]},{"text":"impl Freeze for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl Freeze for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl Freeze for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; Freeze for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Freeze for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl !Freeze for Condvar","synthetic":true,"types":[]},{"text":"impl Freeze for OnceState","synthetic":true,"types":[]},{"text":"impl !Freeze for Once","synthetic":true,"types":[]},{"text":"impl !Freeze for RawFairMutex","synthetic":true,"types":[]},{"text":"impl !Freeze for RawMutex","synthetic":true,"types":[]},{"text":"impl !Freeze for RawRwLock","synthetic":true,"types":[]},{"text":"impl Freeze for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Freeze for ParkResult","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkResult","synthetic":true,"types":[]},{"text":"impl Freeze for RequeueOp","synthetic":true,"types":[]},{"text":"impl Freeze for FilterOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkToken","synthetic":true,"types":[]},{"text":"impl Freeze for ParkToken","synthetic":true,"types":[]},{"text":"impl Freeze for SpinWait","synthetic":true,"types":[]}];
implementors["pd_client"] = [{"text":"impl Freeze for RpcClient","synthetic":true,"types":[]},{"text":"impl Freeze for DummyPdClient","synthetic":true,"types":[]},{"text":"impl Freeze for FeatureGate","synthetic":true,"types":[]},{"text":"impl Freeze for Feature","synthetic":true,"types":[]},{"text":"impl Freeze for PD_REQUEST_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for PD_HEARTBEAT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for PD_VALIDATE_PEER_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_SIZE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for REGION_READ_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for REGION_READ_BYTES_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for REGION_WRITTEN_BYTES_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for REGION_WRITTEN_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl !Freeze for Inner","synthetic":true,"types":[]},{"text":"impl Freeze for HeartbeatReceiver","synthetic":true,"types":[]},{"text":"impl !Freeze for LeaderClient","synthetic":true,"types":[]},{"text":"impl&lt;Req, F&gt; Freeze for Request&lt;Req, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RegionStat","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionInfo","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Freeze for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["pnet_base"] = [{"text":"impl Freeze for MacAddr","synthetic":true,"types":[]},{"text":"impl Freeze for ParseMacAddrErr","synthetic":true,"types":[]}];
implementors["pnet_datalink"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl !Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for ChannelType","synthetic":true,"types":[]},{"text":"impl Freeze for Channel","synthetic":true,"types":[]},{"text":"impl Freeze for FanoutType","synthetic":true,"types":[]},{"text":"impl Freeze for FanoutOption","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkInterface","synthetic":true,"types":[]}];
implementors["pnet_sys"] = [{"text":"impl Freeze for FileDesc","synthetic":true,"types":[]}];
implementors["pprof"] = [{"text":"impl&lt;T&gt; Freeze for StackHashCounter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Collector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Symbol","synthetic":true,"types":[]},{"text":"impl Freeze for Frames","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ProfilerGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Report","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReportBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Profile","synthetic":true,"types":[]},{"text":"impl Freeze for ValueType","synthetic":true,"types":[]},{"text":"impl Freeze for Sample","synthetic":true,"types":[]},{"text":"impl Freeze for Label","synthetic":true,"types":[]},{"text":"impl Freeze for Mapping","synthetic":true,"types":[]},{"text":"impl Freeze for Location","synthetic":true,"types":[]},{"text":"impl Freeze for Line","synthetic":true,"types":[]},{"text":"impl Freeze for Function","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Freeze for YesS3","synthetic":true,"types":[]},{"text":"impl Freeze for NoS3","synthetic":true,"types":[]},{"text":"impl Freeze for YesS4","synthetic":true,"types":[]},{"text":"impl Freeze for NoS4","synthetic":true,"types":[]},{"text":"impl Freeze for YesA1","synthetic":true,"types":[]},{"text":"impl Freeze for NoA1","synthetic":true,"types":[]},{"text":"impl Freeze for YesA2","synthetic":true,"types":[]},{"text":"impl Freeze for NoA2","synthetic":true,"types":[]},{"text":"impl Freeze for YesNI","synthetic":true,"types":[]},{"text":"impl Freeze for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Freeze for SseMachine&lt;S3, S4, NI&gt;","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Freeze for Avx2Machine&lt;NI&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for vec128_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec256_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for Diagnostic","synthetic":true,"types":[]}];
implementors["procfs"] = [{"text":"impl Freeze for Limits","synthetic":true,"types":[]},{"text":"impl Freeze for Limit","synthetic":true,"types":[]},{"text":"impl Freeze for LimitValue","synthetic":true,"types":[]},{"text":"impl Freeze for Stat","synthetic":true,"types":[]},{"text":"impl Freeze for NFSServerCaps","synthetic":true,"types":[]},{"text":"impl Freeze for MountInfo","synthetic":true,"types":[]},{"text":"impl Freeze for MountOptFields","synthetic":true,"types":[]},{"text":"impl Freeze for MountStat","synthetic":true,"types":[]},{"text":"impl Freeze for MountNFSStatistics","synthetic":true,"types":[]},{"text":"impl Freeze for NFSEventCounter","synthetic":true,"types":[]},{"text":"impl Freeze for NFSByteCounter","synthetic":true,"types":[]},{"text":"impl Freeze for NFSOperationStat","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl Freeze for StatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for CoredumpFlags","synthetic":true,"types":[]},{"text":"impl Freeze for FDPermissions","synthetic":true,"types":[]},{"text":"impl Freeze for ProcState","synthetic":true,"types":[]},{"text":"impl Freeze for Io","synthetic":true,"types":[]},{"text":"impl Freeze for MMapPath","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryMap","synthetic":true,"types":[]},{"text":"impl Freeze for FDTarget","synthetic":true,"types":[]},{"text":"impl Freeze for FDInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Process","synthetic":true,"types":[]},{"text":"impl Freeze for StatM","synthetic":true,"types":[]},{"text":"impl Freeze for Meminfo","synthetic":true,"types":[]},{"text":"impl Freeze for TcpState","synthetic":true,"types":[]},{"text":"impl Freeze for UdpState","synthetic":true,"types":[]},{"text":"impl Freeze for UnixState","synthetic":true,"types":[]},{"text":"impl Freeze for TcpNetEntry","synthetic":true,"types":[]},{"text":"impl Freeze for UdpNetEntry","synthetic":true,"types":[]},{"text":"impl Freeze for UnixNetEntry","synthetic":true,"types":[]},{"text":"impl Freeze for DeviceStatus","synthetic":true,"types":[]},{"text":"impl Freeze for CpuInfo","synthetic":true,"types":[]},{"text":"impl Freeze for CGroupController","synthetic":true,"types":[]},{"text":"impl Freeze for ProcessCgroup","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for DropCache","synthetic":true,"types":[]},{"text":"impl Freeze for PressureRecord","synthetic":true,"types":[]},{"text":"impl Freeze for CpuPressure","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryPressure","synthetic":true,"types":[]},{"text":"impl Freeze for IoPressure","synthetic":true,"types":[]},{"text":"impl Freeze for DiskStat","synthetic":true,"types":[]},{"text":"impl Freeze for ProcError","synthetic":true,"types":[]},{"text":"impl Freeze for InternalError","synthetic":true,"types":[]},{"text":"impl Freeze for LoadAverage","synthetic":true,"types":[]},{"text":"impl Freeze for ConfigSetting","synthetic":true,"types":[]},{"text":"impl Freeze for CpuTime","synthetic":true,"types":[]},{"text":"impl Freeze for KernelStats","synthetic":true,"types":[]},{"text":"impl Freeze for KernelModule","synthetic":true,"types":[]}];
implementors["procinfo"] = [{"text":"impl Freeze for LoadAvg","synthetic":true,"types":[]},{"text":"impl Freeze for Io","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Limits","synthetic":true,"types":[]},{"text":"impl Freeze for Mountinfo","synthetic":true,"types":[]},{"text":"impl Freeze for Stat","synthetic":true,"types":[]},{"text":"impl Freeze for Statm","synthetic":true,"types":[]},{"text":"impl Freeze for SeccompMode","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl Freeze for Cpu","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for DeviceStatus","synthetic":true,"types":[]}];
implementors["prometheus"] = [{"text":"impl !Freeze for LabelPair","synthetic":true,"types":[]},{"text":"impl !Freeze for Gauge","synthetic":true,"types":[]},{"text":"impl !Freeze for Counter","synthetic":true,"types":[]},{"text":"impl !Freeze for Quantile","synthetic":true,"types":[]},{"text":"impl !Freeze for Summary","synthetic":true,"types":[]},{"text":"impl !Freeze for Untyped","synthetic":true,"types":[]},{"text":"impl !Freeze for Histogram","synthetic":true,"types":[]},{"text":"impl !Freeze for Bucket","synthetic":true,"types":[]},{"text":"impl !Freeze for Metric","synthetic":true,"types":[]},{"text":"impl !Freeze for MetricFamily","synthetic":true,"types":[]},{"text":"impl Freeze for MetricType","synthetic":true,"types":[]},{"text":"impl !Freeze for AtomicF64","synthetic":true,"types":[]},{"text":"impl !Freeze for AtomicI64","synthetic":true,"types":[]},{"text":"impl !Freeze for AtomicU64","synthetic":true,"types":[]},{"text":"impl&lt;T, V, D&gt; Freeze for AFLocalCounter&lt;T, V, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Freeze for AFLocalHistogram&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for GenericCounter&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !Freeze for GenericLocalCounter&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for GenericLocalCounterVec&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Desc","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufEncoder","synthetic":true,"types":[]},{"text":"impl Freeze for TextEncoder","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for GenericGauge&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for HistogramOpts","synthetic":true,"types":[]},{"text":"impl Freeze for HistogramTimer","synthetic":true,"types":[]},{"text":"impl Freeze for Histogram","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalHistogram","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalHistogramTimer","synthetic":true,"types":[]},{"text":"impl Freeze for LocalHistogramVec","synthetic":true,"types":[]},{"text":"impl Freeze for Opts","synthetic":true,"types":[]},{"text":"impl Freeze for BasicAuthentication","synthetic":true,"types":[]},{"text":"impl Freeze for Registry","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MetricVec&lt;T&gt;","synthetic":true,"types":[]}];
implementors["prost"] = [{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for EncodeError","synthetic":true,"types":[]}];
implementors["protobuf"] = [{"text":"impl Freeze for WireType","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl !Freeze for FileDescriptorSet","synthetic":true,"types":[]},{"text":"impl !Freeze for FileDescriptorProto","synthetic":true,"types":[]},{"text":"impl !Freeze for DescriptorProto","synthetic":true,"types":[]},{"text":"impl !Freeze for DescriptorProto_ExtensionRange","synthetic":true,"types":[]},{"text":"impl !Freeze for DescriptorProto_ReservedRange","synthetic":true,"types":[]},{"text":"impl !Freeze for FieldDescriptorProto","synthetic":true,"types":[]},{"text":"impl Freeze for FieldDescriptorProto_Type","synthetic":true,"types":[]},{"text":"impl Freeze for FieldDescriptorProto_Label","synthetic":true,"types":[]},{"text":"impl !Freeze for OneofDescriptorProto","synthetic":true,"types":[]},{"text":"impl !Freeze for EnumDescriptorProto","synthetic":true,"types":[]},{"text":"impl !Freeze for EnumValueDescriptorProto","synthetic":true,"types":[]},{"text":"impl !Freeze for ServiceDescriptorProto","synthetic":true,"types":[]},{"text":"impl !Freeze for MethodDescriptorProto","synthetic":true,"types":[]},{"text":"impl !Freeze for FileOptions","synthetic":true,"types":[]},{"text":"impl Freeze for FileOptions_OptimizeMode","synthetic":true,"types":[]},{"text":"impl !Freeze for MessageOptions","synthetic":true,"types":[]},{"text":"impl !Freeze for FieldOptions","synthetic":true,"types":[]},{"text":"impl Freeze for FieldOptions_CType","synthetic":true,"types":[]},{"text":"impl Freeze for FieldOptions_JSType","synthetic":true,"types":[]},{"text":"impl !Freeze for OneofOptions","synthetic":true,"types":[]},{"text":"impl !Freeze for EnumOptions","synthetic":true,"types":[]},{"text":"impl !Freeze for EnumValueOptions","synthetic":true,"types":[]},{"text":"impl !Freeze for ServiceOptions","synthetic":true,"types":[]},{"text":"impl !Freeze for MethodOptions","synthetic":true,"types":[]},{"text":"impl !Freeze for UninterpretedOption","synthetic":true,"types":[]},{"text":"impl !Freeze for UninterpretedOption_NamePart","synthetic":true,"types":[]},{"text":"impl !Freeze for SourceCodeInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for SourceCodeInfo_Location","synthetic":true,"types":[]},{"text":"impl !Freeze for GeneratedCodeInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for GeneratedCodeInfo_Annotation","synthetic":true,"types":[]},{"text":"impl !Freeze for CodeGeneratorRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for CodeGeneratorResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for CodeGeneratorResponse_File","synthetic":true,"types":[]},{"text":"impl Freeze for WireError","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufError","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; Freeze for ExtFieldOptional&lt;M, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; Freeze for ExtFieldRepeated&lt;M, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Lazy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ProtobufValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FieldDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for MessageDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for EnumValueDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for EnumDescriptor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReflectFieldRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RepeatedField&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SingularField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SingularPtrField&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CodedInputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CodedOutputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeFloat","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeDouble","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeInt32","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeInt64","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeUint32","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeUint64","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeSint32","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeSint64","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeFixed32","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeFixed64","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeSfixed32","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeSfixed64","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeBool","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeString","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeBytes","synthetic":true,"types":[]},{"text":"impl Freeze for ProtobufTypeChars","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ProtobufTypeEnum&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Freeze for ProtobufTypeMessage&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Any","synthetic":true,"types":[]},{"text":"impl !Freeze for Api","synthetic":true,"types":[]},{"text":"impl !Freeze for Method","synthetic":true,"types":[]},{"text":"impl !Freeze for Mixin","synthetic":true,"types":[]},{"text":"impl !Freeze for Duration","synthetic":true,"types":[]},{"text":"impl !Freeze for Empty","synthetic":true,"types":[]},{"text":"impl !Freeze for FieldMask","synthetic":true,"types":[]},{"text":"impl !Freeze for SourceContext","synthetic":true,"types":[]},{"text":"impl !Freeze for Struct","synthetic":true,"types":[]},{"text":"impl !Freeze for Value","synthetic":true,"types":[]},{"text":"impl !Freeze for Value_oneof_kind","synthetic":true,"types":[]},{"text":"impl !Freeze for ListValue","synthetic":true,"types":[]},{"text":"impl Freeze for NullValue","synthetic":true,"types":[]},{"text":"impl !Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl !Freeze for Type","synthetic":true,"types":[]},{"text":"impl !Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for Field_Kind","synthetic":true,"types":[]},{"text":"impl Freeze for Field_Cardinality","synthetic":true,"types":[]},{"text":"impl !Freeze for Enum","synthetic":true,"types":[]},{"text":"impl !Freeze for EnumValue","synthetic":true,"types":[]},{"text":"impl !Freeze for Option","synthetic":true,"types":[]},{"text":"impl Freeze for Syntax","synthetic":true,"types":[]},{"text":"impl !Freeze for DoubleValue","synthetic":true,"types":[]},{"text":"impl !Freeze for FloatValue","synthetic":true,"types":[]},{"text":"impl !Freeze for Int64Value","synthetic":true,"types":[]},{"text":"impl !Freeze for UInt64Value","synthetic":true,"types":[]},{"text":"impl !Freeze for Int32Value","synthetic":true,"types":[]},{"text":"impl !Freeze for UInt32Value","synthetic":true,"types":[]},{"text":"impl !Freeze for BoolValue","synthetic":true,"types":[]},{"text":"impl !Freeze for StringValue","synthetic":true,"types":[]},{"text":"impl !Freeze for BytesValue","synthetic":true,"types":[]},{"text":"impl !Freeze for CachedSize","synthetic":true,"types":[]},{"text":"impl Freeze for UnknownValue","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; Freeze for UnknownValueRef&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UnknownValues","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; Freeze for UnknownValuesIter&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UnknownFields","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; Freeze for UnknownFieldsIter&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; Freeze for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quick_xml"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BytesStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BytesDecl&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BytesEnd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BytesText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["raft"] = [{"text":"impl&lt;'a&gt; Freeze for Changer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for StorageError","synthetic":true,"types":[]},{"text":"impl !Freeze for Unstable","synthetic":true,"types":[]},{"text":"impl Freeze for Configuration","synthetic":true,"types":[]},{"text":"impl Freeze for Configuration","synthetic":true,"types":[]},{"text":"impl Freeze for StateRole","synthetic":true,"types":[]},{"text":"impl Freeze for SoftState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Raft&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RaftLog&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Peer","synthetic":true,"types":[]},{"text":"impl Freeze for SnapshotStatus","synthetic":true,"types":[]},{"text":"impl !Freeze for Ready","synthetic":true,"types":[]},{"text":"impl Freeze for LightReady","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RawNode&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReadOnlyOption","synthetic":true,"types":[]},{"text":"impl Freeze for ReadState","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for Status&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftState","synthetic":true,"types":[]},{"text":"impl !Freeze for MemStorageCore","synthetic":true,"types":[]},{"text":"impl Freeze for MemStorage","synthetic":true,"types":[]},{"text":"impl Freeze for Inflights","synthetic":true,"types":[]},{"text":"impl Freeze for Progress","synthetic":true,"types":[]},{"text":"impl Freeze for ProgressState","synthetic":true,"types":[]},{"text":"impl Freeze for ProgressTracker","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Union&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["raft_engine"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RecoveryMode","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;E, W&gt; Freeze for LogBatch&lt;E, W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CacheStats","synthetic":true,"types":[]},{"text":"impl !Freeze for GlobalStats","synthetic":true,"types":[]}];
implementors["raft_log_engine"] = [{"text":"impl Freeze for EntryExtTyped","synthetic":true,"types":[]},{"text":"impl Freeze for RaftLogEngine","synthetic":true,"types":[]},{"text":"impl Freeze for RaftLogBatch","synthetic":true,"types":[]}];
implementors["raft_proto"] = [{"text":"impl !Freeze for Entry","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapshotMetadata","synthetic":true,"types":[]},{"text":"impl !Freeze for Snapshot","synthetic":true,"types":[]},{"text":"impl !Freeze for Message","synthetic":true,"types":[]},{"text":"impl !Freeze for HardState","synthetic":true,"types":[]},{"text":"impl !Freeze for ConfState","synthetic":true,"types":[]},{"text":"impl !Freeze for ConfChange","synthetic":true,"types":[]},{"text":"impl !Freeze for ConfChangeSingle","synthetic":true,"types":[]},{"text":"impl !Freeze for ConfChangeV2","synthetic":true,"types":[]},{"text":"impl Freeze for EntryType","synthetic":true,"types":[]},{"text":"impl Freeze for MessageType","synthetic":true,"types":[]},{"text":"impl Freeze for ConfChangeTransition","synthetic":true,"types":[]},{"text":"impl Freeze for ConfChangeType","synthetic":true,"types":[]}];
implementors["raftstore"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for ConsistencyCheckMethod","synthetic":true,"types":[]},{"text":"impl Freeze for SplitCheckConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Raw&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Entry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BoxAdminObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WrappedAdminObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BoxQueryObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WrappedQueryObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BoxApplySnapshotObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WrappedApplySnapshotObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BoxSplitCheckObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; Freeze for WrappedSplitCheckObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BoxRoleObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WrappedRoleObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BoxRegionChangeObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WrappedRegionChangeObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BoxReadIndexObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WrappedReadIndexObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BoxCmdObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; Freeze for WrappedCmdObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BoxConsistencyCheckObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; Freeze for WrappedConsistencyCheckObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Registry&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CoprocessorHost&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for REGION_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for REGION_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for REGION_COUNT_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftStoreEvent","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionInfoQuery","synthetic":true,"types":[]},{"text":"impl Freeze for RegionEventListener","synthetic":true,"types":[]},{"text":"impl Freeze for RegionCollector","synthetic":true,"types":[]},{"text":"impl Freeze for RegionInfoAccessor","synthetic":true,"types":[]},{"text":"impl !Freeze for MockRegionInfoProvider","synthetic":true,"types":[]},{"text":"impl Freeze for Checker","synthetic":true,"types":[]},{"text":"impl Freeze for HalfCheckObserver","synthetic":true,"types":[]},{"text":"impl Freeze for Checker","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Freeze for KeysCheckObserver&lt;C, E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Checker","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Freeze for SizeCheckObserver&lt;C, E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Checker","synthetic":true,"types":[]},{"text":"impl Freeze for TableCheckObserver","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for Host&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SplitObserver","synthetic":true,"types":[]},{"text":"impl Freeze for KeyEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ObserverContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RegionChangeEvent","synthetic":true,"types":[]},{"text":"impl !Freeze for Cmd","synthetic":true,"types":[]},{"text":"impl Freeze for CmdBatch","synthetic":true,"types":[]},{"text":"impl Freeze for DiscardReason","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RaftStoreBlackHole","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Freeze for ServerRaftStoreRouter&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CONFIG_RAFTSTORE_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for RaftstoreConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for PendingCmd&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for PendingCmdQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangePeer","synthetic":true,"types":[]},{"text":"impl Freeze for Range","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for ExecResult&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for ApplyResult&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for ExecContext","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Freeze for ApplyCallback&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !Freeze for ApplyContext&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WaitSourceMergeState","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Freeze for YieldState&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NewSplitPeer","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Freeze for ApplyDelegate&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Apply&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Registration","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Proposal&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Destroy","synthetic":true,"types":[]},{"text":"impl !Freeze for CatchUpLogs","synthetic":true,"types":[]},{"text":"impl Freeze for GenSnapTask","synthetic":true,"types":[]},{"text":"impl Freeze for ObserveID","synthetic":true,"types":[]},{"text":"impl Freeze for ObserveCmd","synthetic":true,"types":[]},{"text":"impl Freeze for ChangeCmd","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Freeze for Msg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ApplyMetrics","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for ApplyRes&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for TaskRes&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Freeze for ApplyFsm&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ControlMsg","synthetic":true,"types":[]},{"text":"impl Freeze for ControlFsm","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !Freeze for ApplyPoller&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !Freeze for Builder&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Freeze for ApplyRouter&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Freeze for ApplyBatchSystem&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for APPLY_PROPOSAL","synthetic":true,"types":[]},{"text":"impl !Freeze for StoreStat","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalStoreStat","synthetic":true,"types":[]},{"text":"impl Freeze for LocalStoreStat","synthetic":true,"types":[]},{"text":"impl !Freeze for DestroyPeerJob","synthetic":true,"types":[]},{"text":"impl !Freeze for CollectedReady","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Freeze for PeerFsm&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Freeze for BatchRaftCmdRequestBuilder&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, EK, ER, T&gt; Freeze for PeerFsmDelegate&lt;'a, EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for StoreInfo&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StoreMeta","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Freeze for RaftRouter&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PeerTickBatch","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !Freeze for PollContext&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Store","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Freeze for StoreFsm&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, EK, ER, T&gt; Freeze for StoreFsmDelegate&lt;'a, EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !Freeze for RaftPoller&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !Freeze for RaftPollerBuilder&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Freeze for Workers&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Freeze for RaftBatchSystem&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CheckMsgStatus","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for ReadResponse&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteResponse","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Callback&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PeerTicks","synthetic":true,"types":[]},{"text":"impl Freeze for StoreTick","synthetic":true,"types":[]},{"text":"impl Freeze for MergeResultKind","synthetic":true,"types":[]},{"text":"impl&lt;SK&gt; !Freeze for SignificantMsg&lt;SK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Freeze for CasualMessage&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for RaftCommand&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Freeze for PeerMsg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Freeze for StoreMsg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AdminCmdEpochState","synthetic":true,"types":[]},{"text":"impl Freeze for ADMIN_CMD_EPOCH_MAP","synthetic":true,"types":[]},{"text":"impl Freeze for Lease","synthetic":true,"types":[]},{"text":"impl Freeze for LeaseState","synthetic":true,"types":[]},{"text":"impl Freeze for RemoteLease","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for KeysInfoFormatter&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ConfChangeKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MsgType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for COMPACTION_GUARD","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for CompactionGuardGeneratorFactory&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for CompactionGuardGenerator&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GroupState","synthetic":true,"types":[]},{"text":"impl Freeze for LeaderState","synthetic":true,"types":[]},{"text":"impl Freeze for HibernateState","synthetic":true,"types":[]},{"text":"impl Freeze for RaftReadyMetrics","synthetic":true,"types":[]},{"text":"impl Freeze for RaftMessageMetrics","synthetic":true,"types":[]},{"text":"impl Freeze for RaftMessageDropMetrics","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftProposeMetrics","synthetic":true,"types":[]},{"text":"impl Freeze for RaftInvalidProposeMetrics","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftMetrics","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftEventDurationInner","synthetic":true,"types":[]},{"text":"impl Freeze for RaftEventDurationDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for RaftEventDuration","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftInvalidProposalCountInner","synthetic":true,"types":[]},{"text":"impl Freeze for RaftInvalidProposalCountDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for RaftInvalidProposalCount","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftEntryFetchesInner","synthetic":true,"types":[]},{"text":"impl Freeze for RaftEntryFetchesDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for RaftEntryFetches","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapCfInner","synthetic":true,"types":[]},{"text":"impl Freeze for SnapCfDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for SnapCf","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapCfSizeInner","synthetic":true,"types":[]},{"text":"impl Freeze for SnapCfSizeDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for SnapCfSize","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionHashCounterInner","synthetic":true,"types":[]},{"text":"impl Freeze for RegionHashCounterDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionHashCounter2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for RegionHashCounter2Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for RegionHashCounter","synthetic":true,"types":[]},{"text":"impl !Freeze for ProposalVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for ProposalVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for ProposalVec","synthetic":true,"types":[]},{"text":"impl !Freeze for AdminCmdVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for AdminCmdVecDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for AdminCmdVec2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for AdminCmdVec2Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for AdminCmdVec","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftReadyVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for RaftReadyVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for RaftReadyVec","synthetic":true,"types":[]},{"text":"impl !Freeze for MessageCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for MessageCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for MessageCounterVec","synthetic":true,"types":[]},{"text":"impl !Freeze for RaftDropedVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for RaftDropedVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for RaftDropedVec","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapValidVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for SnapValidVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for SnapValidVec","synthetic":true,"types":[]},{"text":"impl !Freeze for PerfContextTimeDurationInner","synthetic":true,"types":[]},{"text":"impl Freeze for PerfContextTimeDurationDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for PerfContextTimeDuration","synthetic":true,"types":[]},{"text":"impl !Freeze for CompactionGuardActionVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionGuardActionVecDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for CompactionGuardActionVec2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionGuardActionVec2Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionGuardActionVec","synthetic":true,"types":[]},{"text":"impl Freeze for PerfContextType","synthetic":true,"types":[]},{"text":"impl Freeze for ProposalType","synthetic":true,"types":[]},{"text":"impl Freeze for AdminCmdType","synthetic":true,"types":[]},{"text":"impl Freeze for AdminCmdStatus","synthetic":true,"types":[]},{"text":"impl Freeze for RaftReadyType","synthetic":true,"types":[]},{"text":"impl Freeze for MessageCounterType","synthetic":true,"types":[]},{"text":"impl Freeze for RaftDroppedMessage","synthetic":true,"types":[]},{"text":"impl Freeze for SnapValidationType","synthetic":true,"types":[]},{"text":"impl Freeze for RegionHashType","synthetic":true,"types":[]},{"text":"impl Freeze for RegionHashResult","synthetic":true,"types":[]},{"text":"impl Freeze for CfNames","synthetic":true,"types":[]},{"text":"impl Freeze for RaftEntryType","synthetic":true,"types":[]},{"text":"impl Freeze for RaftInvalidProposal","synthetic":true,"types":[]},{"text":"impl Freeze for RaftEventDurationType","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionGuardAction","synthetic":true,"types":[]},{"text":"impl Freeze for PEER_PROPOSAL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for PEER_PROPOSAL_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for PEER_ADMIN_CMD_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for PEER_ADMIN_CMD_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for PEER_APPEND_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for PEER_COMMIT_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_APPLY_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for APPLY_TASK_WAIT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_RAFT_READY_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_RAFT_READY_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_RAFT_SENT_MESSAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_RAFT_SENT_MESSAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_RAFT_DROPPED_MESSAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_RAFT_DROPPED_MESSAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_SNAPSHOT_TRAFFIC_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_SNAPSHOT_VALIDATION_FAILURE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_SNAPSHOT_VALIDATION_FAILURE_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for PEER_RAFT_PROCESS_DURATION","synthetic":true,"types":[]},{"text":"impl Freeze for PEER_PROPOSE_LOG_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for REGION_HASH_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for REGION_HASH_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for REGION_MAX_LOG_LAG","synthetic":true,"types":[]},{"text":"impl Freeze for REQUEST_WAIT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for PEER_GC_RAFT_LOG_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for UPDATE_REGION_SIZE_BY_COMPACTION_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for COMPACTION_RELATED_REGION_COUNT","synthetic":true,"types":[]},{"text":"impl Freeze for COMPACTION_DECLINED_BYTES","synthetic":true,"types":[]},{"text":"impl Freeze for SNAPSHOT_CF_KV_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SNAPSHOT_CF_KV_COUNT","synthetic":true,"types":[]},{"text":"impl Freeze for SNAPSHOT_CF_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SNAPSHOT_CF_SIZE","synthetic":true,"types":[]},{"text":"impl Freeze for SNAPSHOT_BUILD_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for SNAPSHOT_KV_COUNT_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for SNAPSHOT_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_ENTRY_FETCHES_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_ENTRY_FETCHES","synthetic":true,"types":[]},{"text":"impl Freeze for LEADER_MISSING","synthetic":true,"types":[]},{"text":"impl Freeze for INGEST_SST_DURATION_SECONDS","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_INVALID_PROPOSAL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_INVALID_PROPOSAL_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_EVENT_DURATION_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_EVENT_DURATION","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_READ_INDEX_PENDING_DURATION","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_READ_INDEX_PENDING_COUNT","synthetic":true,"types":[]},{"text":"impl Freeze for APPLY_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for APPLY_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for STORE_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for READ_QPS_TOPN","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_ENTRIES_CACHES_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for APPLY_PENDING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for APPLY_PENDING_ENTRIES_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for COMPACTION_GUARD_ACTION_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for COMPACTION_GUARD_ACTION_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for StaleState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ProposalQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ProposalContext","synthetic":true,"types":[]},{"text":"impl Freeze for ConsistencyState","synthetic":true,"types":[]},{"text":"impl Freeze for PeerStat","synthetic":true,"types":[]},{"text":"impl Freeze for CheckTickResult","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ProposedAdminCmd&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for CmdEpochChecker&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Freeze for Peer&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RequestPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for CheckApplyingSnapStatus","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapState","synthetic":true,"types":[]},{"text":"impl !Freeze for EntryCache","synthetic":true,"types":[]},{"text":"impl !Freeze for ApplySnapResult","synthetic":true,"types":[]},{"text":"impl !Freeze for InvokeContext","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Freeze for PeerStorage&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ReadIndexRequest&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ReadIndexQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for ReadIndexContext","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for RegionSnapshot&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for RegionIterator&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Iterable&gt;::Iterator: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StoreGroup","synthetic":true,"types":[]},{"text":"impl !Freeze for GlobalReplicationState","synthetic":true,"types":[]},{"text":"impl Freeze for BuildStatistics","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for SnapKey","synthetic":true,"types":[]},{"text":"impl Freeze for SnapshotStatistics","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Freeze for ApplyOptions&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CfFileForRecving","synthetic":true,"types":[]},{"text":"impl Freeze for CfFile","synthetic":true,"types":[]},{"text":"impl !Freeze for MetaFile","synthetic":true,"types":[]},{"text":"impl !Freeze for Snap","synthetic":true,"types":[]},{"text":"impl Freeze for CheckPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for ApplyAbortChecker","synthetic":true,"types":[]},{"text":"impl Freeze for SnapEntry","synthetic":true,"types":[]},{"text":"impl Freeze for SnapStats","synthetic":true,"types":[]},{"text":"impl Freeze for SnapManagerCore","synthetic":true,"types":[]},{"text":"impl Freeze for SnapManager","synthetic":true,"types":[]},{"text":"impl Freeze for SnapManagerBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Task","synthetic":true,"types":[]},{"text":"impl&lt;E, C, S&gt; Freeze for Runner&lt;E, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Task","synthetic":true,"types":[]},{"text":"impl&lt;EK, C, S&gt; Freeze for Runner&lt;EK, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Task","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Runner&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for Task&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, C&gt; Freeze for Runner&lt;EK, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapCounterInner","synthetic":true,"types":[]},{"text":"impl Freeze for SnapCounterDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapCounter2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for SnapCounter2Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for SnapCounter","synthetic":true,"types":[]},{"text":"impl !Freeze for CheckSplitCounterInner","synthetic":true,"types":[]},{"text":"impl Freeze for CheckSplitCounterDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for CheckSplitCounter","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapHistogramInner","synthetic":true,"types":[]},{"text":"impl Freeze for SnapHistogramDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for SnapHistogram","synthetic":true,"types":[]},{"text":"impl Freeze for ReadRejectCounter","synthetic":true,"types":[]},{"text":"impl Freeze for SnapType","synthetic":true,"types":[]},{"text":"impl Freeze for SnapStatus","synthetic":true,"types":[]},{"text":"impl Freeze for RejectReason","synthetic":true,"types":[]},{"text":"impl Freeze for SNAP_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SNAP_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for CHECK_SPILT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for CHECK_SPILT_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for SNAP_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SNAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for CHECK_SPILT_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for COMPACT_RANGE_CF","synthetic":true,"types":[]},{"text":"impl Freeze for REGION_HASH_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for STALE_PEER_PENDING_DELETE_RANGE_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for LOCAL_READ_REJECT_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for LOCAL_READ_REJECT","synthetic":true,"types":[]},{"text":"impl Freeze for LOCAL_READ_EXECUTED_REQUESTS","synthetic":true,"types":[]},{"text":"impl Freeze for LOCAL_READ_EXECUTED_CACHE_REQUESTS","synthetic":true,"types":[]},{"text":"impl Freeze for FlowStatistics","synthetic":true,"types":[]},{"text":"impl !Freeze for HeartbeatTask","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Freeze for Task&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for StoreStat","synthetic":true,"types":[]},{"text":"impl Freeze for PeerStat","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Freeze for StatsMonitor&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !Freeze for Runner&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Task","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, R&gt; !Freeze for Runner&lt;EK, ER, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDelegate","synthetic":true,"types":[]},{"text":"impl Freeze for TrackVer","synthetic":true,"types":[]},{"text":"impl !Freeze for Progress","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; !Freeze for LocalReader&lt;C, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 'm&gt; Freeze for Inspector&lt;'r, 'm&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReadMetrics","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for Task&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StalePeerInfo","synthetic":true,"types":[]},{"text":"impl Freeze for PendingDeleteRanges","synthetic":true,"types":[]},{"text":"impl&lt;EK, R&gt; Freeze for SnapContext&lt;EK, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EK: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;EK, R&gt; !Freeze for Runner&lt;EK, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MergedIterator&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Task","synthetic":true,"types":[]},{"text":"impl&lt;E, S&gt; Freeze for Runner&lt;E, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SplitConfig","synthetic":true,"types":[]},{"text":"impl Freeze for SplitConfigManager","synthetic":true,"types":[]},{"text":"impl !Freeze for SplitInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Sample","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for Recorder","synthetic":true,"types":[]},{"text":"impl Freeze for ReadStats","synthetic":true,"types":[]},{"text":"impl Freeze for AutoSplitController","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Freeze for Bernoulli","synthetic":true,"types":[]},{"text":"impl Freeze for BernoulliError","synthetic":true,"types":[]},{"text":"impl Freeze for Binomial","synthetic":true,"types":[]},{"text":"impl Freeze for Cauchy","synthetic":true,"types":[]},{"text":"impl Freeze for Dirichlet","synthetic":true,"types":[]},{"text":"impl Freeze for Exp1","synthetic":true,"types":[]},{"text":"impl Freeze for Exp","synthetic":true,"types":[]},{"text":"impl Freeze for Gamma","synthetic":true,"types":[]},{"text":"impl Freeze for ChiSquared","synthetic":true,"types":[]},{"text":"impl Freeze for FisherF","synthetic":true,"types":[]},{"text":"impl Freeze for StudentT","synthetic":true,"types":[]},{"text":"impl Freeze for Beta","synthetic":true,"types":[]},{"text":"impl Freeze for StandardNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Normal","synthetic":true,"types":[]},{"text":"impl Freeze for LogNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Pareto","synthetic":true,"types":[]},{"text":"impl Freeze for Poisson","synthetic":true,"types":[]},{"text":"impl Freeze for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UniformDuration","synthetic":true,"types":[]},{"text":"impl Freeze for UnitCircle","synthetic":true,"types":[]},{"text":"impl Freeze for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Freeze for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WeightedError","synthetic":true,"types":[]},{"text":"impl Freeze for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Freeze for Open01","synthetic":true,"types":[]},{"text":"impl Freeze for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Freeze for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Freeze for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EntropyRng","synthetic":true,"types":[]},{"text":"impl Freeze for StepRng","synthetic":true,"types":[]},{"text":"impl Freeze for StdRng","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadRng","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Freeze for SliceChooseIter&lt;'a, S, T&gt;","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Freeze for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OsRng","synthetic":true,"types":[]}];
implementors["rand_isaac"] = [{"text":"impl Freeze for IsaacRng","synthetic":true,"types":[]},{"text":"impl Freeze for IsaacCore","synthetic":true,"types":[]},{"text":"impl Freeze for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl Freeze for Isaac64Core","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Freeze for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Freeze for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Freeze for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Freeze for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Freeze for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Freeze for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Freeze for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Freeze for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !Freeze for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !Freeze for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !Freeze for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPool","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ThreadPoolBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Configuration","synthetic":true,"types":[]},{"text":"impl Freeze for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;T, S&gt; Freeze for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl Freeze for WithComments","synthetic":true,"types":[]},{"text":"impl Freeze for Comment","synthetic":true,"types":[]},{"text":"impl Freeze for Ast","synthetic":true,"types":[]},{"text":"impl Freeze for Alternation","synthetic":true,"types":[]},{"text":"impl Freeze for Concat","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for LiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerl","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAscii","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSet","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for Assertion","synthetic":true,"types":[]},{"text":"impl Freeze for AssertionKind","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureName","synthetic":true,"types":[]},{"text":"impl Freeze for SetFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItem","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Freeze for Flag","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Literals","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Translator","synthetic":true,"types":[]},{"text":"impl Freeze for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Hir","synthetic":true,"types":[]},{"text":"impl Freeze for HirKind","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for WordBoundary","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Range","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequences","synthetic":true,"types":[]}];
implementors["reqwest"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Form","synthetic":true,"types":[]},{"text":"impl !Freeze for Part","synthetic":true,"types":[]},{"text":"impl !Freeze for Body","synthetic":true,"types":[]},{"text":"impl Freeze for Client","synthetic":true,"types":[]},{"text":"impl Freeze for ClientBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Request","synthetic":true,"types":[]},{"text":"impl !Freeze for RequestBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Response","synthetic":true,"types":[]},{"text":"impl !Freeze for Body","synthetic":true,"types":[]},{"text":"impl Freeze for Client","synthetic":true,"types":[]},{"text":"impl Freeze for ClientBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Form","synthetic":true,"types":[]},{"text":"impl !Freeze for Part","synthetic":true,"types":[]},{"text":"impl !Freeze for Request","synthetic":true,"types":[]},{"text":"impl !Freeze for RequestBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Response","synthetic":true,"types":[]},{"text":"impl !Freeze for Proxy","synthetic":true,"types":[]},{"text":"impl Freeze for Policy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Attempt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Action","synthetic":true,"types":[]},{"text":"impl Freeze for Certificate","synthetic":true,"types":[]},{"text":"impl Freeze for Identity","synthetic":true,"types":[]}];
implementors["resolved_ts"] = [{"text":"impl Freeze for Resolver","synthetic":true,"types":[]},{"text":"impl Freeze for ChangeRow","synthetic":true,"types":[]},{"text":"impl !Freeze for ChangeLog","synthetic":true,"types":[]},{"text":"impl Freeze for KeyOp","synthetic":true,"types":[]},{"text":"impl Freeze for RowChange","synthetic":true,"types":[]}];
implementors["rev_lines"] = [{"text":"impl&lt;R&gt; Freeze for RevLines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rgb"] = [{"text":"impl&lt;ComponentType&gt; Freeze for BGR&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Freeze for BGRA&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType&gt; Freeze for Gray&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Freeze for GrayAlpha&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType&gt; Freeze for RGB&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Freeze for RGBA&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl Freeze for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SealingKey","synthetic":true,"types":[]},{"text":"impl Freeze for OpeningKey","synthetic":true,"types":[]},{"text":"impl Freeze for Nonce","synthetic":true,"types":[]},{"text":"impl Freeze for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UnboundKey","synthetic":true,"types":[]},{"text":"impl Freeze for LessSafeKey","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for Digest","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Unspecified","synthetic":true,"types":[]},{"text":"impl Freeze for KeyRejected","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Salt","synthetic":true,"types":[]},{"text":"impl Freeze for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Freeze for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SystemRandom","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for RsaParameters","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rocksdb"] = [{"text":"impl Freeze for CompactionFilterDecision","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionFilterHandle","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionFilterContext","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionFilterFactoryHandle","synthetic":true,"types":[]},{"text":"impl Freeze for ComparatorCallback","synthetic":true,"types":[]},{"text":"impl Freeze for FileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for FlushJobInfo","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionJobInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SubcompactionJobInfo","synthetic":true,"types":[]},{"text":"impl Freeze for IngestionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for WriteStallInfo","synthetic":true,"types":[]},{"text":"impl Freeze for MergeOperatorCallback","synthetic":true,"types":[]},{"text":"impl Freeze for MergeOperands","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnFamilyMetaData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LevelMetaData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SstFileMetaData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PerfLevel","synthetic":true,"types":[]},{"text":"impl Freeze for PerfContext","synthetic":true,"types":[]},{"text":"impl Freeze for IOStatsContext","synthetic":true,"types":[]},{"text":"impl Freeze for CFHandle","synthetic":true,"types":[]},{"text":"impl Freeze for MapProperty","synthetic":true,"types":[]},{"text":"impl Freeze for DB","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Snapshot&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for DBIterator&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Range&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for KeyVersion","synthetic":true,"types":[]},{"text":"impl Freeze for DBVector","synthetic":true,"types":[]},{"text":"impl Freeze for BackupEngine","synthetic":true,"types":[]},{"text":"impl Freeze for SstFileReader","synthetic":true,"types":[]},{"text":"impl Freeze for SstFileWriter","synthetic":true,"types":[]},{"text":"impl Freeze for ExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Env","synthetic":true,"types":[]},{"text":"impl Freeze for SequentialFile","synthetic":true,"types":[]},{"text":"impl Freeze for Cache","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryAllocator","synthetic":true,"types":[]},{"text":"impl Freeze for HistogramData","synthetic":true,"types":[]},{"text":"impl Freeze for BlockBasedOptions","synthetic":true,"types":[]},{"text":"impl Freeze for RateLimiter","synthetic":true,"types":[]},{"text":"impl Freeze for UnsafeSnap","synthetic":true,"types":[]},{"text":"impl Freeze for ReadOptions","synthetic":true,"types":[]},{"text":"impl Freeze for WriteOptions","synthetic":true,"types":[]},{"text":"impl Freeze for CompactOptions","synthetic":true,"types":[]},{"text":"impl Freeze for CompactionOptions","synthetic":true,"types":[]},{"text":"impl Freeze for DBOptions","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ColumnFamilyDescriptor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for FlushOptions","synthetic":true,"types":[]},{"text":"impl Freeze for IngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl Freeze for EnvOptions","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreOptions","synthetic":true,"types":[]},{"text":"impl Freeze for FifoCompactionOptions","synthetic":true,"types":[]},{"text":"impl Freeze for LRUCacheOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SstPartitionerRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SstPartitionerContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TablePropertiesCollectionView","synthetic":true,"types":[]},{"text":"impl Freeze for TablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl Freeze for TableProperties","synthetic":true,"types":[]},{"text":"impl Freeze for UserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Freeze for TablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl Freeze for TablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl Freeze for TablePropertiesKey","synthetic":true,"types":[]},{"text":"impl Freeze for TableProperties","synthetic":true,"types":[]},{"text":"impl Freeze for UserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Freeze for TitanDBOptions","synthetic":true,"types":[]},{"text":"impl Freeze for TitanBlobIndex","synthetic":true,"types":[]},{"text":"impl Freeze for WriteBatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WriteBatchIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WriteBatchRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rusoto_core"] = [{"text":"impl&lt;E&gt; !Freeze for RusotoError&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EventStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for HttpResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for BufferedHttpResponse","synthetic":true,"types":[]},{"text":"impl Freeze for HttpDispatchError","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for HttpClient&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for HttpConfig","synthetic":true,"types":[]},{"text":"impl Freeze for TlsError","synthetic":true,"types":[]}];
implementors["rusoto_credential"] = [{"text":"impl Freeze for ContainerProvider","synthetic":true,"types":[]},{"text":"impl Freeze for EnvironmentProvider","synthetic":true,"types":[]},{"text":"impl Freeze for InstanceMetadataProvider","synthetic":true,"types":[]},{"text":"impl Freeze for ProfileProvider","synthetic":true,"types":[]},{"text":"impl Freeze for Secret","synthetic":true,"types":[]},{"text":"impl Freeze for StaticProvider","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Variable&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AwsCredentials","synthetic":true,"types":[]},{"text":"impl Freeze for CredentialsError","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for AutoRefreshingProvider&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Freeze for ChainProvider","synthetic":true,"types":[]}];
implementors["rusoto_kms"] = [{"text":"impl Freeze for AliasListEntry","synthetic":true,"types":[]},{"text":"impl Freeze for CancelKeyDeletionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CancelKeyDeletionResponse","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Freeze for CreateAliasRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CreateCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CreateCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Freeze for CreateGrantRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CreateGrantResponse","synthetic":true,"types":[]},{"text":"impl Freeze for CreateKeyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CreateKeyResponse","synthetic":true,"types":[]},{"text":"impl Freeze for CustomKeyStoresListEntry","synthetic":true,"types":[]},{"text":"impl !Freeze for DecryptRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for DecryptResponse","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteAliasRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteImportedKeyMaterialRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DescribeCustomKeyStoresRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DescribeCustomKeyStoresResponse","synthetic":true,"types":[]},{"text":"impl Freeze for DescribeKeyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DescribeKeyResponse","synthetic":true,"types":[]},{"text":"impl Freeze for DisableKeyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DisableKeyRotationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DisconnectCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DisconnectCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Freeze for EnableKeyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for EnableKeyRotationRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for EncryptRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for EncryptResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateDataKeyPairRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GenerateDataKeyPairResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateDataKeyPairWithoutPlaintextRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GenerateDataKeyPairWithoutPlaintextResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateDataKeyRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GenerateDataKeyResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateDataKeyWithoutPlaintextRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GenerateDataKeyWithoutPlaintextResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateRandomRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GenerateRandomResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetKeyPolicyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetKeyPolicyResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetKeyRotationStatusRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetKeyRotationStatusResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetParametersForImportRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetParametersForImportResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetPublicKeyRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for GetPublicKeyResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GrantConstraints","synthetic":true,"types":[]},{"text":"impl Freeze for GrantListEntry","synthetic":true,"types":[]},{"text":"impl !Freeze for ImportKeyMaterialRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ImportKeyMaterialResponse","synthetic":true,"types":[]},{"text":"impl Freeze for KeyListEntry","synthetic":true,"types":[]},{"text":"impl Freeze for KeyMetadata","synthetic":true,"types":[]},{"text":"impl Freeze for ListAliasesRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListAliasesResponse","synthetic":true,"types":[]},{"text":"impl Freeze for ListGrantsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListGrantsResponse","synthetic":true,"types":[]},{"text":"impl Freeze for ListKeyPoliciesRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListKeyPoliciesResponse","synthetic":true,"types":[]},{"text":"impl Freeze for ListKeysRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListKeysResponse","synthetic":true,"types":[]},{"text":"impl Freeze for ListResourceTagsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListResourceTagsResponse","synthetic":true,"types":[]},{"text":"impl Freeze for ListRetirableGrantsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutKeyPolicyRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ReEncryptRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ReEncryptResponse","synthetic":true,"types":[]},{"text":"impl Freeze for RetireGrantRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RevokeGrantRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ScheduleKeyDeletionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ScheduleKeyDeletionResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for SignRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for SignResponse","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for TagResourceRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UntagResourceRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateAliasRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateKeyDescriptionRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for VerifyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for VerifyResponse","synthetic":true,"types":[]},{"text":"impl Freeze for CancelKeyDeletionError","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Freeze for CreateAliasError","synthetic":true,"types":[]},{"text":"impl Freeze for CreateCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Freeze for CreateGrantError","synthetic":true,"types":[]},{"text":"impl Freeze for CreateKeyError","synthetic":true,"types":[]},{"text":"impl Freeze for DecryptError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteAliasError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteImportedKeyMaterialError","synthetic":true,"types":[]},{"text":"impl Freeze for DescribeCustomKeyStoresError","synthetic":true,"types":[]},{"text":"impl Freeze for DescribeKeyError","synthetic":true,"types":[]},{"text":"impl Freeze for DisableKeyError","synthetic":true,"types":[]},{"text":"impl Freeze for DisableKeyRotationError","synthetic":true,"types":[]},{"text":"impl Freeze for DisconnectCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Freeze for EnableKeyError","synthetic":true,"types":[]},{"text":"impl Freeze for EnableKeyRotationError","synthetic":true,"types":[]},{"text":"impl Freeze for EncryptError","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateDataKeyError","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateDataKeyPairError","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateDataKeyPairWithoutPlaintextError","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateDataKeyWithoutPlaintextError","synthetic":true,"types":[]},{"text":"impl Freeze for GenerateRandomError","synthetic":true,"types":[]},{"text":"impl Freeze for GetKeyPolicyError","synthetic":true,"types":[]},{"text":"impl Freeze for GetKeyRotationStatusError","synthetic":true,"types":[]},{"text":"impl Freeze for GetParametersForImportError","synthetic":true,"types":[]},{"text":"impl Freeze for GetPublicKeyError","synthetic":true,"types":[]},{"text":"impl Freeze for ImportKeyMaterialError","synthetic":true,"types":[]},{"text":"impl Freeze for ListAliasesError","synthetic":true,"types":[]},{"text":"impl Freeze for ListGrantsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListKeyPoliciesError","synthetic":true,"types":[]},{"text":"impl Freeze for ListKeysError","synthetic":true,"types":[]},{"text":"impl Freeze for ListResourceTagsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListRetirableGrantsError","synthetic":true,"types":[]},{"text":"impl Freeze for PutKeyPolicyError","synthetic":true,"types":[]},{"text":"impl Freeze for ReEncryptError","synthetic":true,"types":[]},{"text":"impl Freeze for RetireGrantError","synthetic":true,"types":[]},{"text":"impl Freeze for RevokeGrantError","synthetic":true,"types":[]},{"text":"impl Freeze for ScheduleKeyDeletionError","synthetic":true,"types":[]},{"text":"impl Freeze for SignError","synthetic":true,"types":[]},{"text":"impl Freeze for TagResourceError","synthetic":true,"types":[]},{"text":"impl Freeze for UntagResourceError","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateAliasError","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateKeyDescriptionError","synthetic":true,"types":[]},{"text":"impl Freeze for VerifyError","synthetic":true,"types":[]},{"text":"impl Freeze for KmsClient","synthetic":true,"types":[]}];
implementors["rusoto_s3"] = [{"text":"impl Freeze for PreSignedRequestOption","synthetic":true,"types":[]},{"text":"impl Freeze for AbortIncompleteMultipartUpload","synthetic":true,"types":[]},{"text":"impl Freeze for AbortIncompleteMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AbortMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Freeze for AbortMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AccelerateConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for AccelerateConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AccessControlPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for AccessControlPolicySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AccessControlTranslation","synthetic":true,"types":[]},{"text":"impl Freeze for AccessControlTranslationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AccountIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowQuotedRecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedHeaderSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedHeadersSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedMethodSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedMethodsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedOriginSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AllowedOriginsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsAndOperator","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsExportDestination","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsExportDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsFilter","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsS3BucketDestination","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyticsS3ExportFileFormatSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BodySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Bucket","synthetic":true,"types":[]},{"text":"impl Freeze for BucketAccelerateStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLocationConstraintSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLoggingStatus","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLoggingStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketLogsPermissionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketNameSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for BucketVersioningStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CORSConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for CORSConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CORSRule","synthetic":true,"types":[]},{"text":"impl Freeze for CORSRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CORSRulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CSVInput","synthetic":true,"types":[]},{"text":"impl Freeze for CSVInputSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CSVOutput","synthetic":true,"types":[]},{"text":"impl Freeze for CSVOutputSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CloudFunctionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CloudFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for CloudFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CloudFunctionInvocationRoleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CommentsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CommonPrefix","synthetic":true,"types":[]},{"text":"impl Freeze for CompleteMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Freeze for CompleteMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CompletedMultipartUpload","synthetic":true,"types":[]},{"text":"impl Freeze for CompletedMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CompletedPart","synthetic":true,"types":[]},{"text":"impl Freeze for CompletedPartSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CompletedPartListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Condition","synthetic":true,"types":[]},{"text":"impl Freeze for ConditionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ContinuationEvent","synthetic":true,"types":[]},{"text":"impl Freeze for CopyObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for CopyObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CopyObjectResult","synthetic":true,"types":[]},{"text":"impl Freeze for CopyPartResult","synthetic":true,"types":[]},{"text":"impl Freeze for CreateBucketConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for CreateBucketConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for CreateBucketOutput","synthetic":true,"types":[]},{"text":"impl Freeze for CreateBucketRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CreateMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Freeze for CreateMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DateSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DaysSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DaysAfterInitiationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultRetention","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultRetentionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Delete","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteMarkerEntry","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteMarkerReplication","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteMarkerReplicationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteMarkerReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeletePublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeletedObject","synthetic":true,"types":[]},{"text":"impl Freeze for DelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DescriptionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Destination","synthetic":true,"types":[]},{"text":"impl Freeze for DestinationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for DisplayNameSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ETagSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EmailAddressSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EnableRequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EncodingTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Encryption","synthetic":true,"types":[]},{"text":"impl Freeze for EncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for EncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EndSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EndEvent","synthetic":true,"types":[]},{"text":"impl Freeze for S3Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorDocument","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorDocumentSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EventSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for EventListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExistingObjectReplication","synthetic":true,"types":[]},{"text":"impl Freeze for ExistingObjectReplicationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExistingObjectReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExpirationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExpiredObjectDeleteMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExposeHeaderSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExposeHeadersSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExpressionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ExpressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FetchOwnerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FieldDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FileHeaderInfoSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FilterRule","synthetic":true,"types":[]},{"text":"impl Freeze for FilterRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FilterRuleListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FilterRuleNameSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for FilterRuleValueSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAccelerateConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAclOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAclRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAnalyticsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketCorsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketEncryptionOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketInventoryConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLocationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLocationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLoggingOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketMetricsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyStatusOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyStatusRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketReplicationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketRequestPaymentOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketTaggingOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketVersioningOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketWebsiteOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectAclOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectAclRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTorrentOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTorrentRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetPublicAccessBlockOutput","synthetic":true,"types":[]},{"text":"impl Freeze for GetPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GlacierJobParameters","synthetic":true,"types":[]},{"text":"impl Freeze for GlacierJobParametersSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Grant","synthetic":true,"types":[]},{"text":"impl Freeze for GrantSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Grantee","synthetic":true,"types":[]},{"text":"impl Freeze for GranteeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for GrantsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for HeadBucketRequest","synthetic":true,"types":[]},{"text":"impl Freeze for HeadObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for HeadObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for HostNameSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for HttpErrorCodeReturnedEqualsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for HttpRedirectCodeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IDSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IndexDocument","synthetic":true,"types":[]},{"text":"impl Freeze for IndexDocumentSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Initiator","synthetic":true,"types":[]},{"text":"impl Freeze for InputSerialization","synthetic":true,"types":[]},{"text":"impl Freeze for InputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryDestination","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryEncryption","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryFilter","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryFormatSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryFrequencySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryIncludedObjectVersionsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryOptionalFieldSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryOptionalFieldsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryS3BucketDestination","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for InventorySchedule","synthetic":true,"types":[]},{"text":"impl Freeze for InventoryScheduleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for IsEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for JSONInput","synthetic":true,"types":[]},{"text":"impl Freeze for JSONInputSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for JSONOutput","synthetic":true,"types":[]},{"text":"impl Freeze for JSONOutputSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for JSONTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for KMSContextSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for KeyMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for KeyPrefixEqualsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LambdaFunctionArnSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LambdaFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for LambdaFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LambdaFunctionConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleExpiration","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleExpirationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRule","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRuleAndOperator","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRuleFilter","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LifecycleRulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketAnalyticsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketAnalyticsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketInventoryConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketInventoryConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketMetricsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketMetricsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListMultipartUploadsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListMultipartUploadsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectVersionsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectVersionsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsV2Output","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsV2Request","synthetic":true,"types":[]},{"text":"impl Freeze for ListPartsOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ListPartsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for LocationPrefixSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LoggingEnabled","synthetic":true,"types":[]},{"text":"impl Freeze for LoggingEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MFADeleteSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MaxAgeSecondsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MaxKeysSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MaxPartsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MaxUploadsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataEntry","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataEntrySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataKeySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataValueSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Metrics","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsAndOperator","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsFilter","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MetricsStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MinutesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for MultipartUpload","synthetic":true,"types":[]},{"text":"impl Freeze for MultipartUploadIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NoncurrentVersionExpiration","synthetic":true,"types":[]},{"text":"impl Freeze for NoncurrentVersionExpirationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NoncurrentVersionTransition","synthetic":true,"types":[]},{"text":"impl Freeze for NoncurrentVersionTransitionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NoncurrentVersionTransitionListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfigurationFilter","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationConfigurationFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for NotificationIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Object","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectCannedACLSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectIdentifierSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectIdentifierListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectKeySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockLegalHold","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockLegalHoldSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockLegalHoldStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockRetention","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockRetentionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockRetentionModeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockRule","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectLockRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectVersion","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectVersionIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for OutputLocation","synthetic":true,"types":[]},{"text":"impl Freeze for OutputLocationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for OutputSerialization","synthetic":true,"types":[]},{"text":"impl Freeze for OutputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Owner","synthetic":true,"types":[]},{"text":"impl Freeze for OwnerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for OwnerOverrideSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ParquetInput","synthetic":true,"types":[]},{"text":"impl Freeze for ParquetInputSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Part","synthetic":true,"types":[]},{"text":"impl Freeze for PartNumberSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PartNumberMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PayerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PermissionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PolicyStatus","synthetic":true,"types":[]},{"text":"impl Freeze for PrefixSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PrioritySerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Progress","synthetic":true,"types":[]},{"text":"impl Freeze for ProgressEvent","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PublicAccessBlockConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for PublicAccessBlockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAclRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketNotificationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectAclOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectAclRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Freeze for QueueArnSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QueueConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for QueueConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QueueConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Freeze for QueueConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QueueConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QuietSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QuoteCharacterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QuoteEscapeCharacterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for QuoteFieldsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl !Freeze for RecordsEvent","synthetic":true,"types":[]},{"text":"impl Freeze for Redirect","synthetic":true,"types":[]},{"text":"impl Freeze for RedirectSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RedirectAllRequestsTo","synthetic":true,"types":[]},{"text":"impl Freeze for RedirectAllRequestsToSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplaceKeyPrefixWithSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplaceKeyWithSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicaKmsKeyIDSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRule","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleAndOperator","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleFilter","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRuleStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationRulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationTime","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationTimeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationTimeStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationTimeValue","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicationTimeValueSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RequestPaymentConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for RequestPaymentConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RequestProgress","synthetic":true,"types":[]},{"text":"impl Freeze for RequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseCacheControlSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseContentDispositionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseContentEncodingSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseContentLanguageSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseContentTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ResponseExpiresSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreObjectOutput","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreObjectRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreRequestSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreRequestTypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RoleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RoutingRule","synthetic":true,"types":[]},{"text":"impl Freeze for RoutingRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RoutingRulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Rule","synthetic":true,"types":[]},{"text":"impl Freeze for RuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for RulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for S3KeyFilter","synthetic":true,"types":[]},{"text":"impl Freeze for S3KeyFilterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for S3Location","synthetic":true,"types":[]},{"text":"impl Freeze for S3LocationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SSEKMS","synthetic":true,"types":[]},{"text":"impl Freeze for SSEKMSSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SSEKMSKeyIdSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SSES3","synthetic":true,"types":[]},{"text":"impl Freeze for SSES3Serializer","synthetic":true,"types":[]},{"text":"impl Freeze for ScanRange","synthetic":true,"types":[]},{"text":"impl Freeze for ScanRangeSerializer","synthetic":true,"types":[]},{"text":"impl !Freeze for SelectObjectContentEventStreamItem","synthetic":true,"types":[]},{"text":"impl Freeze for SelectObjectContentOutput","synthetic":true,"types":[]},{"text":"impl Freeze for SelectObjectContentRequest","synthetic":true,"types":[]},{"text":"impl Freeze for SelectObjectContentRequestSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SelectParameters","synthetic":true,"types":[]},{"text":"impl Freeze for SelectParametersSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionByDefault","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionByDefaultSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionRule","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionRuleSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSideEncryptionRulesSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SettingSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SourceSelectionCriteria","synthetic":true,"types":[]},{"text":"impl Freeze for SourceSelectionCriteriaSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SseKmsEncryptedObjects","synthetic":true,"types":[]},{"text":"impl Freeze for SseKmsEncryptedObjectsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SseKmsEncryptedObjectsStatusSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for StartSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for StartAfterSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Stats","synthetic":true,"types":[]},{"text":"impl Freeze for StatsEvent","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassAnalysis","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassAnalysisSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassAnalysisDataExport","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassAnalysisDataExportSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClassAnalysisSchemaVersionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for SuffixSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for TagSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TagSetSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Tagging","synthetic":true,"types":[]},{"text":"impl Freeze for TaggingSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TargetBucketSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TargetGrant","synthetic":true,"types":[]},{"text":"impl Freeze for TargetGrantSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TargetGrantsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TargetPrefixSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TierSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TokenSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TopicArnSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TopicConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for TopicConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TopicConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Freeze for TopicConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TopicConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for Transition","synthetic":true,"types":[]},{"text":"impl Freeze for TransitionSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TransitionListSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TransitionStorageClassSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for URISerializer","synthetic":true,"types":[]},{"text":"impl Freeze for UploadIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartCopyOutput","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartCopyRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartOutput","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UserMetadataSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for ValueSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for VersionIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for VersioningConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for VersioningConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for WebsiteConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for WebsiteConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for YearsSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for AbortMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Freeze for CompleteMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Freeze for CopyObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for CreateBucketError","synthetic":true,"types":[]},{"text":"impl Freeze for CreateMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketCorsError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectsError","synthetic":true,"types":[]},{"text":"impl Freeze for DeletePublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAclError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketCorsError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLocationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketLoggingError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketNotificationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketPolicyStatusError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketVersioningError","synthetic":true,"types":[]},{"text":"impl Freeze for GetBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectAclError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectRetentionError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectTorrentError","synthetic":true,"types":[]},{"text":"impl Freeze for GetPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Freeze for HeadBucketError","synthetic":true,"types":[]},{"text":"impl Freeze for HeadObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketAnalyticsConfigurationsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketInventoryConfigurationsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketMetricsConfigurationsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListBucketsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListMultipartUploadsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectVersionsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsError","synthetic":true,"types":[]},{"text":"impl Freeze for ListObjectsV2Error","synthetic":true,"types":[]},{"text":"impl Freeze for ListPartsError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAclError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketCorsError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketLoggingError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketNotificationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketVersioningError","synthetic":true,"types":[]},{"text":"impl Freeze for PutBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectAclError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectRetentionError","synthetic":true,"types":[]},{"text":"impl Freeze for PutObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Freeze for PutPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Freeze for RestoreObjectError","synthetic":true,"types":[]},{"text":"impl Freeze for SelectObjectContentError","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartError","synthetic":true,"types":[]},{"text":"impl Freeze for UploadPartCopyError","synthetic":true,"types":[]},{"text":"impl Freeze for S3Client","synthetic":true,"types":[]}];
implementors["rusoto_signature"] = [{"text":"impl Freeze for Region","synthetic":true,"types":[]},{"text":"impl Freeze for ParseRegionError","synthetic":true,"types":[]},{"text":"impl !Freeze for SignedRequestPayload","synthetic":true,"types":[]},{"text":"impl !Freeze for SignedRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ByteStream","synthetic":true,"types":[]}];
implementors["rusoto_sts"] = [{"text":"impl Freeze for StsSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Freeze for StsAssumeRoleSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Freeze for StsWebIdentityFederationSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Freeze for WebIdentityProvider","synthetic":true,"types":[]},{"text":"impl Freeze for AssumeRoleRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AssumeRoleResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AssumeRoleWithSAMLRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AssumeRoleWithSAMLResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AssumeRoleWithWebIdentityRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AssumeRoleWithWebIdentityResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AssumedRoleUser","synthetic":true,"types":[]},{"text":"impl Freeze for Credentials","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeAuthorizationMessageRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeAuthorizationMessageResponse","synthetic":true,"types":[]},{"text":"impl Freeze for FederatedUser","synthetic":true,"types":[]},{"text":"impl Freeze for GetAccessKeyInfoRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetAccessKeyInfoResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetCallerIdentityRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetCallerIdentityResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetFederationTokenRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetFederationTokenResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetSessionTokenRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetSessionTokenResponse","synthetic":true,"types":[]},{"text":"impl Freeze for PolicyDescriptorType","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for AssumeRoleError","synthetic":true,"types":[]},{"text":"impl Freeze for AssumeRoleWithSAMLError","synthetic":true,"types":[]},{"text":"impl Freeze for AssumeRoleWithWebIdentityError","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeAuthorizationMessageError","synthetic":true,"types":[]},{"text":"impl Freeze for GetAccessKeyInfoError","synthetic":true,"types":[]},{"text":"impl Freeze for GetCallerIdentityError","synthetic":true,"types":[]},{"text":"impl Freeze for GetFederationTokenError","synthetic":true,"types":[]},{"text":"impl Freeze for GetSessionTokenError","synthetic":true,"types":[]},{"text":"impl Freeze for StsClient","synthetic":true,"types":[]}];
implementors["rusoto_util"] = [{"text":"impl Freeze for CredentialsProvider","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultCredentialsProvider","synthetic":true,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl&lt;'a&gt; Freeze for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TryDemangleError","synthetic":true,"types":[]}];
implementors["rustyline"] = [{"text":"impl Freeze for Pair","synthetic":true,"types":[]},{"text":"impl Freeze for FilenameCompleter","synthetic":true,"types":[]},{"text":"impl Freeze for Quote","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for BellStyle","synthetic":true,"types":[]},{"text":"impl Freeze for HistoryDuplicates","synthetic":true,"types":[]},{"text":"impl Freeze for CompletionType","synthetic":true,"types":[]},{"text":"impl Freeze for EditMode","synthetic":true,"types":[]},{"text":"impl Freeze for ColorMode","synthetic":true,"types":[]},{"text":"impl Freeze for OutputStreamType","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for ReadlineError","synthetic":true,"types":[]},{"text":"impl !Freeze for MatchingBracketHighlighter","synthetic":true,"types":[]},{"text":"impl Freeze for HistoryHinter","synthetic":true,"types":[]},{"text":"impl Freeze for Direction","synthetic":true,"types":[]},{"text":"impl Freeze for History","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Cmd","synthetic":true,"types":[]},{"text":"impl Freeze for Word","synthetic":true,"types":[]},{"text":"impl Freeze for At","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for CharSearch","synthetic":true,"types":[]},{"text":"impl Freeze for Movement","synthetic":true,"types":[]},{"text":"impl Freeze for KeyPress","synthetic":true,"types":[]},{"text":"impl Freeze for WordAction","synthetic":true,"types":[]},{"text":"impl Freeze for LineBuffer","synthetic":true,"types":[]},{"text":"impl Freeze for ValidationResult","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Freeze for ValidationContext&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MatchingBracketValidator","synthetic":true,"types":[]},{"text":"impl&lt;'h&gt; Freeze for Context&lt;'h&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for Editor&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; Freeze for Iter&lt;'a, H&gt;","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl Freeze for Handle","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Freeze for Always","synthetic":true,"types":[]},{"text":"impl&lt;T, F, S&gt; Freeze for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["security"] = [{"text":"impl Freeze for SecurityConfig","synthetic":true,"types":[]},{"text":"impl Freeze for SecurityManager","synthetic":true,"types":[]},{"text":"impl Freeze for CNChecker","synthetic":true,"types":[]},{"text":"impl Freeze for Fetcher","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl Freeze for Identifier","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for SemVerError","synthetic":true,"types":[]},{"text":"impl Freeze for VersionReq","synthetic":true,"types":[]},{"text":"impl Freeze for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for Identifier","synthetic":true,"types":[]},{"text":"impl Freeze for VersionReq","synthetic":true,"types":[]},{"text":"impl Freeze for WildcardVersion","synthetic":true,"types":[]},{"text":"impl Freeze for Op","synthetic":true,"types":[]},{"text":"impl Freeze for Predicate","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UnitDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BoolDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for IsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CharDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for StrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for StringDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for CowStrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Freeze for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Freeze for Impossible&lt;Ok, Error&gt;","synthetic":true,"types":[]}];
implementors["serde_ignored"] = [{"text":"impl&lt;'a, 'b, D, F&gt; Freeze for Deserializer&lt;'a, 'b, D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Path&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; Freeze for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Freeze for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Freeze for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CharEscape","synthetic":true,"types":[]},{"text":"impl Freeze for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Serializer","synthetic":true,"types":[]},{"text":"impl Freeze for Number","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl&lt;'de&gt; Freeze for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; Freeze for Serializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; Freeze for SeqSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; Freeze for TupleSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; Freeze for TupleStructSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; Freeze for TupleVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; Freeze for MapSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; Freeze for StructSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; Freeze for StructVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]}];
implementors["serde_with"] = [{"text":"impl&lt;Sep&gt; Freeze for StringWithSeparator&lt;Sep&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SpaceSeparator","synthetic":true,"types":[]},{"text":"impl Freeze for CommaSeparator","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Freeze for Sha256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha224","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512","synthetic":true,"types":[]},{"text":"impl Freeze for Sha384","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512Trunc256","synthetic":true,"types":[]},{"text":"impl Freeze for Sha512Trunc224","synthetic":true,"types":[]}];
implementors["shlex"] = [{"text":"impl&lt;'a&gt; Freeze for Shlex&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal"] = [{"text":"impl Freeze for Trap","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Freeze for SigId","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Freeze for Slab&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["slog"] = [{"text":"impl&lt;D&gt; Freeze for Logger&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Discard","synthetic":true,"types":[]},{"text":"impl&lt;D, F&gt; Freeze for Filter&lt;D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for LevelFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, E&gt; Freeze for MapError&lt;D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D1, D2&gt; Freeze for Duplicate&lt;D1, D2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;D2: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Fuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for IgnoreResult&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for MutexDrainError&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Drain&gt;::Err: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for FilterLevel","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordStatic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; Freeze for FnValue&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PushFnValueSerializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for PushFnValue&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for SingleKV&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for OwnedKV&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BorrowedKV&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedKVList","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["slog_async"] = [{"text":"impl Freeze for AsyncError","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for AsyncCoreBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AsyncGuard","synthetic":true,"types":[]},{"text":"impl !Freeze for AsyncCore","synthetic":true,"types":[]},{"text":"impl Freeze for OverflowStrategy","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for AsyncBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Async","synthetic":true,"types":[]}];
implementors["slog_json"] = [{"text":"impl&lt;W&gt; !Freeze for Json&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for JsonBuilder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog_term"] = [{"text":"impl&lt;D&gt; Freeze for FullFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for FullFormatBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Freeze for CompactFormat&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for CompactFormatBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !Freeze for PlainDecorator&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for PlainRecordDecorator&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for PlainSyncDecorator&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for PlainSyncRecordDecorator&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TermDecoratorBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for TermDecorator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TermRecordDecorator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TestStdoutWriter","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl Freeze for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Once&lt;T&gt;","synthetic":true,"types":[]}];
implementors["sst_importer"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for IMPORT_RPC_DURATION","synthetic":true,"types":[]},{"text":"impl Freeze for IMPORT_UPLOAD_CHUNK_BYTES","synthetic":true,"types":[]},{"text":"impl Freeze for IMPORT_UPLOAD_CHUNK_DURATION","synthetic":true,"types":[]},{"text":"impl Freeze for IMPORT_WRITE_CHUNK_DURATION","synthetic":true,"types":[]},{"text":"impl Freeze for IMPORTER_DOWNLOAD_DURATION","synthetic":true,"types":[]},{"text":"impl Freeze for IMPORTER_DOWNLOAD_BYTES","synthetic":true,"types":[]},{"text":"impl Freeze for IMPORTER_INGEST_DURATION","synthetic":true,"types":[]},{"text":"impl Freeze for IMPORTER_INGEST_BYTES","synthetic":true,"types":[]},{"text":"impl Freeze for IMPORTER_ERROR_VEC","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ImportModeSwitcherInner&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ImportModeSwitcher&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ImportModeDBOptions","synthetic":true,"types":[]},{"text":"impl Freeze for ImportModeCFOptions","synthetic":true,"types":[]},{"text":"impl Freeze for SSTImporter","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Freeze for SSTWriter&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ImportDir","synthetic":true,"types":[]},{"text":"impl Freeze for ImportPath","synthetic":true,"types":[]},{"text":"impl !Freeze for ImportFile","synthetic":true,"types":[]}];
implementors["str_stack"] = [{"text":"impl Freeze for StrStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Writer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl Freeze for StrSimError","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Freeze for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["symbolic_common"] = [{"text":"impl&lt;'a&gt; Freeze for ByteView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, D&gt; Freeze for SelfCell&lt;O, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for InstructionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for CpuFamily","synthetic":true,"types":[]},{"text":"impl Freeze for UnknownArchError","synthetic":true,"types":[]},{"text":"impl Freeze for Arch","synthetic":true,"types":[]},{"text":"impl Freeze for UnknownLanguageError","synthetic":true,"types":[]},{"text":"impl Freeze for Language","synthetic":true,"types":[]},{"text":"impl Freeze for NameMangling","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Name&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["symbolic_demangle"] = [{"text":"impl Freeze for DemangleOptions","synthetic":true,"types":[]}];
implementors["syn_mid"] = [{"text":"impl Freeze for FnArg","synthetic":true,"types":[]},{"text":"impl Freeze for Receiver","synthetic":true,"types":[]},{"text":"impl Freeze for Pat","synthetic":true,"types":[]},{"text":"impl Freeze for PatIdent","synthetic":true,"types":[]},{"text":"impl Freeze for PatPath","synthetic":true,"types":[]},{"text":"impl Freeze for PatReference","synthetic":true,"types":[]},{"text":"impl Freeze for PatStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatTuple","synthetic":true,"types":[]},{"text":"impl Freeze for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatType","synthetic":true,"types":[]},{"text":"impl Freeze for PatWild","synthetic":true,"types":[]},{"text":"impl Freeze for FieldPat","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for ItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl Freeze for AddBounds","synthetic":true,"types":[]},{"text":"impl Freeze for BindStyle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Structure&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["sysinfo"] = [{"text":"impl Freeze for Component","synthetic":true,"types":[]},{"text":"impl Freeze for Disk","synthetic":true,"types":[]},{"text":"impl Freeze for Networks","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkData","synthetic":true,"types":[]},{"text":"impl Freeze for ProcessStatus","synthetic":true,"types":[]},{"text":"impl Freeze for Process","synthetic":true,"types":[]},{"text":"impl Freeze for Processor","synthetic":true,"types":[]},{"text":"impl Freeze for System","synthetic":true,"types":[]},{"text":"impl Freeze for RefreshKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NetworksIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DiskType","synthetic":true,"types":[]},{"text":"impl Freeze for Signal","synthetic":true,"types":[]},{"text":"impl Freeze for LoadAvg","synthetic":true,"types":[]},{"text":"impl Freeze for User","synthetic":true,"types":[]},{"text":"impl Freeze for DiskUsage","synthetic":true,"types":[]}];
implementors["take_mut"] = [{"text":"impl&lt;'s&gt; !Freeze for Scope&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'm, T, F&gt; Freeze for Hole&lt;'c, 'm, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tame_gcs"] = [{"text":"impl&lt;'a&gt; Freeze for StandardQueryParameters&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Conditionals","synthetic":true,"types":[]},{"text":"impl Freeze for StorageClass","synthetic":true,"types":[]},{"text":"impl Freeze for PredefinedAcl","synthetic":true,"types":[]},{"text":"impl Freeze for Projection","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DeleteObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DownloadObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for DownloadObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GetObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GetObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InsertObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InsertResponse","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !Freeze for Multipart&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ListResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PatchObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PatchObjectResponse","synthetic":true,"types":[]},{"text":"impl Freeze for Object","synthetic":true,"types":[]},{"text":"impl Freeze for Metadata","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for HttpError","synthetic":true,"types":[]},{"text":"impl Freeze for HttpStatusError","synthetic":true,"types":[]},{"text":"impl Freeze for IoError","synthetic":true,"types":[]},{"text":"impl Freeze for JsonError","synthetic":true,"types":[]},{"text":"impl Freeze for ApiErrorInner","synthetic":true,"types":[]},{"text":"impl Freeze for ApiError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Freeze for UrlSigner&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SignedUrlOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DigestAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for SigningAlgorithm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Key&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ServiceAccount","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BucketName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ObjectName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ObjectId&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Scopes","synthetic":true,"types":[]}];
implementors["tame_oauth"] = [{"text":"impl Freeze for ServiceAccountInfo","synthetic":true,"types":[]},{"text":"impl Freeze for RequestReason","synthetic":true,"types":[]},{"text":"impl !Freeze for TokenOrRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ServiceAccountAccess","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Token","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl Freeze for TempDir","synthetic":true,"types":[]},{"text":"impl Freeze for PathPersistError","synthetic":true,"types":[]},{"text":"impl Freeze for TempPath","synthetic":true,"types":[]},{"text":"impl Freeze for NamedTempFile","synthetic":true,"types":[]},{"text":"impl Freeze for PersistError","synthetic":true,"types":[]},{"text":"impl Freeze for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["term"] = [{"text":"impl Freeze for Param","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Variables","synthetic":true,"types":[]},{"text":"impl Freeze for TermInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TerminfoTerminal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Attr","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["test_backup"] = [{"text":"impl !Freeze for TestSuite","synthetic":true,"types":[]}];
implementors["test_coprocessor"] = [{"text":"impl Freeze for Column","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for DAGSelect","synthetic":true,"types":[]},{"text":"impl Freeze for DAGChunkSpliter","synthetic":true,"types":[]},{"text":"impl Freeze for ProductTable","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for Insert&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for Delete&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Store&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Table","synthetic":true,"types":[]},{"text":"impl Freeze for TableBuilder","synthetic":true,"types":[]}];
implementors["test_pd"] = [{"text":"impl Freeze for AlreadyBootstrapped","synthetic":true,"types":[]},{"text":"impl Freeze for Incompatible","synthetic":true,"types":[]},{"text":"impl Freeze for Roulette","synthetic":true,"types":[]},{"text":"impl Freeze for Inner","synthetic":true,"types":[]},{"text":"impl !Freeze for LeaderChange","synthetic":true,"types":[]},{"text":"impl !Freeze for Retry","synthetic":true,"types":[]},{"text":"impl !Freeze for NotRetry","synthetic":true,"types":[]},{"text":"impl !Freeze for Service","synthetic":true,"types":[]},{"text":"impl Freeze for Inner","synthetic":true,"types":[]},{"text":"impl !Freeze for Split","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Server&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for PdMock&lt;C&gt;","synthetic":true,"types":[]}];
implementors["test_raftstore"] = [{"text":"impl&lt;T&gt; Freeze for Cluster&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ChannelTransportCore","synthetic":true,"types":[]},{"text":"impl Freeze for ChannelTransport","synthetic":true,"types":[]},{"text":"impl Freeze for NodeCluster","synthetic":true,"types":[]},{"text":"impl !Freeze for Store","synthetic":true,"types":[]},{"text":"impl Freeze for SchedulePolicy","synthetic":true,"types":[]},{"text":"impl !Freeze for Operator","synthetic":true,"types":[]},{"text":"impl !Freeze for Cluster","synthetic":true,"types":[]},{"text":"impl !Freeze for TestPdClient","synthetic":true,"types":[]},{"text":"impl Freeze for MockRaftStoreRouter","synthetic":true,"types":[]},{"text":"impl Freeze for AddressMap","synthetic":true,"types":[]},{"text":"impl !Freeze for ServerMeta","synthetic":true,"types":[]},{"text":"impl Freeze for ServerCluster","synthetic":true,"types":[]},{"text":"impl !Freeze for MessageTypeNotifier","synthetic":true,"types":[]},{"text":"impl Freeze for DropPacketFilter","synthetic":true,"types":[]},{"text":"impl Freeze for DelayFilter","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for SimulateTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for DefaultFilterFactory&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for CloneFilterFactory&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PartitionFilter","synthetic":true,"types":[]},{"text":"impl Freeze for PartitionFilterFactory","synthetic":true,"types":[]},{"text":"impl Freeze for IsolationFilterFactory","synthetic":true,"types":[]},{"text":"impl Freeze for Direction","synthetic":true,"types":[]},{"text":"impl Freeze for RegionPacketFilter","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapshotFilter","synthetic":true,"types":[]},{"text":"impl !Freeze for CollectSnapshotFilter","synthetic":true,"types":[]},{"text":"impl !Freeze for DropSnapshotFilter","synthetic":true,"types":[]},{"text":"impl !Freeze for RecvSnapshotFilter","synthetic":true,"types":[]},{"text":"impl !Freeze for LeadingFilter","synthetic":true,"types":[]},{"text":"impl !Freeze for LeadingDuplicatedSnapshotFilter","synthetic":true,"types":[]},{"text":"impl !Freeze for RandomLatencyFilter","synthetic":true,"types":[]},{"text":"impl Freeze for LeaseReadFilter","synthetic":true,"types":[]},{"text":"impl Freeze for DropMessageFilter","synthetic":true,"types":[]},{"text":"impl Freeze for TEST_CONFIG","synthetic":true,"types":[]}];
implementors["test_sst_importer"] = [{"text":"impl Freeze for TestPropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl Freeze for TestPropertiesCollector","synthetic":true,"types":[]}];
implementors["test_storage"] = [{"text":"impl&lt;E&gt; !Freeze for AssertionStorage&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SyncTestStorageBuilder&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SyncTestStorage&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["test_util"] = [{"text":"impl Freeze for KvGenerator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for CaseTraceLogger","synthetic":true,"types":[]},{"text":"impl Freeze for Never","synthetic":true,"types":[]},{"text":"impl Freeze for Nope","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Freeze for CaseLifeWatcher&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FailpointHook","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl Freeze for NoHyphenation","synthetic":true,"types":[]},{"text":"impl Freeze for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Freeze for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Freeze for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; Freeze for WrapIter&lt;'w, 'a, S&gt;","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Freeze for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tidb_query_aggr"] = [{"text":"impl Freeze for AggrFnDefinitionParserAvg","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AggrFnAvg&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AggrFnStateAvg&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnAvgForEnum","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnStateAvgForEnum","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnAvgForSet","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnStateAvgForSet","synthetic":true,"types":[]},{"text":"impl Freeze for BitAnd","synthetic":true,"types":[]},{"text":"impl Freeze for BitOr","synthetic":true,"types":[]},{"text":"impl Freeze for BitXor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AggrFnDefinitionParserBitOp&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AggrFnBitOp&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AggrFnStateBitOp&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnDefinitionParserCount","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnCount","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnStateCount","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnDefinitionParserFirst","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AggrFnFirst&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AggrFnStateFirst&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as EvaluableRef&lt;'static&gt;&gt;::EvaluableType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Max","synthetic":true,"types":[]},{"text":"impl Freeze for Min","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for AggrFnDefinitionParserExtremum&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Freeze for AggFnExtremumForBytes&lt;C, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Freeze for AggFnStateExtremum4Bytes&lt;C, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for AggFnExtremumForEnum&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for AggFnStateExtremumForEnum&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for AggFnExtremumForSet&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for AggFnStateExtremumForSet&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for AggFnExtremum&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for AggFnStateExtremum&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as EvaluableRef&lt;'static&gt;&gt;::EvaluableType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnDefinitionParserSum","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AggrFnSum&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AggrFnStateSum&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnSumForEnum","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnStateSumForEnum","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnSumForSet","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFnStateSumForSet","synthetic":true,"types":[]},{"text":"impl Freeze for AllAggrDefinitionParser","synthetic":true,"types":[]}];
implementors["tidb_query_codegen"] = [{"text":"impl Freeze for state","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFunctionStateExpr","synthetic":true,"types":[]},{"text":"impl Freeze for AggrFunctionOpts","synthetic":true,"types":[]},{"text":"impl Freeze for Option","synthetic":true,"types":[]},{"text":"impl Freeze for RpnFnAttr","synthetic":true,"types":[]},{"text":"impl Freeze for RpnFnRefEvaluableTypeWithOption","synthetic":true,"types":[]},{"text":"impl Freeze for RpnFnEvaluableType","synthetic":true,"types":[]},{"text":"impl Freeze for RpnFnRefEvaluableType","synthetic":true,"types":[]},{"text":"impl Freeze for RpnFnSignatureParam","synthetic":true,"types":[]},{"text":"impl Freeze for VargsRpnFnSignatureParam","synthetic":true,"types":[]},{"text":"impl Freeze for RpnFnSignatureReturnGuardType","synthetic":true,"types":[]},{"text":"impl Freeze for RpnFnSignatureReturnType","synthetic":true,"types":[]},{"text":"impl Freeze for ValidatorFnGenerator","synthetic":true,"types":[]},{"text":"impl Freeze for VargsRpnFn","synthetic":true,"types":[]},{"text":"impl Freeze for RawVargsRpnFn","synthetic":true,"types":[]},{"text":"impl Freeze for NormalRpnFn","synthetic":true,"types":[]}];
implementors["tidb_query_common"] = [{"text":"impl Freeze for EvaluateError","synthetic":true,"types":[]},{"text":"impl Freeze for StorageError","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorInner","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ExecSummary","synthetic":true,"types":[]},{"text":"impl Freeze for ExecSummaryCollectorEnabled","synthetic":true,"types":[]},{"text":"impl Freeze for ExecSummaryCollectorDisabled","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; Freeze for WithSummaryCollector&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ExecuteStats","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalCoprExecutorCountInner","synthetic":true,"types":[]},{"text":"impl Freeze for LocalCoprExecutorCountDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for LocalCoprExecutorCount","synthetic":true,"types":[]},{"text":"impl Freeze for ExecutorName","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_EXECUTOR_COUNT","synthetic":true,"types":[]},{"text":"impl Freeze for EXECUTOR_COUNT_METRICS","synthetic":true,"types":[]},{"text":"impl Freeze for Range","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalRange","synthetic":true,"types":[]},{"text":"impl Freeze for PointRange","synthetic":true,"types":[]},{"text":"impl Freeze for IterStatus","synthetic":true,"types":[]},{"text":"impl Freeze for RangesIterator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RangesScanner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RangesScannerOptions&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FixtureStorage","synthetic":true,"types":[]}];
implementors["tidb_query_datatype"] = [{"text":"impl !Freeze for FieldTypeBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for EvalType","synthetic":true,"types":[]},{"text":"impl Freeze for FieldTypeTp","synthetic":true,"types":[]},{"text":"impl Freeze for Collation","synthetic":true,"types":[]},{"text":"impl Freeze for FieldTypeFlag","synthetic":true,"types":[]},{"text":"impl Freeze for DataTypeError","synthetic":true,"types":[]},{"text":"impl Freeze for LazyBatchColumn","synthetic":true,"types":[]},{"text":"impl Freeze for LazyBatchColumnVec","synthetic":true,"types":[]},{"text":"impl Freeze for Chunk","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Row&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RowIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Column","synthetic":true,"types":[]},{"text":"impl Freeze for CharsetBinary","synthetic":true,"types":[]},{"text":"impl Freeze for CharsetUtf8mb4","synthetic":true,"types":[]},{"text":"impl Freeze for CollatorBinary","synthetic":true,"types":[]},{"text":"impl Freeze for CollatorLatin1Bin","synthetic":true,"types":[]},{"text":"impl Freeze for CollatorUtf8Mb4Bin","synthetic":true,"types":[]},{"text":"impl Freeze for CollatorUtf8Mb4BinNoPadding","synthetic":true,"types":[]},{"text":"impl Freeze for CollatorUtf8Mb4GeneralCi","synthetic":true,"types":[]},{"text":"impl Freeze for CollatorUtf8Mb4UnicodeCi","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Freeze for SortKey&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BitVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BitAndIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ChunkedVecBytes","synthetic":true,"types":[]},{"text":"impl Freeze for BytesWriter","synthetic":true,"types":[]},{"text":"impl Freeze for PartialBytesWriter","synthetic":true,"types":[]},{"text":"impl Freeze for BytesGuard","synthetic":true,"types":[]},{"text":"impl Freeze for ChunkedVecEnum","synthetic":true,"types":[]},{"text":"impl Freeze for ChunkedVecJson","synthetic":true,"types":[]},{"text":"impl Freeze for ChunkedVecSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ChunkedVecSized&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LogicalRows&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LogicalRowsIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ScalarValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ScalarValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for VectorValue","synthetic":true,"types":[]},{"text":"impl Freeze for Datum","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryLiteral","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Res&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Decimal","synthetic":true,"types":[]},{"text":"impl Freeze for RoundMode","synthetic":true,"types":[]},{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for Enum","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EnumRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BinaryModifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PathLeg","synthetic":true,"types":[]},{"text":"impl Freeze for PathExpression","synthetic":true,"types":[]},{"text":"impl Freeze for MySQLFormatter","synthetic":true,"types":[]},{"text":"impl Freeze for JsonVisitor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MergeUnit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ModifyType","synthetic":true,"types":[]},{"text":"impl Freeze for JsonType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for JsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Json","synthetic":true,"types":[]},{"text":"impl Freeze for Set","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Tz","synthetic":true,"types":[]},{"text":"impl Freeze for TzOffset","synthetic":true,"types":[]},{"text":"impl Freeze for WeekMode","synthetic":true,"types":[]},{"text":"impl Freeze for Time","synthetic":true,"types":[]},{"text":"impl Freeze for TimeType","synthetic":true,"types":[]},{"text":"impl Freeze for TimeArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RowSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for LEBytes&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Column","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for RowColMeta","synthetic":true,"types":[]},{"text":"impl Freeze for RowColsDict","synthetic":true,"types":[]},{"text":"impl Freeze for SqlMode","synthetic":true,"types":[]},{"text":"impl Freeze for Flag","synthetic":true,"types":[]},{"text":"impl Freeze for EvalConfig","synthetic":true,"types":[]},{"text":"impl Freeze for EvalWarnings","synthetic":true,"types":[]},{"text":"impl Freeze for EvalContext","synthetic":true,"types":[]}];
implementors["tidb_query_executors"] = [{"text":"impl&lt;Src&gt; !Freeze for BatchFastHashAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Groups","synthetic":true,"types":[]},{"text":"impl !Freeze for FastHashAggregationImpl","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for BatchIndexScanExecutor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeHandleStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for IndexScanExecutorImpl","synthetic":true,"types":[]},{"text":"impl Freeze for BatchExecuteResult","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Freeze for BatchLimitExecutor&lt;Src&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SS&gt; Freeze for BatchExecutorsRunner&lt;SS&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Freeze for BatchSelectionExecutor&lt;Src&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Freeze for BatchSimpleAggregationExecutor&lt;Src&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleAggregationImpl","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Freeze for BatchSlowHashAggregationExecutor&lt;Src&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SlowHashAggregationImpl","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKeyRefUnsafe","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Freeze for BatchStreamAggregationExecutor&lt;Src&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BatchStreamAggregationImpl","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for BatchTableScanExecutor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TableScanExecutorImpl","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Freeze for BatchTopNExecutor&lt;Src&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for HeapItemSourceData","synthetic":true,"types":[]},{"text":"impl Freeze for HeapItemUnsafe","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Freeze for Entities&lt;Src&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src, I&gt; Freeze for AggregationExecutor&lt;Src, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for HashAggregationHelper","synthetic":true,"types":[]},{"text":"impl&lt;S, I&gt; Freeze for ScanExecutor&lt;S, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, I&gt; Freeze for ScanExecutorOptions&lt;S, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tidb_query_expr"] = [{"text":"impl !Freeze for RpnExpressionNode","synthetic":true,"types":[]},{"text":"impl Freeze for RpnExpression","synthetic":true,"types":[]},{"text":"impl Freeze for RpnExpressionBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RpnStackNodeVectorValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RpnStackNode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RpnFnMeta","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RpnFnCallExtra&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ScalarArg&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&gt; Freeze for VectorArg&lt;'a, T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, Rem&gt; Freeze for Arg&lt;A, Rem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rem: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Null","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, E&gt; Freeze for ArgConstructor&lt;'a, A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Arithmetic_Evaluator&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ArithmeticWithCtx_Evaluator&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntIntPlus","synthetic":true,"types":[]},{"text":"impl Freeze for IntUintPlus","synthetic":true,"types":[]},{"text":"impl Freeze for UintIntPlus","synthetic":true,"types":[]},{"text":"impl Freeze for UintUintPlus","synthetic":true,"types":[]},{"text":"impl Freeze for RealPlus","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalPlus","synthetic":true,"types":[]},{"text":"impl Freeze for IntIntMinus","synthetic":true,"types":[]},{"text":"impl Freeze for IntUintMinus","synthetic":true,"types":[]},{"text":"impl Freeze for UintIntMinus","synthetic":true,"types":[]},{"text":"impl Freeze for UintUintMinus","synthetic":true,"types":[]},{"text":"impl Freeze for RealMinus","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalMinus","synthetic":true,"types":[]},{"text":"impl Freeze for IntIntMod","synthetic":true,"types":[]},{"text":"impl Freeze for IntUintMod","synthetic":true,"types":[]},{"text":"impl Freeze for UintIntMod","synthetic":true,"types":[]},{"text":"impl Freeze for UintUintMod","synthetic":true,"types":[]},{"text":"impl Freeze for RealMod","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalMod","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalMultiply","synthetic":true,"types":[]},{"text":"impl Freeze for RealMultiply","synthetic":true,"types":[]},{"text":"impl Freeze for IntIntMultiply","synthetic":true,"types":[]},{"text":"impl Freeze for IntUintMultiply","synthetic":true,"types":[]},{"text":"impl Freeze for UintIntMultiply","synthetic":true,"types":[]},{"text":"impl Freeze for UintUintMultiply","synthetic":true,"types":[]},{"text":"impl Freeze for IntDivideInt","synthetic":true,"types":[]},{"text":"impl Freeze for IntDivideUint","synthetic":true,"types":[]},{"text":"impl Freeze for UintDivideUint","synthetic":true,"types":[]},{"text":"impl Freeze for UintDivideInt","synthetic":true,"types":[]},{"text":"impl Freeze for IntDivideDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalDivide","synthetic":true,"types":[]},{"text":"impl Freeze for RealDivide","synthetic":true,"types":[]},{"text":"impl Freeze for CastSignedIntAsUnsignedInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastIntAsIntOthers_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastRealAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastStringAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastBinaryStringAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastEnumAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastSetAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastDecimalAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastJsonAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastSignedIntAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastSignedIntAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastUnsignedIntAsSignedOrUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastRealAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastRealAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastStringAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastBinaryStringAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastStringAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastBinaryStringAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastDecimalAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CastAnyAsString_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CastYearAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastUintAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastFloatRealAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastStringAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastUnsignedIntAsSignedOrUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastSignedIntAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastRealAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastStringAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastDecimalAsSignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastDecimalAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; Freeze for CastAnyAsDecimal_Evaluator&lt;From&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CastJsonAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastBytesAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastIntAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastTimeAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastDurationAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastRealAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastBytesAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastDecimalAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastJsonAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastIntAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastYearAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastRealAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastStringAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastDecimalAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastTimeAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastDurationAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastBoolAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastUintAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastStringAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CastJsonAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;From, To&gt; Freeze for CastAnyAsAny_Evaluator&lt;From, To&gt;","synthetic":true,"types":[]},{"text":"impl&lt;To&gt; Freeze for CastJsonAsAny_Evaluator&lt;To&gt;","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; Freeze for CastAnyAsJson_Evaluator&lt;From&gt;","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; Freeze for CastAnyAsBytes_Evaluator&lt;From&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CastJsonAsBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Compare_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for CompareJson_Evaluator&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, F&gt; Freeze for CompareBytes_Evaluator&lt;C, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Freeze for BasicComparer&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for UintUintComparer&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for UintIntComparer&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for IntUintComparer&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CmpOpLT","synthetic":true,"types":[]},{"text":"impl Freeze for CmpOpLE","synthetic":true,"types":[]},{"text":"impl Freeze for CmpOpGT","synthetic":true,"types":[]},{"text":"impl Freeze for CmpOpGE","synthetic":true,"types":[]},{"text":"impl Freeze for CmpOpNE","synthetic":true,"types":[]},{"text":"impl Freeze for CmpOpEQ","synthetic":true,"types":[]},{"text":"impl Freeze for CmpOpNullEQ","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for NormalInByHash&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for CollationAwareBytesInByHash&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CompareInMeta&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IfNull_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IfNullJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for IfNullBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IfCondition_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IfConditionJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for IfConditionBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Md5_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Sha1_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Sha2_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Compress_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Uncompress_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Password_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for UncompressedLength_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for RandomBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for JsonDepth_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for JsonType_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for JsonUnquote_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Like_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RegexpUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Regexp_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Pi_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Crc32_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Log1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Log2Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Log2_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Log10_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Ceil_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CeilReal","synthetic":true,"types":[]},{"text":"impl Freeze for CeilDecToDec","synthetic":true,"types":[]},{"text":"impl Freeze for CeilIntToDec","synthetic":true,"types":[]},{"text":"impl Freeze for CeilDecToInt","synthetic":true,"types":[]},{"text":"impl Freeze for CeilIntToInt","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Floor_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FloorReal","synthetic":true,"types":[]},{"text":"impl Freeze for FloorIntToDec","synthetic":true,"types":[]},{"text":"impl Freeze for FloorDecToInt","synthetic":true,"types":[]},{"text":"impl Freeze for FloorDecToDec","synthetic":true,"types":[]},{"text":"impl Freeze for FloorIntToInt","synthetic":true,"types":[]},{"text":"impl Freeze for AbsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for AbsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for AbsReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for AbsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Sign_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Sqrt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Radians_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Exp_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Sin_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Cos_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Tan_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Cot_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Pow_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Rand_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for RandWithSeedFirstGen_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Degrees_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Asin_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Acos_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Atan1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Atan2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Conv_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for RoundReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for RoundInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for RoundDec_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for TruncateIntWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for TruncateIntWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for TruncateUintWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for TruncateUintWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for TruncateRealWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for TruncateRealWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for TruncateDecimalWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for TruncateDecimalWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for RoundWithFracInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for RoundWithFracDec_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for RoundWithFracReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for IntWithSign","synthetic":true,"types":[]},{"text":"impl Freeze for MySQLRng","synthetic":true,"types":[]},{"text":"impl Freeze for InetAton_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for InetNtoa_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Inet6Aton_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Inet6Ntoa_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for IsIpv4_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for IsIpv4Compat_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for IsIpv4Mapped_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for IsIpv6_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Uuid_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for LogicalAnd_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for LogicalOr_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for LogicalXor_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryNotInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryNotReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryNotDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryMinusUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryMinusInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryMinusReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryMinusDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IsNull_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IsNullBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for IsNullJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for BitAnd_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for BitOr_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for BitXor_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for BitNeg_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for KeepNullOn","synthetic":true,"types":[]},{"text":"impl Freeze for KeepNullOff","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntIsTrue_Evaluator&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for RealIsTrue_Evaluator&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for DecimalIsTrue_Evaluator&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntIsFalse_Evaluator&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for RealIsFalse_Evaluator&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for DecimalIsFalse_Evaluator&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LeftShift_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for RightShift_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for BitCount_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Bin_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for OctInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for OctString_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Length_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Unhex_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Locate2ArgsUtf8_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Locate3ArgsUtf8_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BitLength_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Ord_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Ascii_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for ReverseUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for HexIntArg_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Ltrim_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Rtrim_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Lpad_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for LpadUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Rpad_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Replace_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Left_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for LeftUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Right_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Insert_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for RightUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for UpperUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Upper_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for LowerUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Lower_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for HexStrArg_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Locate2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Reverse_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Locate3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Space_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for SubstringIndex_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Strcmp_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InstrUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for FindInSet_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Trim1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Trim2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Trim3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for TrimDirection","synthetic":true,"types":[]},{"text":"impl Freeze for CharLength_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for CharLengthUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for ToBase64_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for FromBase64_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Quote_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Substring2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Substring3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for DateFormat_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Date_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for WeekWithMode_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for WeekWithoutMode_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for WeekDay_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for DayOfWeek_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for DayOfYear_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for WeekOfYear_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for YearWeekWithMode_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for YearWeekWithoutMode_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for ToDays_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for ToSeconds_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for AddStringAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for SubStringAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for DateDiff_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for AddDatetimeAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for AddDatetimeAndString_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for SubDurationAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for SubDatetimeAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for SubDatetimeAndString_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for FromDays_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for MakeDate_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for MakeTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Month_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for MonthName_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Hour_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Minute_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Second_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for TimeToSec_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for MicroSecond_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for Year_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for DayOfMonth_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for DayName_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for PeriodAdd_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for PeriodDiff_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for LastDay_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for AddDurationAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Freeze for AddDurationAndString_Evaluator","synthetic":true,"types":[]}];
implementors["tikv"] = [{"text":"impl Freeze for TitanCfConfig","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultCfConfig","synthetic":true,"types":[]},{"text":"impl Freeze for WriteCfConfig","synthetic":true,"types":[]},{"text":"impl Freeze for LockCfConfig","synthetic":true,"types":[]},{"text":"impl Freeze for RaftCfConfig","synthetic":true,"types":[]},{"text":"impl Freeze for VersionCfConfig","synthetic":true,"types":[]},{"text":"impl Freeze for TitanDBConfig","synthetic":true,"types":[]},{"text":"impl Freeze for DbConfig","synthetic":true,"types":[]},{"text":"impl Freeze for RaftDefaultCfConfig","synthetic":true,"types":[]},{"text":"impl Freeze for RaftDbConfig","synthetic":true,"types":[]},{"text":"impl Freeze for RaftEngineConfig","synthetic":true,"types":[]},{"text":"impl Freeze for DBType","synthetic":true,"types":[]},{"text":"impl Freeze for DBConfigManger","synthetic":true,"types":[]},{"text":"impl Freeze for MetricConfig","synthetic":true,"types":[]},{"text":"impl Freeze for UnifiedReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Freeze for StorageReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Freeze for CoprReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Freeze for ReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Freeze for BackupConfig","synthetic":true,"types":[]},{"text":"impl Freeze for CdcConfig","synthetic":true,"types":[]},{"text":"impl Freeze for TiKvConfig","synthetic":true,"types":[]},{"text":"impl Freeze for TIKVCONFIG_TYPED","synthetic":true,"types":[]},{"text":"impl Freeze for Module","synthetic":true,"types":[]},{"text":"impl Freeze for ConfigController","synthetic":true,"types":[]},{"text":"impl Freeze for ConfigInner","synthetic":true,"types":[]},{"text":"impl Freeze for CachedRequestHandler","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for ChecksumContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for TiKVStorage&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Store&gt;::Scanner: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for DagHandlerBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BatchDAGHandler","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Endpoint&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, PF, F&gt; Freeze for ConcurrencyLimiter&lt;'a, PF, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, PF, F&gt; Freeze for __ConcurrencyLimiterProjection&lt;'pin, 'a, PF, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, PF, F&gt; Freeze for __ConcurrencyLimiterProjectionRef&lt;'pin, 'a, PF, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LimitationState&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Freeze for Tracker&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, F&gt; Freeze for __TrackerProjection&lt;'pin, 'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, F&gt; Freeze for __TrackerProjectionRef&lt;'pin, 'a, F&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for CoprReqHistogramInner","synthetic":true,"types":[]},{"text":"impl Freeze for CoprReqHistogramDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for CoprReqHistogram","synthetic":true,"types":[]},{"text":"impl !Freeze for ReqWaitHistogramInner","synthetic":true,"types":[]},{"text":"impl Freeze for ReqWaitHistogramDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for ReqWaitHistogram2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for ReqWaitHistogram2Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for ReqWaitHistogram","synthetic":true,"types":[]},{"text":"impl !Freeze for PerfCounterInner","synthetic":true,"types":[]},{"text":"impl Freeze for PerfCounterDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for PerfCounter2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for PerfCounter2Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for PerfCounter","synthetic":true,"types":[]},{"text":"impl !Freeze for CoprScanKeysHistogramInner","synthetic":true,"types":[]},{"text":"impl Freeze for CoprScanKeysHistogramDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for CoprScanKeysHistogram2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for CoprScanKeysHistogram2Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for CoprScanKeysHistogram","synthetic":true,"types":[]},{"text":"impl !Freeze for CoprScanDetailsInner","synthetic":true,"types":[]},{"text":"impl Freeze for CoprScanDetailsDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for CoprScanDetails2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for CoprScanDetails2Delegator","synthetic":true,"types":[]},{"text":"impl !Freeze for CoprScanDetails3Inner","synthetic":true,"types":[]},{"text":"impl Freeze for CoprScanDetails3Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for CoprScanDetails","synthetic":true,"types":[]},{"text":"impl Freeze for CoprAcquireSemaphoreTypeCounterVec","synthetic":true,"types":[]},{"text":"impl Freeze for ReqTag","synthetic":true,"types":[]},{"text":"impl Freeze for CF","synthetic":true,"types":[]},{"text":"impl Freeze for ScanKeysKind","synthetic":true,"types":[]},{"text":"impl Freeze for ScanKind","synthetic":true,"types":[]},{"text":"impl Freeze for WaitType","synthetic":true,"types":[]},{"text":"impl Freeze for PerfMetric","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_REQ_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_REQ_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_REQ_HANDLE_TIME","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_REQ_HANDLE_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_REQ_WAIT_TIME","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_REQ_WAIT_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_REQ_HANDLER_BUILD_TIME","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_REQ_HANDLER_BUILD_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_REQ_ERROR","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_SCAN_KEYS","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_SCAN_KEYS_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_SCAN_DETAILS_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_ROCKSDB_PERF_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_ROCKSDB_PERF_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_DAG_REQ_COUNT","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_RESP_SIZE","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_ACQUIRE_SEMAPHORE_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for COPR_WAITING_FOR_SEMAPHORE","synthetic":true,"types":[]},{"text":"impl Freeze for AcquireSemaphoreType","synthetic":true,"types":[]},{"text":"impl Freeze for CopLocalMetrics","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for FuturePoolTicker&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for AnalyzeContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for SampleBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SampleCollector","synthetic":true,"types":[]},{"text":"impl Freeze for CmSketch","synthetic":true,"types":[]},{"text":"impl Freeze for FmSketch","synthetic":true,"types":[]},{"text":"impl Freeze for Bucket","synthetic":true,"types":[]},{"text":"impl Freeze for Histogram","synthetic":true,"types":[]},{"text":"impl Freeze for TrackerState","synthetic":true,"types":[]},{"text":"impl !Freeze for Tracker","synthetic":true,"types":[]},{"text":"impl !Freeze for ReqContext","synthetic":true,"types":[]},{"text":"impl&lt;E, Router&gt; Freeze for ImportSSTService&lt;E, Router&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Router: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UNIFIED_READ_POOL_RUNNING_TASKS","synthetic":true,"types":[]},{"text":"impl !Freeze for ReadPool","synthetic":true,"types":[]},{"text":"impl Freeze for ReadPoolHandle","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ReporterTicker&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReadPoolError","synthetic":true,"types":[]},{"text":"impl !Freeze for GcCommandCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for GcCommandCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for GcCommandCounterVec","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapTaskCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for SnapTaskCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for SnapTaskCounterVec","synthetic":true,"types":[]},{"text":"impl !Freeze for GcTaskCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for GcTaskCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for GcTaskCounterVec","synthetic":true,"types":[]},{"text":"impl !Freeze for GcTaskFailCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for GcTaskFailCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for GcTaskFailCounterVec","synthetic":true,"types":[]},{"text":"impl !Freeze for ResolveStoreCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for ResolveStoreCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for ResolveStoreCounterVec","synthetic":true,"types":[]},{"text":"impl !Freeze for GrpcMsgFailCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for GrpcMsgFailCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for GrpcMsgFailCounterVec","synthetic":true,"types":[]},{"text":"impl !Freeze for GcKeysCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for GcKeysCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for GcKeysCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for GcKeysCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for GcKeysCounterVec","synthetic":true,"types":[]},{"text":"impl !Freeze for GrpcMsgHistogramVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for GrpcMsgHistogramVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for GrpcMsgHistogramVec","synthetic":true,"types":[]},{"text":"impl Freeze for GrpcMsgHistogramGlobal","synthetic":true,"types":[]},{"text":"impl Freeze for RequestBatchSizeHistogramVec","synthetic":true,"types":[]},{"text":"impl Freeze for RequestBatchRatioHistogramVec","synthetic":true,"types":[]},{"text":"impl !Freeze for AsyncRequestsCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for AsyncRequestsCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for AsyncRequestsCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for AsyncRequestsCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for AsyncRequestsCounterVec","synthetic":true,"types":[]},{"text":"impl !Freeze for AsyncRequestsDurationVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for AsyncRequestsDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for AsyncRequestsDurationVec","synthetic":true,"types":[]},{"text":"impl Freeze for GrpcTypeKind","synthetic":true,"types":[]},{"text":"impl Freeze for GcCommandKind","synthetic":true,"types":[]},{"text":"impl Freeze for SnapTask","synthetic":true,"types":[]},{"text":"impl Freeze for ResolveStore","synthetic":true,"types":[]},{"text":"impl Freeze for GcKeysCF","synthetic":true,"types":[]},{"text":"impl Freeze for GcKeysDetail","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalGrpcTypeKind","synthetic":true,"types":[]},{"text":"impl Freeze for BatchableRequestKind","synthetic":true,"types":[]},{"text":"impl Freeze for GC_COMMAND_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SNAP_TASK_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for GC_GCTASK_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for GC_GCTASK_FAIL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for RESOLVE_STORE_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for GRPC_MSG_FAIL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for GC_KEYS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for GRPC_MSG_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SERVER_INFO_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for GRPC_MSG_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for GRPC_MSG_HISTOGRAM_GLOBAL","synthetic":true,"types":[]},{"text":"impl Freeze for GC_COMMAND_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for SNAP_TASK_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for GC_GCTASK_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for GC_GCTASK_FAIL_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for RESOLVE_STORE_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for GRPC_MSG_FAIL_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for GC_KEYS_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for SEND_SNAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for GRPC_REQ_BATCH_COMMANDS_SIZE","synthetic":true,"types":[]},{"text":"impl Freeze for GRPC_RESP_BATCH_COMMANDS_SIZE","synthetic":true,"types":[]},{"text":"impl Freeze for GC_EMPTY_RANGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for GC_SKIPPED_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for GC_TASK_DURATION_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for GC_TOO_BUSY_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for AUTO_GC_STATUS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for AUTO_GC_SAFE_POINT_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for AUTO_GC_PROCESSED_REGIONS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_MESSAGE_RECV_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_MESSAGE_BATCH_SIZE","synthetic":true,"types":[]},{"text":"impl Freeze for REPORT_FAILURE_MSG_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_MESSAGE_FLUSH_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for RAFT_MESSAGE_DELAY_FLUSH_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for CONFIG_ROCKSDB_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for REQUEST_BATCH_SIZE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for REQUEST_BATCH_RATIO_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for CPU_CORES_QUOTA_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for RequestStatusKind","synthetic":true,"types":[]},{"text":"impl Freeze for RequestTypeKind","synthetic":true,"types":[]},{"text":"impl Freeze for ASYNC_REQUESTS_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for ASYNC_REQUESTS_DURATIONS","synthetic":true,"types":[]},{"text":"impl Freeze for ASYNC_REQUESTS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for ASYNC_REQUESTS_DURATIONS_VEC","synthetic":true,"types":[]},{"text":"impl !Freeze for Queue","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchMessageBuffer","synthetic":true,"types":[]},{"text":"impl Freeze for MessageBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SnapshotReporter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, M, B&gt; Freeze for RaftCall&lt;R, M, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Freeze for ConnectionBuilder&lt;S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Freeze for StreamBackEnd&lt;S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectionPool","synthetic":true,"types":[]},{"text":"impl Freeze for CachedQueue","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Freeze for RaftClient&lt;S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GrpcCompressionType","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; !Freeze for MvccInfoIterator&lt;Iter&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for RegionInfo","synthetic":true,"types":[]},{"text":"impl Freeze for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; Freeze for Debugger&lt;ER&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ER: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MvccChecker","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for LockObserverState","synthetic":true,"types":[]},{"text":"impl Freeze for LockCollectorTask","synthetic":true,"types":[]},{"text":"impl Freeze for LockObserver","synthetic":true,"types":[]},{"text":"impl Freeze for LockCollectorRunner","synthetic":true,"types":[]},{"text":"impl !Freeze for AppliedLockCollector","synthetic":true,"types":[]},{"text":"impl Freeze for GcContext","synthetic":true,"types":[]},{"text":"impl Freeze for GC_CONTEXT","synthetic":true,"types":[]},{"text":"impl Freeze for GC_COMPACTION_FILTERED","synthetic":true,"types":[]},{"text":"impl Freeze for GC_COMPACTION_DELETED","synthetic":true,"types":[]},{"text":"impl Freeze for GC_COMPACTION_FAILURE","synthetic":true,"types":[]},{"text":"impl Freeze for GC_COMPACTION_FILTER_SKIP","synthetic":true,"types":[]},{"text":"impl Freeze for GC_COMPACTION_FILTER_SEEK","synthetic":true,"types":[]},{"text":"impl Freeze for GC_COMPACTION_FILTER_NEXT","synthetic":true,"types":[]},{"text":"impl Freeze for GC_COMPACTION_MVCC_DELETE_SKIP_OLDER","synthetic":true,"types":[]},{"text":"impl Freeze for GC_COMPACTION_MVCC_ROLLBACK","synthetic":true,"types":[]},{"text":"impl Freeze for WriteCompactionFilterFactory","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteCompactionFilter","synthetic":true,"types":[]},{"text":"impl !Freeze for CompactionFilterStats","synthetic":true,"types":[]},{"text":"impl Freeze for GcConfig","synthetic":true,"types":[]},{"text":"impl Freeze for GcWorkerConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Freeze for AutoGcConfig&lt;S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GcManagerError","synthetic":true,"types":[]},{"text":"impl !Freeze for GcManagerContext","synthetic":true,"types":[]},{"text":"impl Freeze for GcManagerState","synthetic":true,"types":[]},{"text":"impl !Freeze for GcManagerHandle","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !Freeze for GcManager&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for GcTask","synthetic":true,"types":[]},{"text":"impl&lt;E, RR&gt; Freeze for GcRunner&lt;E, RR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;RR: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, RR&gt; Freeze for GcWorker&lt;E, RR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;RR: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadLoadStatistics","synthetic":true,"types":[]},{"text":"impl !Freeze for ThreadLoad","synthetic":true,"types":[]},{"text":"impl Freeze for Client","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for LockManagerConfigManager","synthetic":true,"types":[]},{"text":"impl Freeze for Locks","synthetic":true,"types":[]},{"text":"impl Freeze for DetectTable","synthetic":true,"types":[]},{"text":"impl Freeze for Role","synthetic":true,"types":[]},{"text":"impl Freeze for DetectType","synthetic":true,"types":[]},{"text":"impl Freeze for Task","synthetic":true,"types":[]},{"text":"impl Freeze for Scheduler","synthetic":true,"types":[]},{"text":"impl Freeze for RoleChangeNotifier","synthetic":true,"types":[]},{"text":"impl Freeze for Inner","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Freeze for Detector&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Service","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalTaskCounterInner","synthetic":true,"types":[]},{"text":"impl Freeze for LocalTaskCounterDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for LocalTaskCounter","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalErrorCounterInner","synthetic":true,"types":[]},{"text":"impl Freeze for LocalErrorCounterDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for LocalErrorCounter","synthetic":true,"types":[]},{"text":"impl Freeze for WaitTableStatusGauge","synthetic":true,"types":[]},{"text":"impl Freeze for TASK_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for ERROR_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for WAITER_LIFETIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for DETECT_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for WAIT_TABLE_STATUS_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for DETECTOR_LEADER_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for TASK_COUNTER_METRICS","synthetic":true,"types":[]},{"text":"impl Freeze for ERROR_COUNTER_METRICS","synthetic":true,"types":[]},{"text":"impl !Freeze for DelayInner","synthetic":true,"types":[]},{"text":"impl Freeze for Delay","synthetic":true,"types":[]},{"text":"impl !Freeze for Task","synthetic":true,"types":[]},{"text":"impl !Freeze for Waiter","synthetic":true,"types":[]},{"text":"impl Freeze for WaitTable","synthetic":true,"types":[]},{"text":"impl Freeze for Scheduler","synthetic":true,"types":[]},{"text":"impl Freeze for WaiterManager","synthetic":true,"types":[]},{"text":"impl !Freeze for LockManager","synthetic":true,"types":[]},{"text":"impl&lt;C, ER&gt; !Freeze for Node&lt;C, ER&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for RaftKv&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CmdRes","synthetic":true,"types":[]},{"text":"impl Freeze for ReplicaReadLockChecker","synthetic":true,"types":[]},{"text":"impl Freeze for WriteBatchFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Task","synthetic":true,"types":[]},{"text":"impl Freeze for StoreAddr","synthetic":true,"types":[]},{"text":"impl&lt;T, RR&gt; Freeze for Runner&lt;T, RR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RR: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PdStoreAddrResolver","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; !Freeze for Server&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReqBatcher","synthetic":true,"types":[]},{"text":"impl&lt;ER, T&gt; Freeze for Service&lt;ER, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ER: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IoLoad","synthetic":true,"types":[]},{"text":"impl !Freeze for LogIterator","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for NUM_REGEX","synthetic":true,"types":[]},{"text":"impl Freeze for NicSnapshot","synthetic":true,"types":[]},{"text":"impl Freeze for Service","synthetic":true,"types":[]},{"text":"impl&lt;T, E, L&gt; Freeze for Service&lt;T, E, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BatchRespCollector","synthetic":true,"types":[]},{"text":"impl !Freeze for Task","synthetic":true,"types":[]},{"text":"impl !Freeze for SnapChunk","synthetic":true,"types":[]},{"text":"impl Freeze for SendStat","synthetic":true,"types":[]},{"text":"impl !Freeze for RecvSnapContext","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Runner&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RaftProgressState","synthetic":true,"types":[]},{"text":"impl Freeze for RaftProgress","synthetic":true,"types":[]},{"text":"impl Freeze for RaftHardState","synthetic":true,"types":[]},{"text":"impl Freeze for RaftStateRole","synthetic":true,"types":[]},{"text":"impl Freeze for RaftSoftState","synthetic":true,"types":[]},{"text":"impl Freeze for RaftStatus","synthetic":true,"types":[]},{"text":"impl Freeze for RaftPeerRole","synthetic":true,"types":[]},{"text":"impl Freeze for Epoch","synthetic":true,"types":[]},{"text":"impl Freeze for RegionPeer","synthetic":true,"types":[]},{"text":"impl Freeze for RegionMergeState","synthetic":true,"types":[]},{"text":"impl Freeze for RaftTruncatedState","synthetic":true,"types":[]},{"text":"impl Freeze for RaftApplyState","synthetic":true,"types":[]},{"text":"impl Freeze for RegionMeta","synthetic":true,"types":[]},{"text":"impl Freeze for PROFILER_MUTEX","synthetic":true,"types":[]},{"text":"impl Freeze for ProfGuard","synthetic":true,"types":[]},{"text":"impl Freeze for LogLevelRequest","synthetic":true,"types":[]},{"text":"impl&lt;E, R&gt; Freeze for StatusServer&lt;E, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for TlsIncoming&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, S&gt; Freeze for __TlsIncomingProjection&lt;'pin, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'pin, S&gt; Freeze for __TlsIncomingProjectionRef&lt;'pin, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for ServerTransport&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for StorageConfigManger","synthetic":true,"types":[]},{"text":"impl Freeze for BlockCacheConfig","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorInner","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorHeaderKind","synthetic":true,"types":[]},{"text":"impl Freeze for BTreeEngine","synthetic":true,"types":[]},{"text":"impl Freeze for BTreeEngineIterator","synthetic":true,"types":[]},{"text":"impl Freeze for BTreeEngineSnapshot","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Freeze for Cursor&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Freeze for CursorBuilder&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MockEngine","synthetic":true,"types":[]},{"text":"impl Freeze for ExpectedWrite","synthetic":true,"types":[]},{"text":"impl !Freeze for ExpectedWriteList","synthetic":true,"types":[]},{"text":"impl Freeze for MockEngineBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for PerfStatisticsFields","synthetic":true,"types":[]},{"text":"impl Freeze for PerfStatisticsInstant","synthetic":true,"types":[]},{"text":"impl Freeze for PerfStatisticsDelta","synthetic":true,"types":[]},{"text":"impl Freeze for Task","synthetic":true,"types":[]},{"text":"impl Freeze for Runner","synthetic":true,"types":[]},{"text":"impl Freeze for RocksEngineCore","synthetic":true,"types":[]},{"text":"impl Freeze for RocksEngine","synthetic":true,"types":[]},{"text":"impl Freeze for TestEngineBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for CfStatistics","synthetic":true,"types":[]},{"text":"impl Freeze for Statistics","synthetic":true,"types":[]},{"text":"impl Freeze for StatisticsSummary","synthetic":true,"types":[]},{"text":"impl Freeze for CbContext","synthetic":true,"types":[]},{"text":"impl Freeze for Modify","synthetic":true,"types":[]},{"text":"impl Freeze for WriteData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SnapContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ScanMode","synthetic":true,"types":[]},{"text":"impl !Freeze for ErrorInner","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Lock","synthetic":true,"types":[]},{"text":"impl Freeze for WaitTimeout","synthetic":true,"types":[]},{"text":"impl Freeze for DummyLockManager","synthetic":true,"types":[]},{"text":"impl !Freeze for CommandScanDetailsInner","synthetic":true,"types":[]},{"text":"impl Freeze for CommandScanDetailsDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for CommandScanDetails2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for CommandScanDetails2Delegator","synthetic":true,"types":[]},{"text":"impl !Freeze for CommandScanDetails3Inner","synthetic":true,"types":[]},{"text":"impl Freeze for CommandScanDetails3Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for CommandScanDetails","synthetic":true,"types":[]},{"text":"impl !Freeze for SchedDurationVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for SchedDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for SchedDurationVec","synthetic":true,"types":[]},{"text":"impl !Freeze for ProcessingReadVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for ProcessingReadVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for ProcessingReadVec","synthetic":true,"types":[]},{"text":"impl !Freeze for KReadVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for KReadVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for KReadVec","synthetic":true,"types":[]},{"text":"impl !Freeze for KvCommandCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for KvCommandCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for KvCommandCounterVec","synthetic":true,"types":[]},{"text":"impl !Freeze for SchedStageCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for SchedStageCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !Freeze for SchedStageCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl Freeze for SchedStageCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl Freeze for SchedStageCounterVec","synthetic":true,"types":[]},{"text":"impl !Freeze for SchedLatchDurationVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for SchedLatchDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for SchedLatchDurationVec","synthetic":true,"types":[]},{"text":"impl !Freeze for KvCommandKeysWrittenVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for KvCommandKeysWrittenVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for KvCommandKeysWrittenVec","synthetic":true,"types":[]},{"text":"impl !Freeze for SchedTooBusyVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for SchedTooBusyVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for SchedTooBusyVec","synthetic":true,"types":[]},{"text":"impl !Freeze for SchedCommandPriCounterVecInner","synthetic":true,"types":[]},{"text":"impl Freeze for SchedCommandPriCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Freeze for SchedCommandPriCounterVec","synthetic":true,"types":[]},{"text":"impl Freeze for StorageLocalMetrics","synthetic":true,"types":[]},{"text":"impl Freeze for CommandKind","synthetic":true,"types":[]},{"text":"impl Freeze for CommandStageKind","synthetic":true,"types":[]},{"text":"impl Freeze for CommandPriority","synthetic":true,"types":[]},{"text":"impl Freeze for GcKeysCF","synthetic":true,"types":[]},{"text":"impl Freeze for GcKeysDetail","synthetic":true,"types":[]},{"text":"impl Freeze for KV_COMMAND_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for KV_COMMAND_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_STAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_STAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_WRITING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_CONTEX_GAUGE","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_HISTOGRAM_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_LATCH_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_LATCH_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_PROCESSING_READ_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_PROCESSING_READ_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_PROCESSING_WRITE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_TOO_BUSY_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_TOO_BUSY_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_COMMANDS_PRI_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for SCHED_COMMANDS_PRI_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for KV_COMMAND_KEYREAD_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for KV_COMMAND_KEYREAD_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for KV_COMMAND_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl Freeze for KV_COMMAND_SCAN_DETAILS_STATIC","synthetic":true,"types":[]},{"text":"impl Freeze for KV_COMMAND_KEYWRITE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for KV_COMMAND_KEYWRITE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for REQUEST_EXCEED_BOUND","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Mvcc&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Iter, Ob&gt; Freeze for MvccInfoScanner&lt;Iter, Ob&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ob: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for MvccInfoCollector","synthetic":true,"types":[]},{"text":"impl Freeze for MvccChecksum","synthetic":true,"types":[]},{"text":"impl Freeze for MvccConflictCounterVec","synthetic":true,"types":[]},{"text":"impl Freeze for MvccDuplicateCmdCounterVec","synthetic":true,"types":[]},{"text":"impl Freeze for MvccCheckTxnStatusCounterVec","synthetic":true,"types":[]},{"text":"impl Freeze for MvccConflictKind","synthetic":true,"types":[]},{"text":"impl Freeze for MvccDuplicateCommandKind","synthetic":true,"types":[]},{"text":"impl Freeze for MvccCheckTxnStatusKind","synthetic":true,"types":[]},{"text":"impl Freeze for MVCC_VERSIONS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for GC_DELETE_VERSIONS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for CONCURRENCY_MANAGER_LOCK_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Freeze for MVCC_CONFLICT_COUNTER","synthetic":true,"types":[]},{"text":"impl Freeze for MVCC_DUPLICATE_CMD_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for MVCC_CHECK_TXN_STATUS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for PointGetterBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for PointGetter&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TxnCommitRecord","synthetic":true,"types":[]},{"text":"impl Freeze for OverlappedWrite","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for MvccReader&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for BackwardKvScanner&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for EntryBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HandleRes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for Cursors&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; !Freeze for ForwardScanner&lt;S, P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LatestKvPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for LatestEntryPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for DeltaEntryPolicy","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ScannerBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for Scanner&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ScannerConfig&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NewerTsCheckState","synthetic":true,"types":[]},{"text":"impl Freeze for GcInfo","synthetic":true,"types":[]},{"text":"impl Freeze for MissingLockAction","synthetic":true,"types":[]},{"text":"impl Freeze for ReleasedLock","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for MvccTxn&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for ErrorInner","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for AcquirePessimisticLock","synthetic":true,"types":[]},{"text":"impl !Freeze for CheckSecondaryLocks","synthetic":true,"types":[]},{"text":"impl Freeze for SecondaryLockStatus","synthetic":true,"types":[]},{"text":"impl !Freeze for CheckTxnStatus","synthetic":true,"types":[]},{"text":"impl !Freeze for Cleanup","synthetic":true,"types":[]},{"text":"impl !Freeze for Commit","synthetic":true,"types":[]},{"text":"impl !Freeze for MvccByKey","synthetic":true,"types":[]},{"text":"impl !Freeze for MvccByStartTs","synthetic":true,"types":[]},{"text":"impl !Freeze for Pause","synthetic":true,"types":[]},{"text":"impl !Freeze for PessimisticRollback","synthetic":true,"types":[]},{"text":"impl !Freeze for Prewrite","synthetic":true,"types":[]},{"text":"impl !Freeze for PrewritePessimistic","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; !Freeze for Prewriter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Optimistic","synthetic":true,"types":[]},{"text":"impl Freeze for Pessimistic","synthetic":true,"types":[]},{"text":"impl !Freeze for ResolveLock","synthetic":true,"types":[]},{"text":"impl !Freeze for ResolveLockLite","synthetic":true,"types":[]},{"text":"impl !Freeze for ResolveLockReadPhase","synthetic":true,"types":[]},{"text":"impl !Freeze for Rollback","synthetic":true,"types":[]},{"text":"impl !Freeze for TxnHeartBeat","synthetic":true,"types":[]},{"text":"impl !Freeze for Command","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for TypedCommand&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReleasedLocks","synthetic":true,"types":[]},{"text":"impl Freeze for ResponsePolicy","synthetic":true,"types":[]},{"text":"impl !Freeze for WriteResult","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Freeze for WriteContext&lt;'a, L&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SchedLocalMetrics","synthetic":true,"types":[]},{"text":"impl Freeze for SchedPool","synthetic":true,"types":[]},{"text":"impl Freeze for SchedTicker","synthetic":true,"types":[]},{"text":"impl !Freeze for Task","synthetic":true,"types":[]},{"text":"impl Freeze for CmdTimer","synthetic":true,"types":[]},{"text":"impl !Freeze for TaskContext","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; !Freeze for SchedulerInner&lt;L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; Freeze for Scheduler&lt;E, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Freeze for Gc&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TransactionProperties&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CommitKind","synthetic":true,"types":[]},{"text":"impl Freeze for TransactionKind","synthetic":true,"types":[]},{"text":"impl Freeze for LockStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrewriteMutation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Latch","synthetic":true,"types":[]},{"text":"impl Freeze for Lock","synthetic":true,"types":[]},{"text":"impl Freeze for Latches","synthetic":true,"types":[]},{"text":"impl Freeze for TxnEntry","synthetic":true,"types":[]},{"text":"impl Freeze for EntryBatch","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for SnapshotStore&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FixtureStore","synthetic":true,"types":[]},{"text":"impl Freeze for FixtureStoreScanner","synthetic":true,"types":[]},{"text":"impl !Freeze for ProcessResult","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorInner","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for FuturePoolTicker&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MvccInfo","synthetic":true,"types":[]},{"text":"impl Freeze for TxnStatus","synthetic":true,"types":[]},{"text":"impl Freeze for PrewriteResult","synthetic":true,"types":[]},{"text":"impl Freeze for PessimisticLockRes","synthetic":true,"types":[]},{"text":"impl Freeze for SecondaryLocksStatus","synthetic":true,"types":[]},{"text":"impl Freeze for StorageCallback","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; Freeze for Storage&lt;E, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; Freeze for TestStorageBuilder&lt;E, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tikv_alloc"] = [{"text":"impl Freeze for ProfError","synthetic":true,"types":[]},{"text":"impl Freeze for THREAD_MEMORY_MAP","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryStatsAccessor","synthetic":true,"types":[]}];
implementors["tikv_jemalloc_ctl"] = [{"text":"impl Freeze for narenas","synthetic":true,"types":[]},{"text":"impl Freeze for narenas_mib","synthetic":true,"types":[]},{"text":"impl Freeze for malloc_conf","synthetic":true,"types":[]},{"text":"impl Freeze for malloc_conf_mib","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Name","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Mib&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MibStr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for abort","synthetic":true,"types":[]},{"text":"impl Freeze for abort_mib","synthetic":true,"types":[]},{"text":"impl Freeze for dss","synthetic":true,"types":[]},{"text":"impl Freeze for dss_mib","synthetic":true,"types":[]},{"text":"impl Freeze for narenas","synthetic":true,"types":[]},{"text":"impl Freeze for narenas_mib","synthetic":true,"types":[]},{"text":"impl Freeze for junk","synthetic":true,"types":[]},{"text":"impl Freeze for junk_mib","synthetic":true,"types":[]},{"text":"impl Freeze for zero","synthetic":true,"types":[]},{"text":"impl Freeze for zero_mib","synthetic":true,"types":[]},{"text":"impl Freeze for tcache","synthetic":true,"types":[]},{"text":"impl Freeze for tcache_mib","synthetic":true,"types":[]},{"text":"impl Freeze for lg_tcache_max","synthetic":true,"types":[]},{"text":"impl Freeze for lg_tcache_max_mib","synthetic":true,"types":[]},{"text":"impl Freeze for background_thread","synthetic":true,"types":[]},{"text":"impl Freeze for background_thread_mib","synthetic":true,"types":[]},{"text":"impl Freeze for allocated","synthetic":true,"types":[]},{"text":"impl Freeze for allocated_mib","synthetic":true,"types":[]},{"text":"impl Freeze for active","synthetic":true,"types":[]},{"text":"impl Freeze for active_mib","synthetic":true,"types":[]},{"text":"impl Freeze for metadata","synthetic":true,"types":[]},{"text":"impl Freeze for metadata_mib","synthetic":true,"types":[]},{"text":"impl Freeze for resident","synthetic":true,"types":[]},{"text":"impl Freeze for resident_mib","synthetic":true,"types":[]},{"text":"impl Freeze for mapped","synthetic":true,"types":[]},{"text":"impl Freeze for mapped_mib","synthetic":true,"types":[]},{"text":"impl Freeze for retained","synthetic":true,"types":[]},{"text":"impl Freeze for retained_mib","synthetic":true,"types":[]},{"text":"impl Freeze for allocatedp","synthetic":true,"types":[]},{"text":"impl Freeze for allocatedp_mib","synthetic":true,"types":[]},{"text":"impl Freeze for deallocatedp","synthetic":true,"types":[]},{"text":"impl Freeze for deallocatedp_mib","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for version","synthetic":true,"types":[]},{"text":"impl Freeze for version_mib","synthetic":true,"types":[]},{"text":"impl Freeze for background_thread","synthetic":true,"types":[]},{"text":"impl Freeze for background_thread_mib","synthetic":true,"types":[]},{"text":"impl Freeze for max_background_threads","synthetic":true,"types":[]},{"text":"impl Freeze for max_background_threads_mib","synthetic":true,"types":[]},{"text":"impl Freeze for epoch","synthetic":true,"types":[]},{"text":"impl Freeze for epoch_mib","synthetic":true,"types":[]}];
implementors["tikv_jemallocator"] = [{"text":"impl Freeze for Jemalloc","synthetic":true,"types":[]}];
implementors["tikv_util"] = [{"text":"impl Freeze for BufferVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WithConcatExtend&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for FsInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ConfigError","synthetic":true,"types":[]},{"text":"impl Freeze for LogFormat","synthetic":true,"types":[]},{"text":"impl Freeze for ReadableSize","synthetic":true,"types":[]},{"text":"impl Freeze for OptionReadableSize","synthetic":true,"types":[]},{"text":"impl Freeze for ReadableDuration","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for VersionTrack&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Tracker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TomlLine","synthetic":true,"types":[]},{"text":"impl Freeze for TomlWriter","synthetic":true,"types":[]},{"text":"impl !Freeze for BatchCommandsWaker","synthetic":true,"types":[]},{"text":"impl&lt;T, C, A&gt; Freeze for MustCall&lt;T, C, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DeadlineError","synthetic":true,"types":[]},{"text":"impl Freeze for Deadline","synthetic":true,"types":[]},{"text":"impl Freeze for KeyBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RotatingFileLogger","synthetic":true,"types":[]},{"text":"impl Freeze for RotatingFileLoggerBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RotateByTime","synthetic":true,"types":[]},{"text":"impl Freeze for RotateBySize","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for TikvFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for RocksFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for LogAndFuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for SlowLogFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SlowCostSerializer","synthetic":true,"types":[]},{"text":"impl Freeze for LogCost","synthetic":true,"types":[]},{"text":"impl&lt;N, R, S, T&gt; Freeze for LogDispatcher&lt;N, R, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for Record&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for ValueEntry&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for Trace&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for LruCache&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Metrics","synthetic":true,"types":[]},{"text":"impl !Freeze for ThreadsCollector","synthetic":true,"types":[]},{"text":"impl Freeze for CLK_TCK","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadMetrics","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadInfoStatistics","synthetic":true,"types":[]},{"text":"impl Freeze for TidRetriever","synthetic":true,"types":[]},{"text":"impl !Freeze for ProcessCollector","synthetic":true,"types":[]},{"text":"impl Freeze for CLK_TCK","synthetic":true,"types":[]},{"text":"impl Freeze for PAGESIZE","synthetic":true,"types":[]},{"text":"impl Freeze for BOOT_TIME","synthetic":true,"types":[]},{"text":"impl Freeze for AllocStatsCollector","synthetic":true,"types":[]},{"text":"impl Freeze for HistogramReader","synthetic":true,"types":[]},{"text":"impl Freeze for CRITICAL_ERROR","synthetic":true,"types":[]},{"text":"impl !Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Notifier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for VecCollector","synthetic":true,"types":[]},{"text":"impl&lt;T, E, I, C&gt; Freeze for BatchReceiver&lt;T, E, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for State","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for LooseBoundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !Freeze for AsyncReadAsSyncStreamOfBytes&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LiunxStyleCpuTime","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for MountInfoFieldPart1","synthetic":true,"types":[]},{"text":"impl Freeze for MountInfoFieldPart2","synthetic":true,"types":[]},{"text":"impl Freeze for MountPoint","synthetic":true,"types":[]},{"text":"impl Freeze for SubsysFields","synthetic":true,"types":[]},{"text":"impl Freeze for CGroupSubsys","synthetic":true,"types":[]},{"text":"impl Freeze for CGroup","synthetic":true,"types":[]},{"text":"impl Freeze for CGroupSys","synthetic":true,"types":[]},{"text":"impl Freeze for SysQuota","synthetic":true,"types":[]},{"text":"impl Freeze for SYS_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for UnixSecs","synthetic":true,"types":[]},{"text":"impl Freeze for SlowTimer","synthetic":true,"types":[]},{"text":"impl !Freeze for Monitor","synthetic":true,"types":[]},{"text":"impl Freeze for Instant","synthetic":true,"types":[]},{"text":"impl Freeze for CoarseClock","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadReadId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Timer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TimeoutTask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GLOBAL_TIMER_HANDLE","synthetic":true,"types":[]},{"text":"impl Freeze for TimeZero","synthetic":true,"types":[]},{"text":"impl Freeze for SteadyClock","synthetic":true,"types":[]},{"text":"impl Freeze for STEADY_CLOCK","synthetic":true,"types":[]},{"text":"impl Freeze for SteadyTimer","synthetic":true,"types":[]},{"text":"impl Freeze for GLOBAL_STEADY_TIMER","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Stopped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Scheduler&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WORKER_PENDING_TASK_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for WORKER_HANDLED_TASK_VEC","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ScheduleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RunnableWrapper&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Msg&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Scheduler&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LazyWorker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReceiverWrapper&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Builder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Worker","synthetic":true,"types":[]},{"text":"impl Freeze for Env","synthetic":true,"types":[]},{"text":"impl Freeze for FuturePool","synthetic":true,"types":[]},{"text":"impl Freeze for Full","synthetic":true,"types":[]},{"text":"impl Freeze for FUTUREPOOL_RUNNING_TASK_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for FUTUREPOOL_HANDLED_TASK_VEC","synthetic":true,"types":[]},{"text":"impl Freeze for FUTUREPOOL_SCHEDULE_DURATION_VEC","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TickerWrapper&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultTicker","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for YatpPoolRunner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for YatpPoolBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultRng","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DeferContext&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; Freeze for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RingQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MustConsumeVec&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Freeze for Date","synthetic":true,"types":[]},{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ConversionRange","synthetic":true,"types":[]},{"text":"impl Freeze for ComponentRange","synthetic":true,"types":[]},{"text":"impl Freeze for IndeterminateOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl Freeze for Instant","synthetic":true,"types":[]},{"text":"impl Freeze for OffsetDateTime","synthetic":true,"types":[]},{"text":"impl Freeze for PrimitiveDateTime","synthetic":true,"types":[]},{"text":"impl Freeze for Sign","synthetic":true,"types":[]},{"text":"impl Freeze for Time","synthetic":true,"types":[]},{"text":"impl Freeze for UtcOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Weekday","synthetic":true,"types":[]}];
implementors["tipb"] = [{"text":"impl !Freeze for FieldType","synthetic":true,"types":[]},{"text":"impl !Freeze for Expr","synthetic":true,"types":[]},{"text":"impl !Freeze for RpnExpr","synthetic":true,"types":[]},{"text":"impl !Freeze for ByItem","synthetic":true,"types":[]},{"text":"impl Freeze for ExprType","synthetic":true,"types":[]},{"text":"impl Freeze for ScalarFuncSig","synthetic":true,"types":[]},{"text":"impl !Freeze for ChecksumRewriteRule","synthetic":true,"types":[]},{"text":"impl !Freeze for ChecksumRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ChecksumResponse","synthetic":true,"types":[]},{"text":"impl Freeze for ChecksumScanOn","synthetic":true,"types":[]},{"text":"impl Freeze for ChecksumAlgorithm","synthetic":true,"types":[]},{"text":"impl !Freeze for AnalyzeReq","synthetic":true,"types":[]},{"text":"impl !Freeze for AnalyzeIndexReq","synthetic":true,"types":[]},{"text":"impl !Freeze for AnalyzeColumnsReq","synthetic":true,"types":[]},{"text":"impl !Freeze for AnalyzeMixedResp","synthetic":true,"types":[]},{"text":"impl !Freeze for AnalyzeColumnsResp","synthetic":true,"types":[]},{"text":"impl !Freeze for AnalyzeIndexResp","synthetic":true,"types":[]},{"text":"impl !Freeze for Bucket","synthetic":true,"types":[]},{"text":"impl !Freeze for Histogram","synthetic":true,"types":[]},{"text":"impl !Freeze for FmSketch","synthetic":true,"types":[]},{"text":"impl !Freeze for SampleCollector","synthetic":true,"types":[]},{"text":"impl !Freeze for CmSketchRow","synthetic":true,"types":[]},{"text":"impl !Freeze for CmSketchTopN","synthetic":true,"types":[]},{"text":"impl !Freeze for CmSketch","synthetic":true,"types":[]},{"text":"impl Freeze for AnalyzeType","synthetic":true,"types":[]},{"text":"impl !Freeze for Row","synthetic":true,"types":[]},{"text":"impl !Freeze for Error","synthetic":true,"types":[]},{"text":"impl !Freeze for SelectResponse","synthetic":true,"types":[]},{"text":"impl !Freeze for Chunk","synthetic":true,"types":[]},{"text":"impl !Freeze for RowMeta","synthetic":true,"types":[]},{"text":"impl !Freeze for DagRequest","synthetic":true,"types":[]},{"text":"impl !Freeze for ChunkMemoryLayout","synthetic":true,"types":[]},{"text":"impl !Freeze for UserIdentity","synthetic":true,"types":[]},{"text":"impl !Freeze for StreamResponse","synthetic":true,"types":[]},{"text":"impl Freeze for EncodeType","synthetic":true,"types":[]},{"text":"impl Freeze for Endian","synthetic":true,"types":[]},{"text":"impl !Freeze for TableInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for ColumnInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for IndexInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for KeyRange","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl !Freeze for Executor","synthetic":true,"types":[]},{"text":"impl !Freeze for ExchangeSender","synthetic":true,"types":[]},{"text":"impl !Freeze for ExchangeReceiver","synthetic":true,"types":[]},{"text":"impl !Freeze for TableScan","synthetic":true,"types":[]},{"text":"impl !Freeze for Join","synthetic":true,"types":[]},{"text":"impl !Freeze for IndexScan","synthetic":true,"types":[]},{"text":"impl !Freeze for Selection","synthetic":true,"types":[]},{"text":"impl !Freeze for Projection","synthetic":true,"types":[]},{"text":"impl !Freeze for Aggregation","synthetic":true,"types":[]},{"text":"impl !Freeze for TopN","synthetic":true,"types":[]},{"text":"impl !Freeze for Limit","synthetic":true,"types":[]},{"text":"impl !Freeze for Kill","synthetic":true,"types":[]},{"text":"impl !Freeze for ExecutorExecutionSummary","synthetic":true,"types":[]},{"text":"impl Freeze for ExecType","synthetic":true,"types":[]},{"text":"impl Freeze for ExchangeType","synthetic":true,"types":[]},{"text":"impl Freeze for EngineType","synthetic":true,"types":[]},{"text":"impl Freeze for JoinType","synthetic":true,"types":[]},{"text":"impl Freeze for JoinExecType","synthetic":true,"types":[]},{"text":"impl !Freeze for InUnionMetadata","synthetic":true,"types":[]},{"text":"impl !Freeze for CompareInMetadata","synthetic":true,"types":[]}];
implementors["tipb_helper"] = [{"text":"impl !Freeze for ExprDefBuilder","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl Freeze for DirBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl Freeze for OpenOptions","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDir","synthetic":true,"types":[]},{"text":"impl Freeze for DirEntry","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Freeze for PollEvented&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Registration","synthetic":true,"types":[]},{"text":"impl Freeze for Stderr","synthetic":true,"types":[]},{"text":"impl Freeze for Stdin","synthetic":true,"types":[]},{"text":"impl Freeze for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Freeze for Seek&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; Freeze for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized, W:&nbsp;?Sized&gt; Freeze for Copy&lt;'a, R, W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DuplexStream","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, B&gt; Freeze for StreamReader&lt;S, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ReaderStream&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl Freeze for ReuniteError","synthetic":true,"types":[]},{"text":"impl !Freeze for TcpStream","synthetic":true,"types":[]},{"text":"impl !Freeze for UdpSocket","synthetic":true,"types":[]},{"text":"impl Freeze for SendHalf","synthetic":true,"types":[]},{"text":"impl Freeze for RecvHalf","synthetic":true,"types":[]},{"text":"impl Freeze for ReuniteError","synthetic":true,"types":[]},{"text":"impl !Freeze for UnixDatagram","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecvHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SendHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedSendHalf","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedRecvHalf","synthetic":true,"types":[]},{"text":"impl Freeze for ReuniteError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl Freeze for ReuniteError","synthetic":true,"types":[]},{"text":"impl !Freeze for UnixStream","synthetic":true,"types":[]},{"text":"impl Freeze for UCred","synthetic":true,"types":[]},{"text":"impl Freeze for Command","synthetic":true,"types":[]},{"text":"impl !Freeze for Child","synthetic":true,"types":[]},{"text":"impl !Freeze for ChildStdin","synthetic":true,"types":[]},{"text":"impl !Freeze for ChildStdout","synthetic":true,"types":[]},{"text":"impl !Freeze for ChildStderr","synthetic":true,"types":[]},{"text":"impl !Freeze for JoinError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for JoinHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Handle","synthetic":true,"types":[]},{"text":"impl Freeze for TryCurrentError","synthetic":true,"types":[]},{"text":"impl Freeze for Runtime","synthetic":true,"types":[]},{"text":"impl Freeze for SignalKind","synthetic":true,"types":[]},{"text":"impl !Freeze for Signal","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pending&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for StreamMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Barrier","synthetic":true,"types":[]},{"text":"impl Freeze for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl Freeze for ClosedError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for OwnedMutexGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TryLockError","synthetic":true,"types":[]},{"text":"impl !Freeze for Notify","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DelayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl Freeze for Delay","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Instant","synthetic":true,"types":[]},{"text":"impl Freeze for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Elapsed","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Throttle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl Freeze for Enter","synthetic":true,"types":[]},{"text":"impl Freeze for EnterError","synthetic":true,"types":[]},{"text":"impl Freeze for SpawnError","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Freeze for ParkThread","synthetic":true,"types":[]},{"text":"impl Freeze for ParkError","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkThread","synthetic":true,"types":[]}];
implementors["tokio_openssl"] = [{"text":"impl&lt;S&gt; Freeze for SslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for HandshakeError&lt;S&gt;","synthetic":true,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl Freeze for Clock","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DelayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Throttle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ThrottleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Handle","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Freeze for Timer&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Turn","synthetic":true,"types":[]},{"text":"impl Freeze for Delay","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Interval","synthetic":true,"types":[]}];
implementors["tokio_tls"] = [{"text":"impl&lt;S&gt; Freeze for TlsStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TlsConnector","synthetic":true,"types":[]},{"text":"impl Freeze for TlsAcceptor","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Freeze for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Freeze for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl Freeze for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl Freeze for LinesCodec","synthetic":true,"types":[]},{"text":"impl Freeze for LinesCodecError","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;T&gt; !Freeze for TryLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Locked&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Freeze for XxHash64","synthetic":true,"types":[]},{"text":"impl Freeze for XxHash32","synthetic":true,"types":[]}];
implementors["txn_types"] = [{"text":"impl Freeze for LockType","synthetic":true,"types":[]},{"text":"impl Freeze for Lock","synthetic":true,"types":[]},{"text":"impl Freeze for TimeStamp","synthetic":true,"types":[]},{"text":"impl Freeze for TsSet","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl Freeze for MutationType","synthetic":true,"types":[]},{"text":"impl Freeze for Mutation","synthetic":true,"types":[]},{"text":"impl Freeze for OldValue","synthetic":true,"types":[]},{"text":"impl Freeze for TxnExtra","synthetic":true,"types":[]},{"text":"impl Freeze for WriteType","synthetic":true,"types":[]},{"text":"impl Freeze for Write","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WriteRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for ErrorInner","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Freeze for B0","synthetic":true,"types":[]},{"text":"impl Freeze for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Z0","synthetic":true,"types":[]},{"text":"impl Freeze for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Freeze for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Freeze for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Greater","synthetic":true,"types":[]},{"text":"impl Freeze for Less","synthetic":true,"types":[]},{"text":"impl Freeze for Equal","synthetic":true,"types":[]}];
implementors["unchecked_index"] = [{"text":"impl&lt;S&gt; Freeze for UncheckedIndex&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S&gt; Freeze for UniCase&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Ascii&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for BidiClass","synthetic":true,"types":[]},{"text":"impl Freeze for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Freeze for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Freeze for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Freeze for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Freeze for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl Freeze for GraphemeIncomplete","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Freeze for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Mark","synthetic":true,"types":[]},{"text":"impl Freeze for EndOfInput","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S&gt; Freeze for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Origin","synthetic":true,"types":[]},{"text":"impl Freeze for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl Freeze for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Serializer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["utf8parse"] = [{"text":"impl Freeze for Parser","synthetic":true,"types":[]}];
implementors["uuid"] = [{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Hyphenated","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for HyphenatedRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Simple","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SimpleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Urn","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UrnRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for Uuid","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; Freeze for VecMap&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Entry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for VacantEntry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for OccupiedEntry&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Iter&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for IterMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Keys&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Values&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for ValuesMut&lt;'a, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for IntoIter&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Freeze for Drain&lt;'a, V&gt;","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl Freeze for DirEntry","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for WalkDir","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl Freeze for Giver","synthetic":true,"types":[]},{"text":"impl Freeze for Taker","synthetic":true,"types":[]},{"text":"impl Freeze for SharedGiver","synthetic":true,"types":[]},{"text":"impl Freeze for Closed","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl&lt;'a&gt; Freeze for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl Freeze for TextPosition","synthetic":true,"types":[]},{"text":"impl Freeze for XmlVersion","synthetic":true,"types":[]},{"text":"impl Freeze for Namespace","synthetic":true,"types":[]},{"text":"impl Freeze for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ParserConfig","synthetic":true,"types":[]},{"text":"impl Freeze for XmlEvent","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EventReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Events&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EmitterError","synthetic":true,"types":[]},{"text":"impl Freeze for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["yatp"] = [{"text":"impl Freeze for MULTILEVEL_LEVEL_ELAPSED","synthetic":true,"types":[]},{"text":"impl Freeze for MULTILEVEL_LEVEL0_CHANCE","synthetic":true,"types":[]},{"text":"impl Freeze for SchedConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CloneRunnerBuilder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Remote&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Local&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ThreadPool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for MultilevelRunnerBuilder&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !Freeze for MultilevelRunner&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Extras","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Pop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for QueueType","synthetic":true,"types":[]},{"text":"impl Freeze for Task","synthetic":true,"types":[]},{"text":"impl Freeze for TaskCell","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Handle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Runner","synthetic":true,"types":[]},{"text":"impl !Freeze for Task","synthetic":true,"types":[]},{"text":"impl Freeze for TaskCell","synthetic":true,"types":[]},{"text":"impl Freeze for Runner","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Freeze for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Freeze for ZSTD_CCtx_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_DCtx_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_strategy","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_cParameter","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_bounds","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_ResetDirective","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_dParameter","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_inBuffer_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_outBuffer_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_EndDirective","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_CDict_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_DDict_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZDICT_params_t","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()