(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl Sync for RollingAdler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Sync for AHasher","synthetic":true,"types":[]},{"text":"impl Sync for RandomState","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Sync for AHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Sync for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Sync for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Sync for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Sync for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Match","synthetic":true,"types":[]},{"text":"impl Sync for MatchKind","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Sync for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Searcher","synthetic":true,"types":[]},{"text":"impl Sync for MatchKind","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Sync for Prefix","synthetic":true,"types":[]},{"text":"impl Sync for Infix","synthetic":true,"types":[]},{"text":"impl Sync for Suffix","synthetic":true,"types":[]},{"text":"impl Sync for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Sync for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Sync for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Colour","synthetic":true,"types":[]}];
implementors["antidote"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; Sync for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Condvar","synthetic":true,"types":[]},{"text":"impl Sync for TryLockError","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Sync for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for RwLockReadGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for RwLockWriteGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;'l, T&gt; Sync for Guard&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for ArcSwapAny&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DirectDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for DynGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Sync for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ConstantDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Sync for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Sync for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Shard","synthetic":true,"types":[]},{"text":"impl Sync for Global","synthetic":true,"types":[]},{"text":"impl Sync for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for PrivateSharded&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; Sync for MapGuard&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a T: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Sync for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array + Sync&gt; Sync for Drain&lt;'a, A&gt;","synthetic":false,"types":[]}];
implementors["async_speed_limit"] = [{"text":"impl Sync for StandardClock","synthetic":true,"types":[]},{"text":"impl Sync for Nanoseconds","synthetic":true,"types":[]},{"text":"impl Sync for ManualDelay","synthetic":true,"types":[]},{"text":"impl Sync for ManualClock","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for Builder&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Instant: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for Limiter&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Instant: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, R&gt; Sync for Consume&lt;C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Delay: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, C&gt; Sync for Resource&lt;R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Delay: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Instant: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["atty"] = [{"text":"impl Sync for Stream","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl Sync for Frame","synthetic":true,"types":[]},{"text":"impl !Sync for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !Sync for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Backtrace","synthetic":true,"types":[]},{"text":"impl Sync for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl Sync for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PrintFmt","synthetic":true,"types":[]}];
implementors["backtrace_sys"] = [{"text":"impl Sync for backtrace_state","synthetic":true,"types":[]}];
implementors["backup"] = [{"text":"impl&lt;E, R&gt; !Sync for Endpoint&lt;E, R&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Task","synthetic":true,"types":[]},{"text":"impl Sync for Service","synthetic":true,"types":[]},{"text":"impl !Sync for BackupRawKVWriter","synthetic":true,"types":[]},{"text":"impl !Sync for BackupWriter","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for LimitedStorage","synthetic":true,"types":[]},{"text":"impl Sync for BackupRange","synthetic":true,"types":[]},{"text":"impl Sync for ConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Progress&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ControlThreadPool","synthetic":true,"types":[]},{"text":"impl Sync for BACKUP_REQUEST_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for BACKUP_RANGE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for BACKUP_RANGE_SIZE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for BACKUP_THREAD_POOL_SIZE_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for BACKUP_RANGE_ERROR_VEC","synthetic":true,"types":[]},{"text":"impl !Sync for Writer","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for DecodeError","synthetic":true,"types":[]},{"text":"impl Sync for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["batch_system"] = [{"text":"impl&lt;N, C&gt; !Sync for BatchSystem&lt;N, C&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl&lt;Owner&gt; !Sync for BasicMailbox&lt;Owner&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Owner, Scheduler&gt; !Sync for Mailbox&lt;Owner, Scheduler&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C, Ns, Cs&gt; !Sync for Router&lt;N, C, Ns, Cs&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; Sync for NormalScheduler&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; Sync for ControlScheduler&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; Sync for Batch&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C, Handler&gt; !Sync for Poller&lt;N, C, Handler&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; Sync for FsmTypes&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReschedulePolicy","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for FsmState&lt;N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for CheckDoResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for Runner","synthetic":true,"types":[]},{"text":"impl Sync for HandleMetrics","synthetic":true,"types":[]},{"text":"impl Sync for Handler","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl !Sync for Message","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Sync for BlockBuffer&lt;BlockSize&gt;","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl Sync for BStr","synthetic":true,"types":[]},{"text":"impl Sync for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Sync for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Sync for BigEndian","synthetic":true,"types":[]},{"text":"impl Sync for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;'a&gt; Sync for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BytesMut","synthetic":false,"types":[]},{"text":"impl Sync for Bytes","synthetic":false,"types":[]}];
implementors["bzip2_sys"] = [{"text":"impl !Sync for bz_stream","synthetic":true,"types":[]}];
implementors["c2_chacha"] = [{"text":"impl Sync for ChaCha","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Sync for State&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cache_size"] = [{"text":"impl Sync for CacheType","synthetic":true,"types":[]}];
implementors["cargo_metadata"] = [{"text":"impl Sync for Dependency","synthetic":true,"types":[]},{"text":"impl Sync for Artifact","synthetic":true,"types":[]},{"text":"impl Sync for ArtifactProfile","synthetic":true,"types":[]},{"text":"impl Sync for BuildScript","synthetic":true,"types":[]},{"text":"impl Sync for CompilerMessage","synthetic":true,"types":[]},{"text":"impl Sync for PackageId","synthetic":true,"types":[]},{"text":"impl Sync for Metadata","synthetic":true,"types":[]},{"text":"impl Sync for Resolve","synthetic":true,"types":[]},{"text":"impl Sync for Node","synthetic":true,"types":[]},{"text":"impl Sync for NodeDep","synthetic":true,"types":[]},{"text":"impl Sync for DepKindInfo","synthetic":true,"types":[]},{"text":"impl Sync for Package","synthetic":true,"types":[]},{"text":"impl Sync for Source","synthetic":true,"types":[]},{"text":"impl Sync for Target","synthetic":true,"types":[]},{"text":"impl Sync for MetadataCommand","synthetic":true,"types":[]},{"text":"impl Sync for DependencyKind","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Message","synthetic":true,"types":[]},{"text":"impl Sync for CargoOpt","synthetic":true,"types":[]},{"text":"impl Sync for DiagnosticCode","synthetic":true,"types":[]},{"text":"impl Sync for DiagnosticSpanLine","synthetic":true,"types":[]},{"text":"impl Sync for DiagnosticSpanMacroExpansion","synthetic":true,"types":[]},{"text":"impl Sync for DiagnosticSpan","synthetic":true,"types":[]},{"text":"impl Sync for Diagnostic","synthetic":true,"types":[]},{"text":"impl Sync for Applicability","synthetic":true,"types":[]},{"text":"impl Sync for DiagnosticLevel","synthetic":true,"types":[]}];
implementors["cdc"] = [{"text":"impl Sync for CdcTxnExtraScheduler","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Endpoint&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for CdcObserver","synthetic":true,"types":[]},{"text":"impl Sync for Service","synthetic":true,"types":[]},{"text":"impl !Sync for Task","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for DownstreamID","synthetic":true,"types":[]},{"text":"impl Sync for Downstream","synthetic":true,"types":[]},{"text":"impl Sync for Pending","synthetic":true,"types":[]},{"text":"impl Sync for Delegate","synthetic":true,"types":[]},{"text":"impl Sync for DownstreamState","synthetic":true,"types":[]},{"text":"impl Sync for PendingLock","synthetic":true,"types":[]},{"text":"impl !Sync for OldValueCache","synthetic":true,"types":[]},{"text":"impl Sync for Initializer","synthetic":true,"types":[]},{"text":"impl Sync for Deregister","synthetic":true,"types":[]},{"text":"impl Sync for CDC_RESOLVED_TS_GAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for CDC_SCAN_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for CDC_MIN_RESOLVED_TS_REGION","synthetic":true,"types":[]},{"text":"impl Sync for CDC_MIN_RESOLVED_TS","synthetic":true,"types":[]},{"text":"impl Sync for CDC_PENDING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for CDC_CAPTURED_REGION_COUNT","synthetic":true,"types":[]},{"text":"impl Sync for CDC_OLD_VALUE_CACHE_MISS","synthetic":true,"types":[]},{"text":"impl Sync for CDC_OLD_VALUE_CACHE_ACCESS","synthetic":true,"types":[]},{"text":"impl Sync for CDC_OLD_VALUE_CACHE_BYTES","synthetic":true,"types":[]},{"text":"impl Sync for CDC_OLD_VALUE_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl Sync for CDC_OLD_VALUE_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for OldValueReader&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ConnID","synthetic":true,"types":[]},{"text":"impl Sync for EventBatcher","synthetic":true,"types":[]},{"text":"impl Sync for FeatureGate","synthetic":true,"types":[]},{"text":"impl Sync for Conn","synthetic":true,"types":[]},{"text":"impl Sync for CdcEvent","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;Tz&gt; Sync for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Sync for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Sync for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Sync for Weekday","synthetic":true,"types":[]},{"text":"impl Sync for FixedOffset","synthetic":true,"types":[]},{"text":"impl Sync for Local","synthetic":true,"types":[]},{"text":"impl Sync for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for NaiveDate","synthetic":true,"types":[]},{"text":"impl Sync for IsoWeek","synthetic":true,"types":[]},{"text":"impl Sync for NaiveTime","synthetic":true,"types":[]},{"text":"impl Sync for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Sync for Parsed","synthetic":true,"types":[]},{"text":"impl Sync for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Sync for InternalFixed","synthetic":true,"types":[]},{"text":"impl Sync for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Pad","synthetic":true,"types":[]},{"text":"impl Sync for Numeric","synthetic":true,"types":[]},{"text":"impl Sync for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["chrono_tz"] = [{"text":"impl Sync for Tz","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b&gt; !Sync for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ArgSettings","synthetic":true,"types":[]},{"text":"impl Sync for AppSettings","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Shell","synthetic":true,"types":[]}];
implementors["cmd"] = [{"text":"impl&lt;ER&gt; !Sync for TiKVServer&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; !Sync for TiKVEngines&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; !Sync for Servers&lt;ER&gt;","synthetic":true,"types":[]}];
implementors["codec"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorInner","synthetic":true,"types":[]},{"text":"impl Sync for MemComparableByteCodec","synthetic":true,"types":[]},{"text":"impl Sync for AscendingMemComparableCodecHelper","synthetic":true,"types":[]},{"text":"impl Sync for DescendingMemComparableCodecHelper","synthetic":true,"types":[]},{"text":"impl Sync for CompactByteCodec","synthetic":true,"types":[]},{"text":"impl Sync for NumberCodec","synthetic":true,"types":[]}];
implementors["concurrency_manager"] = [{"text":"impl Sync for KeyHandle","synthetic":true,"types":[]},{"text":"impl Sync for KeyHandleGuard","synthetic":true,"types":[]},{"text":"impl Sync for LockTable","synthetic":true,"types":[]},{"text":"impl Sync for ConcurrencyManager","synthetic":true,"types":[]}];
implementors["configuration"] = [{"text":"impl Sync for ConfigValue","synthetic":true,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl Sync for LazyBool","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Sync for Hasher","synthetic":true,"types":[]}];
implementors["crc64fast"] = [{"text":"impl Sync for Digest","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for TryReadyError","synthetic":true,"types":[]},{"text":"impl Sync for TrySelectError","synthetic":true,"types":[]},{"text":"impl Sync for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sync for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !Sync for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Sync for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Sync for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Sync for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync&gt; Sync for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Sync for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_skiplist"] = [{"text":"impl&lt;K, V&gt; Sync for SkipMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SkipSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, K, V&gt; !Sync for Entry&lt;'a, 'g, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for RefEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, K, V&gt; !Sync for Iter&lt;'a, 'g, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for RefIter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, Q, R, K, V&gt; !Sync for Range&lt;'a, 'g, Q, R, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Sync for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Sync for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q:&nbsp;?Sized, R, K, V&gt; Sync for Range&lt;'a, Q, R, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q:&nbsp;?Sized, R, T&gt; Sync for Range&lt;'a, Q, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send + Sync, V:&nbsp;Send + Sync&gt; Sync for SkipList&lt;K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, Q:&nbsp;?Sized, R, K, V&gt; Sync for RefRange&lt;'a, Q, R, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Ord + Borrow&lt;Q&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RangeBounds&lt;Q&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Ord,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl !Sync for Backoff","synthetic":true,"types":[]},{"text":"impl !Sync for Parker","synthetic":true,"types":[]},{"text":"impl Sync for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Sync for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send + Sync&gt; Sync for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + Sync&gt; Sync for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + Sync&gt; Sync for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'env&gt; Sync for Scope&lt;'env&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope, T&gt; Sync for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":false,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Sync for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl Sync for MacError","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Sync for Output&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Mac&gt;::OutputSize: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["darling_core"] = [{"text":"impl&lt;T&gt; Sync for Fields&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, W&gt; Sync for Generics&lt;P, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; Sync for Data&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Style","synthetic":true,"types":[]},{"text":"impl&lt;T, L, C&gt; Sync for GenericParam&lt;T, L, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for Error","synthetic":true,"types":[]},{"text":"impl !Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Purpose","synthetic":true,"types":[]},{"text":"impl !Sync for IdentString","synthetic":true,"types":[]},{"text":"impl Sync for Ignored","synthetic":true,"types":[]},{"text":"impl !Sync for PathList","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for SpannedValue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; Sync for WithOriginal&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Flag","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Override&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dashmap"] = [{"text":"impl&lt;K, V, S&gt; Sync for ReadOnlyView&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, S&gt; Sync for DashSet&lt;K, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Sync for DashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, S&gt; Sync for RefMulti&lt;'a, K, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Sync for OwningIter&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Clone + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'i, K, V, S, M&gt; Sync for Iter&lt;'i, K, V, S, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: 'a + Eq + Hash + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: 'a + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: 'a + BuildHasher + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Map&lt;'a, K, V, S&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'i, K, V, S, M&gt; Sync for IterMut&lt;'i, K, V, S, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: 'a + Eq + Hash + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: 'a + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: 'a + BuildHasher + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Map&lt;'a, K, V, S&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, S&gt; Sync for OwningIter&lt;K, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Clone + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'i, K, S, M&gt; Sync for Iter&lt;'i, K, S, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: 'a + Eq + Hash + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: 'a + BuildHasher + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Map&lt;'a, K, (), S&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Sync for RwLockReadGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Sync for RwLockWriteGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send + Sync&gt; Sync for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send + Sync, V:&nbsp;Send + Sync, S:&nbsp;BuildHasher&gt; Sync for VacantEntry&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send + Sync, V:&nbsp;Send + Sync, S:&nbsp;BuildHasher&gt; Sync for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send + Sync, V:&nbsp;Send + Sync, S:&nbsp;BuildHasher&gt; Sync for RefMulti&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send + Sync, V:&nbsp;Send + Sync, S:&nbsp;BuildHasher&gt; Sync for RefMutMulti&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send + Sync, V:&nbsp;Send + Sync, S:&nbsp;BuildHasher&gt; Sync for Ref&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send + Sync, V:&nbsp;Send + Sync, S:&nbsp;BuildHasher&gt; Sync for RefMut&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send + Sync, S:&nbsp;BuildHasher&gt; Sync for Ref&lt;'a, K, S&gt;","synthetic":false,"types":[]}];
implementors["digest"] = [{"text":"impl Sync for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Sync for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["encoding_rs"] = [{"text":"impl Sync for Encoding","synthetic":true,"types":[]},{"text":"impl Sync for Decoder","synthetic":true,"types":[]},{"text":"impl Sync for Encoder","synthetic":true,"types":[]},{"text":"impl Sync for CoderResult","synthetic":true,"types":[]},{"text":"impl Sync for DecoderResult","synthetic":true,"types":[]},{"text":"impl Sync for EncoderResult","synthetic":true,"types":[]},{"text":"impl Sync for Latin1Bidi","synthetic":true,"types":[]}];
implementors["encryption"] = [{"text":"impl Sync for EncryptionConfig","synthetic":true,"types":[]},{"text":"impl Sync for FileConfig","synthetic":true,"types":[]},{"text":"impl Sync for KmsConfig","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Sync for AesGcmCrypter&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EncryptedFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DecrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for EncrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for EncrypterWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DataKeyManager","synthetic":true,"types":[]},{"text":"impl Sync for FileBackend","synthetic":true,"types":[]},{"text":"impl Sync for KmsBackend","synthetic":true,"types":[]},{"text":"impl Sync for MasterKeyConfig","synthetic":true,"types":[]},{"text":"impl Sync for Iv","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for AesGcmTag","synthetic":true,"types":[]},{"text":"impl Sync for Header","synthetic":true,"types":[]},{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for CrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LogFile","synthetic":true,"types":[]},{"text":"impl Sync for LogRecord","synthetic":true,"types":[]},{"text":"impl Sync for Dicts","synthetic":true,"types":[]},{"text":"impl Sync for PlaintextBackend","synthetic":true,"types":[]},{"text":"impl Sync for MemAesGcmBackend","synthetic":true,"types":[]},{"text":"impl !Sync for AwsKms","synthetic":true,"types":[]},{"text":"impl Sync for Inner","synthetic":true,"types":[]},{"text":"impl Sync for MetadataKey","synthetic":true,"types":[]},{"text":"impl Sync for MetadataMethod","synthetic":true,"types":[]},{"text":"impl Sync for ENCRYPTION_DATA_KEY_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for ENCRYPTION_FILE_NUM_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for ENCRYPTION_INITIALIZED_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for ENCRYPT_DECRPTION_FILE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for ENCRYPTION_FILE_SIZE_GAUGE","synthetic":true,"types":[]}];
implementors["engine_panic"] = [{"text":"impl Sync for PanicColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl Sync for PanicCompactedEvent","synthetic":true,"types":[]},{"text":"impl Sync for PanicDBOptions","synthetic":true,"types":[]},{"text":"impl Sync for PanicTitanDBOptions","synthetic":true,"types":[]},{"text":"impl Sync for PanicDBVector","synthetic":true,"types":[]},{"text":"impl Sync for PanicEngine","synthetic":true,"types":[]},{"text":"impl Sync for PanicEngineIterator","synthetic":true,"types":[]},{"text":"impl Sync for PanicIngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl Sync for PanicSnapshot","synthetic":true,"types":[]},{"text":"impl Sync for PanicSnapshotIterator","synthetic":true,"types":[]},{"text":"impl Sync for PanicSstReader","synthetic":true,"types":[]},{"text":"impl Sync for PanicSstReaderIterator","synthetic":true,"types":[]},{"text":"impl Sync for PanicSstWriter","synthetic":true,"types":[]},{"text":"impl Sync for PanicSstWriterBuilder","synthetic":true,"types":[]},{"text":"impl Sync for PanicExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl Sync for PanicExternalSstFileReader","synthetic":true,"types":[]},{"text":"impl Sync for PanicTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl Sync for PanicTablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl Sync for PanicTablePropertiesKey","synthetic":true,"types":[]},{"text":"impl Sync for PanicTableProperties","synthetic":true,"types":[]},{"text":"impl Sync for PanicUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Sync for PanicWriteBatch","synthetic":true,"types":[]}];
implementors["engine_rocks"] = [{"text":"impl !Sync for RocksColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl !Sync for RocksDBOptions","synthetic":true,"types":[]},{"text":"impl !Sync for RocksTitanDBOptions","synthetic":true,"types":[]},{"text":"impl !Sync for RocksDBVector","synthetic":true,"types":[]},{"text":"impl Sync for RocksEngine","synthetic":true,"types":[]},{"text":"impl !Sync for RocksIngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl Sync for RocksdbLogger","synthetic":true,"types":[]},{"text":"impl Sync for RaftDBLogger","synthetic":true,"types":[]},{"text":"impl !Sync for RocksSstReader","synthetic":true,"types":[]},{"text":"impl !Sync for RocksSstIterator","synthetic":true,"types":[]},{"text":"impl Sync for RocksSstWriterBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for RocksSstWriter","synthetic":true,"types":[]},{"text":"impl !Sync for RocksExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for RocksSstPartitionerFactory&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for RocksSstPartitioner&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for RocksTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl !Sync for RocksTablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl !Sync for RocksTablePropertiesKey","synthetic":true,"types":[]},{"text":"impl !Sync for RocksTableProperties","synthetic":true,"types":[]},{"text":"impl !Sync for RocksUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Sync for RocksUserCollectedPropertiesNoRc","synthetic":true,"types":[]},{"text":"impl !Sync for RocksWriteBatch","synthetic":true,"types":[]},{"text":"impl !Sync for RocksWriteBatchVec","synthetic":true,"types":[]},{"text":"impl !Sync for RocksEngineIterator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RocksSeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RocksCompactionJobInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RocksCompactedEvent","synthetic":true,"types":[]},{"text":"impl Sync for CompactionListener","synthetic":true,"types":[]},{"text":"impl Sync for RocksMvccProperties","synthetic":true,"types":[]},{"text":"impl !Sync for RocksReadOptions","synthetic":true,"types":[]},{"text":"impl !Sync for RocksWriteOptions","synthetic":true,"types":[]},{"text":"impl Sync for TsFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RocksCFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FixedSuffixSliceTransform","synthetic":true,"types":[]},{"text":"impl Sync for FixedPrefixSliceTransform","synthetic":true,"types":[]},{"text":"impl Sync for NoopSliceTransform","synthetic":true,"types":[]},{"text":"impl Sync for SizeProperties","synthetic":true,"types":[]},{"text":"impl Sync for UserProperties","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UserCollectedPropertiesDecoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RangeOffsets","synthetic":true,"types":[]},{"text":"impl Sync for RangeProperties","synthetic":true,"types":[]},{"text":"impl Sync for RangePropertiesCollector","synthetic":true,"types":[]},{"text":"impl Sync for RangePropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl Sync for MvccPropertiesCollector","synthetic":true,"types":[]},{"text":"impl Sync for MvccPropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl Sync for RangeOffsetKind","synthetic":true,"types":[]},{"text":"impl !Sync for EngineTickerMetricsInner","synthetic":true,"types":[]},{"text":"impl Sync for EngineTickerMetrics","synthetic":true,"types":[]},{"text":"impl !Sync for SimpleEngineTickerMetricsInner","synthetic":true,"types":[]},{"text":"impl Sync for SimpleEngineTickerMetrics","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_SIZE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOCK_CACHE_USAGE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_CACHE_USAGE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_MEMORY_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_ESTIMATE_NUM_KEYS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_PENDING_COMPACTION_BYTES_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_COMPRESSION_RATIO_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_NUM_FILES_AT_LEVEL_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_NUM_SNAPSHOTS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_OLDEST_SNAPSHOT_DURATION_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_WRITE_STALL_REASON_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_TITANDB_NUM_BLOB_FILES_AT_LEVEL_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_TITANDB_LIVE_BLOB_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_TITANDB_NUM_LIVE_BLOB_FILE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_TITANDB_NUM_OBSOLETE_BLOB_FILE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_TITANDB_LIVE_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_TITANDB_OBSOLETE_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_TITANDB_BLOB_FILE_DISCARDABLE_RATIO_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_CACHE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_CACHE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_MEMTABLE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_MEMTABLE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_GET_SERVED_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_GET_SERVED","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_WRITE_SERVED_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_WRITE_SERVED","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOOM_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOOM_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_FLOW","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_STALL_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_STALL_MICROS","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_COMPACTION_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_COMPACTION_FLOW","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_COMPACTION_DROP_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_COMPACTION_DROP","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_COMPACTION_DURATIONS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_COMPACTION_NUM_CORRUPT_KEYS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_COMPACTION_REASON_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_LOCATE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_LOCATE","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_FILE_STATUS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_FILE_STATUS","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_READ_AMP_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_READ_AMP_FLOW","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_NO_ITERATORS","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_WAL_FILE_SYNCED_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_WAL_FILE_SYNCED","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_EVENT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_NUM_IMMUTABLE_MEM_TABLE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_LOCATE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_LOCATE","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_FLOW","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_GC_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_GC_FLOW","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_GC_FILE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_GC_FILE","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_GC_ACTION_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_GC_ACTION","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_FILE_SYNCED_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_FILE_SYNCED","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_CACHE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_CACHE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_GET_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_WRITE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_COMPACTION_TIME_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_TABLE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_COMPACTION_OUTFILE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_MANIFEST_FILE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_WAL_FILE_SYNC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_STALL_L0_SLOWDOWN_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_STALL_MEMTABLE_COMPACTION_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_STALL_L0_NUM_FILES_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_HARD_RATE_LIMIT_DELAY_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_SOFT_RATE_LIMIT_DELAY_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_NUM_FILES_IN_SINGLE_COMPACTION_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_SEEK_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_WRITE_STALL_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_SST_READ_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_NUM_SUBCOMPACTION_SCHEDULED_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BYTES_PER_READ_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BYTES_PER_WRITE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BYTES_COMPRESSED_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BYTES_DECOMPRESSED_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_COMPRESSION_TIMES_NANOS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_DECOMPRESSION_TIMES_NANOS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_WRITE_WAL_TIME_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_KEY_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_VALUE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_GET_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_SEEK_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_NEXT_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_PREV_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_FILE_WRITE_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_FILE_READ_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_FILE_SYNC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_BLOB_GC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_GC_INPUT_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_GC_OUTPUT_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_ENGINE_ITER_TOUCH_BLOB_FILE_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Sync for TickerName","synthetic":true,"types":[]},{"text":"impl Sync for TickerEnum","synthetic":true,"types":[]},{"text":"impl Sync for EngineTickerMetricsDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for EngineTickerMetrics2Inner","synthetic":true,"types":[]},{"text":"impl Sync for EngineTickerMetrics2Delegator","synthetic":true,"types":[]},{"text":"impl Sync for SimpleEngineTickerMetricsDelegator","synthetic":true,"types":[]},{"text":"impl Sync for RocksEventListener","synthetic":true,"types":[]},{"text":"impl Sync for LogLevel","synthetic":true,"types":[]},{"text":"impl Sync for CompressionType","synthetic":true,"types":[]},{"text":"impl Sync for BlobRunMode","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WrappedEncryptionKeyManager&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RocksSnapshot","synthetic":false,"types":[]}];
implementors["engine_test"] = [{"text":"impl Sync for DBOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl Sync for CryptoOptions","synthetic":true,"types":[]}];
implementors["engine_traits"] = [{"text":"impl Sync for FileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Sync for IndexHandle","synthetic":true,"types":[]},{"text":"impl Sync for IndexHandles","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SstPartitionerRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SstPartitionerContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for MvccProperties","synthetic":true,"types":[]},{"text":"impl&lt;K, R&gt; Sync for Engines&lt;K, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReadOptions","synthetic":true,"types":[]},{"text":"impl Sync for WriteOptions","synthetic":true,"types":[]},{"text":"impl Sync for IterOptions","synthetic":true,"types":[]},{"text":"impl Sync for CacheStats","synthetic":true,"types":[]},{"text":"impl Sync for DeleteStrategy","synthetic":true,"types":[]},{"text":"impl Sync for SstCompressionType","synthetic":true,"types":[]},{"text":"impl Sync for EncryptionMethod","synthetic":true,"types":[]},{"text":"impl Sync for SstPartitionerResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for SeekMode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Range&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, R&gt; !Sync for MetricsFlusher&lt;K, R&gt;","synthetic":true,"types":[]}];
implementors["error_code"] = [{"text":"impl Sync for ErrorCode","synthetic":true,"types":[]},{"text":"impl Sync for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Sync for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Sync for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Sync for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Sync for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Sync for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Sync for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Sync for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Sync for ALL_ERROR_CODES","synthetic":true,"types":[]}];
implementors["external_storage"] = [{"text":"impl Sync for LocalStorage","synthetic":true,"types":[]},{"text":"impl Sync for NoopStorage","synthetic":true,"types":[]},{"text":"impl !Sync for S3Storage","synthetic":true,"types":[]},{"text":"impl Sync for GCSStorage","synthetic":true,"types":[]},{"text":"impl&lt;'client&gt; Sync for S3Uploader&lt;'client&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RequestError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for AsyncReadAsSyncStreamOfBytes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EXT_STORAGE_CREATE_HISTOGRAM","synthetic":true,"types":[]}];
implementors["fail"] = [{"text":"impl&lt;'a&gt; Sync for FailScenario&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl Sync for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SyncFailure&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Sync for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["farmhash"] = [{"text":"impl Sync for FarmHasher","synthetic":true,"types":[]}];
implementors["file_system"] = [{"text":"impl Sync for File","synthetic":true,"types":[]},{"text":"impl Sync for OpenOptions","synthetic":true,"types":[]},{"text":"impl Sync for IORateLimiter","synthetic":true,"types":[]},{"text":"impl Sync for WithIOType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Sha256Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IOOp","synthetic":true,"types":[]},{"text":"impl Sync for IOType","synthetic":true,"types":[]},{"text":"impl Sync for IO_RATE_LIMITER","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Sync for FnvHasher","synthetic":true,"types":[]}];
implementors["foreign_types_shared"] = [{"text":"impl !Sync for Opaque","synthetic":true,"types":[]}];
implementors["fs2"] = [{"text":"impl Sync for FsStats","synthetic":true,"types":[]}];
implementors["futures"] = [{"text":"impl&lt;T&gt; Sync for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AsyncSink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Sync for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Sync for Lazy&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Sync for FutureResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Sync for LoopFn&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Sync for AndThen&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Flatten&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;A as Future&gt;::Item as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Fuse&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Join&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; Sync for Join3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; Sync for Join4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; Sync for Join5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Future&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Future&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Future&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Future&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Future&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Sync for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Sync for MapErr&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, E&gt; Sync for FromErr&lt;A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Sync for OrElse&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for SelectNext&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Select2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Sync for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Sync for Inspect&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for JoinAll&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Future: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as IntoIterator&gt;::Item as IntoFuture&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SelectAll&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SelectOk&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Shared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Error: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SharedItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SharedError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for ExecuteError&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for Loop&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ExecuteErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Sync for IterOk&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for IterResult&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Sync for Repeat&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Sync for AndThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Sync for Chain&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Concat&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Concat2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Sync for Empty&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Sync for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Sync for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; Sync for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Sync for ForEach&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Sync for FromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for StreamFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Sync for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Sync for InspectErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Sync for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Sync for MapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Sync for Merge&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Error: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Sync for Once&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Sync for OrElse&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Peekable&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Sync for Select&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Sync for SkipWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, R&gt; Sync for TakeWhile&lt;S, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as IntoFuture&gt;::Future: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Sync for Then&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Sync for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Sync for Zip&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S1 as Stream&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S2 as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Forward&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Buffered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Future: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for BufferUnordered&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as Stream&gt;::Item as IntoFuture&gt;::Future: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for CatchUnwind&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Chunks&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Collect&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for SplitStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for SplitSink&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ReuniteError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FuturesOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Future&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; Sync for MergedItem&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; !Sync for IterMut&lt;'a, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Buffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for Wait&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, Fut&gt; Sync for With&lt;S, U, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoFuture&gt;::Future: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F, St&gt; Sync for WithFlatMap&lt;S, U, F, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Flush&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Send&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Sink&gt;::SinkItem: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for SendAll&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Sync for SinkMapErr&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E&gt; Sync for SinkFromErr&lt;S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Fanout&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Sink&gt;::SinkItem: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Sink&gt;::SinkItem: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Spawn&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UnparkEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BiLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for BiLockGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BiLockAcquire&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BiLockAcquired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Canceled","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Sync for SpawnHandle&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Execute&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; Sync for SpawnHandle&lt;Item, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Execute&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Error: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Item, Error&gt; !Sync for SpawnHandle&lt;Item, Error&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for Execute&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !Sync for SpawnHandle&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !Sync for Execute&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for FuturesUnordered&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for AtomicTask","synthetic":false,"types":[]},{"text":"impl Sync for NotifyHandle","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Cancellation&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl&lt;S&gt; Sync for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for LocalPool","synthetic":true,"types":[]},{"text":"impl !Sync for LocalSpawner","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPool","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPoolBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Enter","synthetic":true,"types":[]},{"text":"impl Sync for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl Sync for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_timer"] = [{"text":"impl Sync for Delay","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;F&gt; Sync for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Sync for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; Sync for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for Remote&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RemoteHandle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Sync for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Sync for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Sync for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Sync for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Sync for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Sync for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Sync for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; Sync for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Sync for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Sync for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Sync for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Sync for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Sync for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Sync for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Sync for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Sync for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AbortHandle","synthetic":true,"types":[]},{"text":"impl Sync for AbortRegistration","synthetic":true,"types":[]},{"text":"impl Sync for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Sync for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Sync for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; Sync for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Sync for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Sync for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; Sync for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; Sync for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Sync for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; Sync for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Sync for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; Sync for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for BufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for Buffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as Stream&gt;::Item as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for ForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Sync for ReuniteError&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; Sync for SplitSink&lt;S, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for SplitStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; Sync for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Sync for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Sync for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Sync for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Sync for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for TryBufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Sync for TryForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Sync for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Sync for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Sync for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FuturesOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Future&gt;::Output: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Sync for SelectAll&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Sync for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Sync for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Sync for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Sync for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Sync for Close&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; Sync for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Sync for Flush&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; Sync for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; Sync for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Sync for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; Sync for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; Sync for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; Sync for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; Sync for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ex&gt; Sync for Executor01As03&lt;Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Compat01As03&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, SinkItem&gt; !Sync for Compat01As03Sink&lt;S, SinkItem&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Compat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Sync for CompatSink&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Sync for Close&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Sync for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Sync for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Sync for Flush&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; Sync for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for Read&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReadVectored&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReadExact&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReadLine&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReadToEnd&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReadToString&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReadUntil&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Sync for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ReadHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WriteHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ReuniteError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Sync for Write&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Sync for WriteVectored&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Sync for WriteAll&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut:&nbsp;Sync&gt; Sync for FuturesUnordered&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Sync for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; Sync for MutexLockFuture&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Sync, '_&gt; Sync for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Sync, U:&nbsp;?Sized + Sync, '_&gt; Sync for MappedMutexGuard&lt;'_, T, U&gt;","synthetic":false,"types":[]}];
implementors["fuzz"] = [{"text":"impl Sync for WORKSPACE_ROOT","synthetic":true,"types":[]},{"text":"impl Sync for FUZZ_ROOT","synthetic":true,"types":[]},{"text":"impl Sync for FUZZ_TARGETS","synthetic":true,"types":[]},{"text":"impl Sync for SEED_ROOT","synthetic":true,"types":[]},{"text":"impl Sync for Cli","synthetic":true,"types":[]},{"text":"impl Sync for Fuzzer","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl Sync for FxHasher","synthetic":true,"types":[]},{"text":"impl Sync for FxHasher64","synthetic":true,"types":[]},{"text":"impl Sync for FxHasher32","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Sync for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Sync, N:&nbsp;ArrayLength&lt;T&gt;&gt; Sync for GenericArray&lt;T, N&gt;","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["grpcio"] = [{"text":"impl !Sync for CallOption","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ClientCStreamReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Resp&gt; Sync for ClientDuplexReceiver&lt;Resp&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Resp&gt; !Sync for ClientSStreamReceiver&lt;Resp&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for ClientUnaryReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Req&gt; Sync for StreamingCallSink&lt;Req&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ClientStreamingSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ClientStreamingSinkResult","synthetic":true,"types":[]},{"text":"impl Sync for Deadline","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DuplexSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DuplexSinkFailure","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RequestStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RpcContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for ServerStreamingSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for ServerStreamingSinkFailure","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for UnarySink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for UnarySinkResult","synthetic":true,"types":[]},{"text":"impl&lt;Req, Resp&gt; Sync for Method&lt;Req, Resp&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RpcStatus","synthetic":true,"types":[]},{"text":"impl Sync for RpcStatusCode","synthetic":true,"types":[]},{"text":"impl Sync for WriteFlags","synthetic":true,"types":[]},{"text":"impl !Sync for ChannelBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Client","synthetic":true,"types":[]},{"text":"impl !Sync for AuthContext","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for AuthProperty&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for AuthPropertyIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Marshaller&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for EnvBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Environment","synthetic":true,"types":[]},{"text":"impl !Sync for Metadata","synthetic":true,"types":[]},{"text":"impl !Sync for MetadataBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for MetadataIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for ResourceQuota","synthetic":true,"types":[]},{"text":"impl !Sync for ChannelCredentials","synthetic":true,"types":[]},{"text":"impl Sync for ChannelCredentialsBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for ServerCredentials","synthetic":true,"types":[]},{"text":"impl !Sync for ServerCredentialsBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Server","synthetic":true,"types":[]},{"text":"impl !Sync for ServerBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Service","synthetic":true,"types":[]},{"text":"impl !Sync for ServiceBuilder","synthetic":true,"types":[]},{"text":"impl Sync for ShutdownFuture","synthetic":true,"types":[]},{"text":"impl Sync for MethodType","synthetic":true,"types":[]},{"text":"impl Sync for LbPolicy","synthetic":true,"types":[]},{"text":"impl Sync for OptTarget","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for CertificateRequestType","synthetic":true,"types":[]},{"text":"impl Sync for GrpcSlice","synthetic":false,"types":[]},{"text":"impl Sync for Channel","synthetic":false,"types":[]}];
implementors["grpcio_sys"] = [{"text":"impl Sync for grpc_compression_options","synthetic":true,"types":[]},{"text":"impl Sync for grpc_compression_options_grpc_compression_options_default_level","synthetic":true,"types":[]},{"text":"impl Sync for grpc_compression_options_grpc_compression_options_default_algorithm","synthetic":true,"types":[]},{"text":"impl Sync for grpc_slice_refcount","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_slice","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_slice_grpc_slice_data_grpc_slice_refcounted","synthetic":true,"types":[]},{"text":"impl Sync for grpc_slice_grpc_slice_data_grpc_slice_inlined","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_slice_buffer","synthetic":true,"types":[]},{"text":"impl Sync for gpr_timespec","synthetic":true,"types":[]},{"text":"impl Sync for gpr_event","synthetic":true,"types":[]},{"text":"impl Sync for gpr_refcount","synthetic":true,"types":[]},{"text":"impl Sync for gpr_stats_counter","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_byte_buffer","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_byte_buffer_grpc_byte_buffer_data__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_byte_buffer_grpc_byte_buffer_data_grpc_compressed_buffer","synthetic":true,"types":[]},{"text":"impl Sync for grpc_completion_queue","synthetic":true,"types":[]},{"text":"impl Sync for grpc_alarm","synthetic":true,"types":[]},{"text":"impl Sync for grpc_channel","synthetic":true,"types":[]},{"text":"impl Sync for grpc_server","synthetic":true,"types":[]},{"text":"impl Sync for grpc_call","synthetic":true,"types":[]},{"text":"impl Sync for grpc_socket_mutator","synthetic":true,"types":[]},{"text":"impl Sync for grpc_socket_factory","synthetic":true,"types":[]},{"text":"impl Sync for grpc_arg_pointer_vtable","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_arg","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_arg_grpc_arg_value_grpc_arg_pointer","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_channel_args","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_metadata","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_metadata__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_event","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_metadata_array","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_call_details","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_op","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_op_grpc_op_data__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_op_grpc_op_data_grpc_op_send_initial_metadata","synthetic":true,"types":[]},{"text":"impl Sync for grpc_op_grpc_op_data_grpc_op_send_initial_metadata_grpc_op_send_initial_metadata_maybe_compression_level","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_op_grpc_op_data_grpc_op_send_message","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_op_grpc_op_data_grpc_op_send_status_from_server","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_op_grpc_op_data_grpc_op_recv_initial_metadata","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_op_grpc_op_data_grpc_op_recv_message","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_op_grpc_op_data_grpc_op_recv_status_on_client","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_op_grpc_op_data_grpc_op_recv_close_on_server","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_channel_info","synthetic":true,"types":[]},{"text":"impl Sync for grpc_resource_quota","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_experimental_completion_queue_functor","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_completion_queue_attributes","synthetic":true,"types":[]},{"text":"impl Sync for grpc_completion_queue_factory","synthetic":true,"types":[]},{"text":"impl Sync for census_context","synthetic":true,"types":[]},{"text":"impl Sync for grpc_auth_context","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_auth_property_iterator","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_auth_property","synthetic":true,"types":[]},{"text":"impl Sync for grpc_ssl_session_cache","synthetic":true,"types":[]},{"text":"impl Sync for grpc_call_credentials","synthetic":true,"types":[]},{"text":"impl Sync for grpc_channel_credentials","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_ssl_pem_key_cert_pair","synthetic":true,"types":[]},{"text":"impl !Sync for verify_peer_options","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_ssl_verify_peer_options","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_sts_credentials_options","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_auth_metadata_context","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_metadata_credentials_plugin","synthetic":true,"types":[]},{"text":"impl Sync for grpc_server_credentials","synthetic":true,"types":[]},{"text":"impl Sync for grpc_ssl_server_certificate_config","synthetic":true,"types":[]},{"text":"impl Sync for grpc_ssl_server_credentials_options","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_auth_metadata_processor","synthetic":true,"types":[]},{"text":"impl Sync for grpc_alts_credentials_options","synthetic":true,"types":[]},{"text":"impl Sync for grpc_tls_error_details","synthetic":true,"types":[]},{"text":"impl Sync for grpc_tls_key_materials_config","synthetic":true,"types":[]},{"text":"impl Sync for grpc_tls_credential_reload_config","synthetic":true,"types":[]},{"text":"impl Sync for grpc_tls_server_authorization_check_config","synthetic":true,"types":[]},{"text":"impl Sync for grpc_tls_credentials_options","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_tls_credential_reload_arg","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_tls_server_authorization_check_arg","synthetic":true,"types":[]},{"text":"impl !Sync for gpr_log_func_args","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_byte_buffer_reader","synthetic":true,"types":[]},{"text":"impl !Sync for grpcwrap_batch_context","synthetic":true,"types":[]},{"text":"impl !Sync for grpcwrap_batch_context__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl !Sync for grpcwrap_batch_context__bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl !Sync for grpcwrap_request_call_context","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_slice_grpc_slice_data","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_byte_buffer_grpc_byte_buffer_data","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_arg_grpc_arg_value","synthetic":true,"types":[]},{"text":"impl !Sync for grpc_op_grpc_op_data","synthetic":true,"types":[]},{"text":"impl Sync for grpc_byte_buffer_reader_grpc_byte_buffer_reader_current","synthetic":true,"types":[]},{"text":"impl Sync for grpc_compression_algorithm","synthetic":true,"types":[]},{"text":"impl Sync for grpc_compression_level","synthetic":true,"types":[]},{"text":"impl Sync for gpr_clock_type","synthetic":true,"types":[]},{"text":"impl Sync for grpc_slice_ref_whom","synthetic":true,"types":[]},{"text":"impl Sync for grpc_byte_buffer_type","synthetic":true,"types":[]},{"text":"impl Sync for grpc_arg_type","synthetic":true,"types":[]},{"text":"impl Sync for grpc_call_error","synthetic":true,"types":[]},{"text":"impl Sync for grpc_completion_type","synthetic":true,"types":[]},{"text":"impl Sync for grpc_op_type","synthetic":true,"types":[]},{"text":"impl Sync for grpc_cq_polling_type","synthetic":true,"types":[]},{"text":"impl Sync for grpc_cq_completion_type","synthetic":true,"types":[]},{"text":"impl Sync for grpc_connectivity_state","synthetic":true,"types":[]},{"text":"impl Sync for grpc_server_register_method_payload_handling","synthetic":true,"types":[]},{"text":"impl Sync for grpc_ssl_roots_override_result","synthetic":true,"types":[]},{"text":"impl Sync for grpc_ssl_certificate_config_reload_status","synthetic":true,"types":[]},{"text":"impl Sync for grpc_ssl_client_certificate_request_type","synthetic":true,"types":[]},{"text":"impl Sync for grpc_security_level","synthetic":true,"types":[]},{"text":"impl Sync for grpc_tls_server_verification_option","synthetic":true,"types":[]},{"text":"impl Sync for grpc_local_connect_type","synthetic":true,"types":[]},{"text":"impl Sync for grpc_tls_version","synthetic":true,"types":[]},{"text":"impl Sync for gpr_log_severity","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Reason","synthetic":true,"types":[]},{"text":"impl Sync for FlowControl","synthetic":true,"types":[]},{"text":"impl Sync for Ping","synthetic":true,"types":[]},{"text":"impl Sync for PingPong","synthetic":true,"types":[]},{"text":"impl Sync for Pong","synthetic":true,"types":[]},{"text":"impl Sync for RecvStream","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for SendStream&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StreamId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for ReadySendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Sync for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Sync for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl Sync for PushPromise","synthetic":true,"types":[]},{"text":"impl Sync for PushPromises","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Sync for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Sync for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for SendResponse&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for SendPushedResponse&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Sync for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Sync for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for OccupiedEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Values&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for ValuesMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for HeaderName","synthetic":true,"types":[]},{"text":"impl Sync for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl Sync for HeaderValue","synthetic":true,"types":[]},{"text":"impl Sync for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl Sync for ToStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Method","synthetic":true,"types":[]},{"text":"impl Sync for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Request&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Parts","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Response&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Parts","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for StatusCode","synthetic":true,"types":[]},{"text":"impl Sync for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl Sync for Authority","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Scheme","synthetic":true,"types":[]},{"text":"impl Sync for Uri","synthetic":true,"types":[]},{"text":"impl Sync for Parts","synthetic":true,"types":[]},{"text":"impl Sync for InvalidUri","synthetic":true,"types":[]},{"text":"impl Sync for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Sync for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Sync for IterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Sync for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Sync for ValueIterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Sync for ValueDrain&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for Data&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for Trailers&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl Sync for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Sync for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Sync for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl Sync for Body","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Sender","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; Sync for Client&lt;C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Sync for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Payload&gt;::Data: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for HttpInfo","synthetic":true,"types":[]},{"text":"impl Sync for Connected","synthetic":true,"types":[]},{"text":"impl Sync for Name","synthetic":true,"types":[]},{"text":"impl Sync for GaiResolver","synthetic":true,"types":[]},{"text":"impl Sync for GaiAddrs","synthetic":true,"types":[]},{"text":"impl Sync for GaiFuture","synthetic":true,"types":[]},{"text":"impl Sync for InvalidNameError","synthetic":true,"types":[]},{"text":"impl&lt;C, B, T&gt; Sync for Connect&lt;C, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; Sync for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Sync for Builder&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AddrIncoming","synthetic":true,"types":[]},{"text":"impl Sync for AddrStream","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Http&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F, E&gt; Sync for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, E&gt; Sync for Connection&lt;T, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as HttpService&lt;Body&gt;&gt;::ResBody as Payload&gt;::Data: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as HttpService&lt;Body&gt;&gt;::Future: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as HttpService&lt;Body&gt;&gt;::ResBody: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for Parts&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for Upgraded","synthetic":true,"types":[]},{"text":"impl Sync for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_openssl"] = [{"text":"impl&lt;T&gt; Sync for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T&gt; !Sync for HttpsConnecting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ident_case"] = [{"text":"impl Sync for RenameRule","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;T, S&gt; Sync for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Sync for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Sync for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["inferno"] = [{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Folder","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Folder","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Folder","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Folder","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Folder","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for FuncFrameAttrsMap","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Options&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Direction","synthetic":true,"types":[]},{"text":"impl Sync for PaletteMap","synthetic":true,"types":[]},{"text":"impl Sync for SearchColor","synthetic":true,"types":[]},{"text":"impl Sync for BackgroundColor","synthetic":true,"types":[]},{"text":"impl Sync for Palette","synthetic":true,"types":[]},{"text":"impl Sync for BasicPalette","synthetic":true,"types":[]},{"text":"impl Sync for MultiPalette","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl Sync for IoVec","synthetic":true,"types":[]}];
implementors["ipnet"] = [{"text":"impl Sync for Ipv4AddrRange","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6AddrRange","synthetic":true,"types":[]},{"text":"impl Sync for Ipv4Net","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6Net","synthetic":true,"types":[]},{"text":"impl Sync for PrefixLenError","synthetic":true,"types":[]},{"text":"impl Sync for Ipv4Subnets","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6Subnets","synthetic":true,"types":[]},{"text":"impl Sync for AddrParseError","synthetic":true,"types":[]},{"text":"impl Sync for IpAddrRange","synthetic":true,"types":[]},{"text":"impl Sync for IpNet","synthetic":true,"types":[]},{"text":"impl Sync for IpSubnets","synthetic":true,"types":[]}];
implementors["ipnetwork"] = [{"text":"impl Sync for Ipv4Network","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6Network","synthetic":true,"types":[]},{"text":"impl Sync for IpNetworkError","synthetic":true,"types":[]},{"text":"impl Sync for IpNetwork","synthetic":true,"types":[]},{"text":"impl Sync for NetworkSize","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; Sync for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; Sync for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Sync for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Sync for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Sync for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !Sync for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !Sync for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Sync for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Sync for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Sync for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Sync for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Sync for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Sync for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Sync for Buffer","synthetic":true,"types":[]}];
implementors["keys"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for WrongPrefix","synthetic":true,"types":[]}];
implementors["kvproto"] = [{"text":"impl Sync for CommandRequestHeader","synthetic":true,"types":[]},{"text":"impl Sync for CommandRequest","synthetic":true,"types":[]},{"text":"impl Sync for CommandRequestBatch","synthetic":true,"types":[]},{"text":"impl Sync for CommandResponseHeader","synthetic":true,"types":[]},{"text":"impl Sync for CommandResponse","synthetic":true,"types":[]},{"text":"impl Sync for CommandResponseBatch","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotState","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotData","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotRequest","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotDone","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl Sync for ConfigClient","synthetic":true,"types":[]},{"text":"impl Sync for Header","synthetic":true,"types":[]},{"text":"impl Sync for DuplicateRequest","synthetic":true,"types":[]},{"text":"impl Sync for Compatibility","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for TxnInfo","synthetic":true,"types":[]},{"text":"impl Sync for TxnStatus","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for EventRow","synthetic":true,"types":[]},{"text":"impl Sync for EventEntries","synthetic":true,"types":[]},{"text":"impl Sync for EventAdmin","synthetic":true,"types":[]},{"text":"impl Sync for EventLongTxn","synthetic":true,"types":[]},{"text":"impl Sync for ChangeDataEvent","synthetic":true,"types":[]},{"text":"impl Sync for ResolvedTs","synthetic":true,"types":[]},{"text":"impl Sync for ChangeDataRequest","synthetic":true,"types":[]},{"text":"impl Sync for ChangeDataRequestRegister","synthetic":true,"types":[]},{"text":"impl Sync for ChangeDataRequestNotifyTxnStatus","synthetic":true,"types":[]},{"text":"impl Sync for Event_oneof_event","synthetic":true,"types":[]},{"text":"impl Sync for EventRowOpType","synthetic":true,"types":[]},{"text":"impl Sync for EventLogType","synthetic":true,"types":[]},{"text":"impl Sync for ChangeDataRequest_oneof_request","synthetic":true,"types":[]},{"text":"impl Sync for EngineClient","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationStatus","synthetic":true,"types":[]},{"text":"impl Sync for DrAutoSync","synthetic":true,"types":[]},{"text":"impl Sync for RegionReplicationStatus","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationMode","synthetic":true,"types":[]},{"text":"impl Sync for DrAutoSyncState","synthetic":true,"types":[]},{"text":"impl Sync for RegionReplicationState","synthetic":true,"types":[]},{"text":"impl Sync for ChangeDataClient","synthetic":true,"types":[]},{"text":"impl Sync for SpanSet","synthetic":true,"types":[]},{"text":"impl Sync for Root","synthetic":true,"types":[]},{"text":"impl Sync for Parent","synthetic":true,"types":[]},{"text":"impl Sync for Continue","synthetic":true,"types":[]},{"text":"impl Sync for Link","synthetic":true,"types":[]},{"text":"impl Sync for Span","synthetic":true,"types":[]},{"text":"impl Sync for Link_oneof_link","synthetic":true,"types":[]},{"text":"impl Sync for TikvClient","synthetic":true,"types":[]},{"text":"impl Sync for DeadlockClient","synthetic":true,"types":[]},{"text":"impl Sync for PdClient","synthetic":true,"types":[]},{"text":"impl Sync for DiagnosticsClient","synthetic":true,"types":[]},{"text":"impl Sync for GetRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetResponse","synthetic":true,"types":[]},{"text":"impl Sync for PutRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutResponse","synthetic":true,"types":[]},{"text":"impl Sync for DeleteRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteResponse","synthetic":true,"types":[]},{"text":"impl Sync for DeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl Sync for SnapRequest","synthetic":true,"types":[]},{"text":"impl Sync for SnapResponse","synthetic":true,"types":[]},{"text":"impl Sync for PrewriteRequest","synthetic":true,"types":[]},{"text":"impl Sync for PrewriteResponse","synthetic":true,"types":[]},{"text":"impl Sync for IngestSstRequest","synthetic":true,"types":[]},{"text":"impl Sync for IngestSstResponse","synthetic":true,"types":[]},{"text":"impl Sync for ReadIndexRequest","synthetic":true,"types":[]},{"text":"impl Sync for ReadIndexResponse","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Response","synthetic":true,"types":[]},{"text":"impl Sync for ChangePeerRequest","synthetic":true,"types":[]},{"text":"impl Sync for ChangePeerResponse","synthetic":true,"types":[]},{"text":"impl Sync for ChangePeerV2Request","synthetic":true,"types":[]},{"text":"impl Sync for ChangePeerV2Response","synthetic":true,"types":[]},{"text":"impl Sync for SplitRequest","synthetic":true,"types":[]},{"text":"impl Sync for SplitResponse","synthetic":true,"types":[]},{"text":"impl Sync for BatchSplitRequest","synthetic":true,"types":[]},{"text":"impl Sync for BatchSplitResponse","synthetic":true,"types":[]},{"text":"impl Sync for CompactLogRequest","synthetic":true,"types":[]},{"text":"impl Sync for CompactLogResponse","synthetic":true,"types":[]},{"text":"impl Sync for TransferLeaderRequest","synthetic":true,"types":[]},{"text":"impl Sync for TransferLeaderResponse","synthetic":true,"types":[]},{"text":"impl Sync for ComputeHashRequest","synthetic":true,"types":[]},{"text":"impl Sync for VerifyHashRequest","synthetic":true,"types":[]},{"text":"impl Sync for VerifyHashResponse","synthetic":true,"types":[]},{"text":"impl Sync for PrepareMergeRequest","synthetic":true,"types":[]},{"text":"impl Sync for PrepareMergeResponse","synthetic":true,"types":[]},{"text":"impl Sync for CommitMergeRequest","synthetic":true,"types":[]},{"text":"impl Sync for CommitMergeResponse","synthetic":true,"types":[]},{"text":"impl Sync for RollbackMergeRequest","synthetic":true,"types":[]},{"text":"impl Sync for RollbackMergeResponse","synthetic":true,"types":[]},{"text":"impl Sync for AdminRequest","synthetic":true,"types":[]},{"text":"impl Sync for AdminResponse","synthetic":true,"types":[]},{"text":"impl Sync for RegionLeaderRequest","synthetic":true,"types":[]},{"text":"impl Sync for RegionLeaderResponse","synthetic":true,"types":[]},{"text":"impl Sync for RegionDetailRequest","synthetic":true,"types":[]},{"text":"impl Sync for RegionDetailResponse","synthetic":true,"types":[]},{"text":"impl Sync for StatusRequest","synthetic":true,"types":[]},{"text":"impl Sync for StatusResponse","synthetic":true,"types":[]},{"text":"impl Sync for RaftRequestHeader","synthetic":true,"types":[]},{"text":"impl Sync for RaftResponseHeader","synthetic":true,"types":[]},{"text":"impl Sync for RaftCmdRequest","synthetic":true,"types":[]},{"text":"impl Sync for RaftCmdResponse","synthetic":true,"types":[]},{"text":"impl Sync for CmdType","synthetic":true,"types":[]},{"text":"impl Sync for AdminCmdType","synthetic":true,"types":[]},{"text":"impl Sync for StatusCmdType","synthetic":true,"types":[]},{"text":"impl Sync for SwitchModeRequest","synthetic":true,"types":[]},{"text":"impl Sync for SwitchModeResponse","synthetic":true,"types":[]},{"text":"impl Sync for OpenEngineRequest","synthetic":true,"types":[]},{"text":"impl Sync for OpenEngineResponse","synthetic":true,"types":[]},{"text":"impl Sync for WriteHead","synthetic":true,"types":[]},{"text":"impl Sync for Mutation","synthetic":true,"types":[]},{"text":"impl Sync for WriteBatch","synthetic":true,"types":[]},{"text":"impl Sync for WriteEngineRequest","synthetic":true,"types":[]},{"text":"impl Sync for KvPair","synthetic":true,"types":[]},{"text":"impl Sync for WriteEngineV3Request","synthetic":true,"types":[]},{"text":"impl Sync for WriteEngineResponse","synthetic":true,"types":[]},{"text":"impl Sync for CloseEngineRequest","synthetic":true,"types":[]},{"text":"impl Sync for CloseEngineResponse","synthetic":true,"types":[]},{"text":"impl Sync for ImportEngineRequest","synthetic":true,"types":[]},{"text":"impl Sync for ImportEngineResponse","synthetic":true,"types":[]},{"text":"impl Sync for CleanupEngineRequest","synthetic":true,"types":[]},{"text":"impl Sync for CleanupEngineResponse","synthetic":true,"types":[]},{"text":"impl Sync for CompactClusterRequest","synthetic":true,"types":[]},{"text":"impl Sync for CompactClusterResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetVersionRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetVersionResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetMetricsRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetMetricsResponse","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorEngineNotFound","synthetic":true,"types":[]},{"text":"impl Sync for MutationOp","synthetic":true,"types":[]},{"text":"impl Sync for WriteEngineRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl Sync for SearchLogRequest","synthetic":true,"types":[]},{"text":"impl Sync for SearchLogResponse","synthetic":true,"types":[]},{"text":"impl Sync for LogMessage","synthetic":true,"types":[]},{"text":"impl Sync for ServerInfoRequest","synthetic":true,"types":[]},{"text":"impl Sync for ServerInfoPair","synthetic":true,"types":[]},{"text":"impl Sync for ServerInfoItem","synthetic":true,"types":[]},{"text":"impl Sync for ServerInfoResponse","synthetic":true,"types":[]},{"text":"impl Sync for SearchLogRequestTarget","synthetic":true,"types":[]},{"text":"impl Sync for LogLevel","synthetic":true,"types":[]},{"text":"impl Sync for ServerInfoType","synthetic":true,"types":[]},{"text":"impl Sync for NotLeader","synthetic":true,"types":[]},{"text":"impl Sync for StoreNotMatch","synthetic":true,"types":[]},{"text":"impl Sync for RegionNotFound","synthetic":true,"types":[]},{"text":"impl Sync for KeyNotInRegion","synthetic":true,"types":[]},{"text":"impl Sync for EpochNotMatch","synthetic":true,"types":[]},{"text":"impl Sync for ServerIsBusy","synthetic":true,"types":[]},{"text":"impl Sync for StaleCommand","synthetic":true,"types":[]},{"text":"impl Sync for RaftEntryTooLarge","synthetic":true,"types":[]},{"text":"impl Sync for MaxTimestampNotSynced","synthetic":true,"types":[]},{"text":"impl Sync for ReadIndexNotReady","synthetic":true,"types":[]},{"text":"impl Sync for ProposalInMergingMode","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for GetRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetResponse","synthetic":true,"types":[]},{"text":"impl Sync for ScanRequest","synthetic":true,"types":[]},{"text":"impl Sync for ScanResponse","synthetic":true,"types":[]},{"text":"impl Sync for PrewriteRequest","synthetic":true,"types":[]},{"text":"impl Sync for PrewriteResponse","synthetic":true,"types":[]},{"text":"impl Sync for PessimisticLockRequest","synthetic":true,"types":[]},{"text":"impl Sync for PessimisticLockResponse","synthetic":true,"types":[]},{"text":"impl Sync for PessimisticRollbackRequest","synthetic":true,"types":[]},{"text":"impl Sync for PessimisticRollbackResponse","synthetic":true,"types":[]},{"text":"impl Sync for TxnHeartBeatRequest","synthetic":true,"types":[]},{"text":"impl Sync for TxnHeartBeatResponse","synthetic":true,"types":[]},{"text":"impl Sync for CheckTxnStatusRequest","synthetic":true,"types":[]},{"text":"impl Sync for CheckTxnStatusResponse","synthetic":true,"types":[]},{"text":"impl Sync for CheckSecondaryLocksRequest","synthetic":true,"types":[]},{"text":"impl Sync for CheckSecondaryLocksResponse","synthetic":true,"types":[]},{"text":"impl Sync for CommitRequest","synthetic":true,"types":[]},{"text":"impl Sync for CommitResponse","synthetic":true,"types":[]},{"text":"impl Sync for ImportRequest","synthetic":true,"types":[]},{"text":"impl Sync for ImportResponse","synthetic":true,"types":[]},{"text":"impl Sync for CleanupRequest","synthetic":true,"types":[]},{"text":"impl Sync for CleanupResponse","synthetic":true,"types":[]},{"text":"impl Sync for BatchGetRequest","synthetic":true,"types":[]},{"text":"impl Sync for BatchGetResponse","synthetic":true,"types":[]},{"text":"impl Sync for BatchRollbackRequest","synthetic":true,"types":[]},{"text":"impl Sync for BatchRollbackResponse","synthetic":true,"types":[]},{"text":"impl Sync for ScanLockRequest","synthetic":true,"types":[]},{"text":"impl Sync for ScanLockResponse","synthetic":true,"types":[]},{"text":"impl Sync for ResolveLockRequest","synthetic":true,"types":[]},{"text":"impl Sync for ResolveLockResponse","synthetic":true,"types":[]},{"text":"impl Sync for GcRequest","synthetic":true,"types":[]},{"text":"impl Sync for GcResponse","synthetic":true,"types":[]},{"text":"impl Sync for DeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl Sync for RawGetRequest","synthetic":true,"types":[]},{"text":"impl Sync for RawGetResponse","synthetic":true,"types":[]},{"text":"impl Sync for RawBatchGetRequest","synthetic":true,"types":[]},{"text":"impl Sync for RawBatchGetResponse","synthetic":true,"types":[]},{"text":"impl Sync for RawPutRequest","synthetic":true,"types":[]},{"text":"impl Sync for RawPutResponse","synthetic":true,"types":[]},{"text":"impl Sync for RawBatchPutRequest","synthetic":true,"types":[]},{"text":"impl Sync for RawBatchPutResponse","synthetic":true,"types":[]},{"text":"impl Sync for RawDeleteRequest","synthetic":true,"types":[]},{"text":"impl Sync for RawDeleteResponse","synthetic":true,"types":[]},{"text":"impl Sync for RawBatchDeleteRequest","synthetic":true,"types":[]},{"text":"impl Sync for RawBatchDeleteResponse","synthetic":true,"types":[]},{"text":"impl Sync for RawScanRequest","synthetic":true,"types":[]},{"text":"impl Sync for RawScanResponse","synthetic":true,"types":[]},{"text":"impl Sync for RawDeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl Sync for RawDeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl Sync for RawBatchScanRequest","synthetic":true,"types":[]},{"text":"impl Sync for RawBatchScanResponse","synthetic":true,"types":[]},{"text":"impl Sync for UnsafeDestroyRangeRequest","synthetic":true,"types":[]},{"text":"impl Sync for UnsafeDestroyRangeResponse","synthetic":true,"types":[]},{"text":"impl Sync for RegisterLockObserverRequest","synthetic":true,"types":[]},{"text":"impl Sync for RegisterLockObserverResponse","synthetic":true,"types":[]},{"text":"impl Sync for CheckLockObserverRequest","synthetic":true,"types":[]},{"text":"impl Sync for CheckLockObserverResponse","synthetic":true,"types":[]},{"text":"impl Sync for RemoveLockObserverRequest","synthetic":true,"types":[]},{"text":"impl Sync for RemoveLockObserverResponse","synthetic":true,"types":[]},{"text":"impl Sync for PhysicalScanLockRequest","synthetic":true,"types":[]},{"text":"impl Sync for PhysicalScanLockResponse","synthetic":true,"types":[]},{"text":"impl Sync for SplitRegionRequest","synthetic":true,"types":[]},{"text":"impl Sync for SplitRegionResponse","synthetic":true,"types":[]},{"text":"impl Sync for ReadIndexRequest","synthetic":true,"types":[]},{"text":"impl Sync for ReadIndexResponse","synthetic":true,"types":[]},{"text":"impl Sync for VerMutation","synthetic":true,"types":[]},{"text":"impl Sync for VerValue","synthetic":true,"types":[]},{"text":"impl Sync for VerError","synthetic":true,"types":[]},{"text":"impl Sync for VerKvPair","synthetic":true,"types":[]},{"text":"impl Sync for VerGetRequest","synthetic":true,"types":[]},{"text":"impl Sync for VerGetResponse","synthetic":true,"types":[]},{"text":"impl Sync for VerBatchGetRequest","synthetic":true,"types":[]},{"text":"impl Sync for VerBatchGetResponse","synthetic":true,"types":[]},{"text":"impl Sync for VerMutRequest","synthetic":true,"types":[]},{"text":"impl Sync for VerMutResponse","synthetic":true,"types":[]},{"text":"impl Sync for VerBatchMutRequest","synthetic":true,"types":[]},{"text":"impl Sync for VerBatchMutResponse","synthetic":true,"types":[]},{"text":"impl Sync for VerScanRequest","synthetic":true,"types":[]},{"text":"impl Sync for VerScanResponse","synthetic":true,"types":[]},{"text":"impl Sync for VerDeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl Sync for VerDeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl Sync for MvccGetByKeyRequest","synthetic":true,"types":[]},{"text":"impl Sync for MvccGetByKeyResponse","synthetic":true,"types":[]},{"text":"impl Sync for MvccGetByStartTsRequest","synthetic":true,"types":[]},{"text":"impl Sync for MvccGetByStartTsResponse","synthetic":true,"types":[]},{"text":"impl Sync for Context","synthetic":true,"types":[]},{"text":"impl Sync for LockInfo","synthetic":true,"types":[]},{"text":"impl Sync for KeyError","synthetic":true,"types":[]},{"text":"impl Sync for WriteConflict","synthetic":true,"types":[]},{"text":"impl Sync for AlreadyExist","synthetic":true,"types":[]},{"text":"impl Sync for Deadlock","synthetic":true,"types":[]},{"text":"impl Sync for CommitTsExpired","synthetic":true,"types":[]},{"text":"impl Sync for TxnNotFound","synthetic":true,"types":[]},{"text":"impl Sync for CommitTsTooLarge","synthetic":true,"types":[]},{"text":"impl Sync for TimeDetail","synthetic":true,"types":[]},{"text":"impl Sync for ScanInfo","synthetic":true,"types":[]},{"text":"impl Sync for ScanDetail","synthetic":true,"types":[]},{"text":"impl Sync for ScanDetailV2","synthetic":true,"types":[]},{"text":"impl Sync for ExecDetails","synthetic":true,"types":[]},{"text":"impl Sync for ExecDetailsV2","synthetic":true,"types":[]},{"text":"impl Sync for KvPair","synthetic":true,"types":[]},{"text":"impl Sync for Mutation","synthetic":true,"types":[]},{"text":"impl Sync for MvccWrite","synthetic":true,"types":[]},{"text":"impl Sync for MvccValue","synthetic":true,"types":[]},{"text":"impl Sync for MvccLock","synthetic":true,"types":[]},{"text":"impl Sync for MvccInfo","synthetic":true,"types":[]},{"text":"impl Sync for TxnInfo","synthetic":true,"types":[]},{"text":"impl Sync for KeyRange","synthetic":true,"types":[]},{"text":"impl Sync for VerOp","synthetic":true,"types":[]},{"text":"impl Sync for CommandPri","synthetic":true,"types":[]},{"text":"impl Sync for IsolationLevel","synthetic":true,"types":[]},{"text":"impl Sync for Op","synthetic":true,"types":[]},{"text":"impl Sync for Assertion","synthetic":true,"types":[]},{"text":"impl Sync for Action","synthetic":true,"types":[]},{"text":"impl Sync for ExtraOp","synthetic":true,"types":[]},{"text":"impl Sync for SwitchModeRequest","synthetic":true,"types":[]},{"text":"impl Sync for SwitchModeResponse","synthetic":true,"types":[]},{"text":"impl Sync for Range","synthetic":true,"types":[]},{"text":"impl Sync for SstMeta","synthetic":true,"types":[]},{"text":"impl Sync for RewriteRule","synthetic":true,"types":[]},{"text":"impl Sync for UploadRequest","synthetic":true,"types":[]},{"text":"impl Sync for UploadResponse","synthetic":true,"types":[]},{"text":"impl Sync for IngestRequest","synthetic":true,"types":[]},{"text":"impl Sync for IngestResponse","synthetic":true,"types":[]},{"text":"impl Sync for CompactRequest","synthetic":true,"types":[]},{"text":"impl Sync for CompactResponse","synthetic":true,"types":[]},{"text":"impl Sync for DownloadRequest","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for DownloadResponse","synthetic":true,"types":[]},{"text":"impl Sync for SetDownloadSpeedLimitRequest","synthetic":true,"types":[]},{"text":"impl Sync for SetDownloadSpeedLimitResponse","synthetic":true,"types":[]},{"text":"impl Sync for Pair","synthetic":true,"types":[]},{"text":"impl Sync for WriteBatch","synthetic":true,"types":[]},{"text":"impl Sync for WriteRequest","synthetic":true,"types":[]},{"text":"impl Sync for WriteResponse","synthetic":true,"types":[]},{"text":"impl Sync for UploadRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl Sync for PairOp","synthetic":true,"types":[]},{"text":"impl Sync for WriteRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl Sync for SwitchMode","synthetic":true,"types":[]},{"text":"impl Sync for BatchCommandsRequest","synthetic":true,"types":[]},{"text":"impl Sync for BatchCommandsRequestRequest","synthetic":true,"types":[]},{"text":"impl Sync for BatchCommandsResponse","synthetic":true,"types":[]},{"text":"impl Sync for BatchCommandsResponseResponse","synthetic":true,"types":[]},{"text":"impl Sync for BatchRaftMessage","synthetic":true,"types":[]},{"text":"impl Sync for BatchCommandsEmptyRequest","synthetic":true,"types":[]},{"text":"impl Sync for BatchCommandsEmptyResponse","synthetic":true,"types":[]},{"text":"impl Sync for BatchCommandsRequest_Request_oneof_cmd","synthetic":true,"types":[]},{"text":"impl Sync for BatchCommandsResponse_Response_oneof_cmd","synthetic":true,"types":[]},{"text":"impl Sync for ImportKvClient","synthetic":true,"types":[]},{"text":"impl Sync for GetRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetResponse","synthetic":true,"types":[]},{"text":"impl Sync for RaftLogRequest","synthetic":true,"types":[]},{"text":"impl Sync for RaftLogResponse","synthetic":true,"types":[]},{"text":"impl Sync for RegionInfoRequest","synthetic":true,"types":[]},{"text":"impl Sync for RegionInfoResponse","synthetic":true,"types":[]},{"text":"impl Sync for RegionSizeRequest","synthetic":true,"types":[]},{"text":"impl Sync for RegionSizeResponse","synthetic":true,"types":[]},{"text":"impl Sync for RegionSizeResponseEntry","synthetic":true,"types":[]},{"text":"impl Sync for ScanMvccRequest","synthetic":true,"types":[]},{"text":"impl Sync for ScanMvccResponse","synthetic":true,"types":[]},{"text":"impl Sync for CompactRequest","synthetic":true,"types":[]},{"text":"impl Sync for CompactResponse","synthetic":true,"types":[]},{"text":"impl Sync for InjectFailPointRequest","synthetic":true,"types":[]},{"text":"impl Sync for InjectFailPointResponse","synthetic":true,"types":[]},{"text":"impl Sync for RecoverFailPointRequest","synthetic":true,"types":[]},{"text":"impl Sync for RecoverFailPointResponse","synthetic":true,"types":[]},{"text":"impl Sync for ListFailPointsRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListFailPointsResponse","synthetic":true,"types":[]},{"text":"impl Sync for ListFailPointsResponseEntry","synthetic":true,"types":[]},{"text":"impl Sync for GetMetricsRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetMetricsResponse","synthetic":true,"types":[]},{"text":"impl Sync for RegionConsistencyCheckRequest","synthetic":true,"types":[]},{"text":"impl Sync for RegionConsistencyCheckResponse","synthetic":true,"types":[]},{"text":"impl Sync for ModifyTikvConfigRequest","synthetic":true,"types":[]},{"text":"impl Sync for ModifyTikvConfigResponse","synthetic":true,"types":[]},{"text":"impl Sync for Property","synthetic":true,"types":[]},{"text":"impl Sync for GetRegionPropertiesRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetRegionPropertiesResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetStoreInfoRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetStoreInfoResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetClusterInfoRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetClusterInfoResponse","synthetic":true,"types":[]},{"text":"impl Sync for Db","synthetic":true,"types":[]},{"text":"impl Sync for Module","synthetic":true,"types":[]},{"text":"impl Sync for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl Sync for ImportSstClient","synthetic":true,"types":[]},{"text":"impl Sync for WaitForEntriesRequest","synthetic":true,"types":[]},{"text":"impl Sync for WaitForEntriesResponse","synthetic":true,"types":[]},{"text":"impl Sync for WaitForEntry","synthetic":true,"types":[]},{"text":"impl Sync for DeadlockRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeadlockResponse","synthetic":true,"types":[]},{"text":"impl Sync for DeadlockRequestType","synthetic":true,"types":[]},{"text":"impl Sync for BackupMeta","synthetic":true,"types":[]},{"text":"impl Sync for File","synthetic":true,"types":[]},{"text":"impl Sync for Schema","synthetic":true,"types":[]},{"text":"impl Sync for RawRange","synthetic":true,"types":[]},{"text":"impl Sync for ClusterIdError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for BackupRequest","synthetic":true,"types":[]},{"text":"impl Sync for StorageBackend","synthetic":true,"types":[]},{"text":"impl Sync for Noop","synthetic":true,"types":[]},{"text":"impl Sync for Local","synthetic":true,"types":[]},{"text":"impl Sync for S3","synthetic":true,"types":[]},{"text":"impl Sync for Gcs","synthetic":true,"types":[]},{"text":"impl Sync for BackupResponse","synthetic":true,"types":[]},{"text":"impl Sync for Error_oneof_detail","synthetic":true,"types":[]},{"text":"impl Sync for StorageBackend_oneof_backend","synthetic":true,"types":[]},{"text":"impl Sync for CompressionType","synthetic":true,"types":[]},{"text":"impl Sync for DebugClient","synthetic":true,"types":[]},{"text":"impl Sync for RequestHeader","synthetic":true,"types":[]},{"text":"impl Sync for ResponseHeader","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for TsoRequest","synthetic":true,"types":[]},{"text":"impl Sync for Timestamp","synthetic":true,"types":[]},{"text":"impl Sync for TsoResponse","synthetic":true,"types":[]},{"text":"impl Sync for BootstrapRequest","synthetic":true,"types":[]},{"text":"impl Sync for BootstrapResponse","synthetic":true,"types":[]},{"text":"impl Sync for IsBootstrappedRequest","synthetic":true,"types":[]},{"text":"impl Sync for IsBootstrappedResponse","synthetic":true,"types":[]},{"text":"impl Sync for AllocIdRequest","synthetic":true,"types":[]},{"text":"impl Sync for AllocIdResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetStoreRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetStoreResponse","synthetic":true,"types":[]},{"text":"impl Sync for PutStoreRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutStoreResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetAllStoresRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetAllStoresResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetRegionRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetRegionResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetRegionByIdRequest","synthetic":true,"types":[]},{"text":"impl Sync for ScanRegionsRequest","synthetic":true,"types":[]},{"text":"impl Sync for Region","synthetic":true,"types":[]},{"text":"impl Sync for ScanRegionsResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetClusterConfigRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetClusterConfigResponse","synthetic":true,"types":[]},{"text":"impl Sync for PutClusterConfigRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutClusterConfigResponse","synthetic":true,"types":[]},{"text":"impl Sync for Member","synthetic":true,"types":[]},{"text":"impl Sync for GetMembersRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetMembersResponse","synthetic":true,"types":[]},{"text":"impl Sync for PeerStats","synthetic":true,"types":[]},{"text":"impl Sync for RegionHeartbeatRequest","synthetic":true,"types":[]},{"text":"impl Sync for ChangePeer","synthetic":true,"types":[]},{"text":"impl Sync for ChangePeerV2","synthetic":true,"types":[]},{"text":"impl Sync for TransferLeader","synthetic":true,"types":[]},{"text":"impl Sync for Merge","synthetic":true,"types":[]},{"text":"impl Sync for SplitRegion","synthetic":true,"types":[]},{"text":"impl Sync for RegionHeartbeatResponse","synthetic":true,"types":[]},{"text":"impl Sync for AskSplitRequest","synthetic":true,"types":[]},{"text":"impl Sync for AskSplitResponse","synthetic":true,"types":[]},{"text":"impl Sync for ReportSplitRequest","synthetic":true,"types":[]},{"text":"impl Sync for ReportSplitResponse","synthetic":true,"types":[]},{"text":"impl Sync for AskBatchSplitRequest","synthetic":true,"types":[]},{"text":"impl Sync for SplitId","synthetic":true,"types":[]},{"text":"impl Sync for AskBatchSplitResponse","synthetic":true,"types":[]},{"text":"impl Sync for ReportBatchSplitRequest","synthetic":true,"types":[]},{"text":"impl Sync for ReportBatchSplitResponse","synthetic":true,"types":[]},{"text":"impl Sync for TimeInterval","synthetic":true,"types":[]},{"text":"impl Sync for RecordPair","synthetic":true,"types":[]},{"text":"impl Sync for StoreStats","synthetic":true,"types":[]},{"text":"impl Sync for StoreHeartbeatRequest","synthetic":true,"types":[]},{"text":"impl Sync for StoreHeartbeatResponse","synthetic":true,"types":[]},{"text":"impl Sync for ScatterRegionRequest","synthetic":true,"types":[]},{"text":"impl Sync for ScatterRegionResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl Sync for UpdateGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl Sync for UpdateGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl Sync for UpdateServiceGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl Sync for UpdateServiceGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl Sync for RegionStat","synthetic":true,"types":[]},{"text":"impl Sync for SyncRegionRequest","synthetic":true,"types":[]},{"text":"impl Sync for SyncRegionResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetOperatorRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetOperatorResponse","synthetic":true,"types":[]},{"text":"impl Sync for SyncMaxTsRequest","synthetic":true,"types":[]},{"text":"impl Sync for SyncMaxTsResponse","synthetic":true,"types":[]},{"text":"impl Sync for SplitRegionsRequest","synthetic":true,"types":[]},{"text":"impl Sync for SplitRegionsResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetDcLocationsRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetDcLocationsResponse","synthetic":true,"types":[]},{"text":"impl Sync for ErrorType","synthetic":true,"types":[]},{"text":"impl Sync for CheckPolicy","synthetic":true,"types":[]},{"text":"impl Sync for OperatorStatus","synthetic":true,"types":[]},{"text":"impl Sync for KeyRange","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Response","synthetic":true,"types":[]},{"text":"impl Sync for RegionInfo","synthetic":true,"types":[]},{"text":"impl Sync for BatchRequest","synthetic":true,"types":[]},{"text":"impl Sync for BatchResponse","synthetic":true,"types":[]},{"text":"impl Sync for Status","synthetic":true,"types":[]},{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for Local","synthetic":true,"types":[]},{"text":"impl Sync for Global","synthetic":true,"types":[]},{"text":"impl Sync for ConfigKind","synthetic":true,"types":[]},{"text":"impl Sync for ConfigEntry","synthetic":true,"types":[]},{"text":"impl Sync for LocalConfig","synthetic":true,"types":[]},{"text":"impl Sync for Header","synthetic":true,"types":[]},{"text":"impl Sync for CreateRequest","synthetic":true,"types":[]},{"text":"impl Sync for CreateResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetAllRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetAllResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetResponse","synthetic":true,"types":[]},{"text":"impl Sync for UpdateRequest","synthetic":true,"types":[]},{"text":"impl Sync for UpdateResponse","synthetic":true,"types":[]},{"text":"impl Sync for DeleteRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteResponse","synthetic":true,"types":[]},{"text":"impl Sync for ConfigKind_oneof_kind","synthetic":true,"types":[]},{"text":"impl Sync for StatusCode","synthetic":true,"types":[]},{"text":"impl Sync for Cluster","synthetic":true,"types":[]},{"text":"impl Sync for StoreLabel","synthetic":true,"types":[]},{"text":"impl Sync for Store","synthetic":true,"types":[]},{"text":"impl Sync for RegionEpoch","synthetic":true,"types":[]},{"text":"impl Sync for Region","synthetic":true,"types":[]},{"text":"impl Sync for Peer","synthetic":true,"types":[]},{"text":"impl Sync for StoreState","synthetic":true,"types":[]},{"text":"impl Sync for PeerRole","synthetic":true,"types":[]},{"text":"impl Sync for RaftMessage","synthetic":true,"types":[]},{"text":"impl Sync for RaftTruncatedState","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotCfFile","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotMeta","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotChunk","synthetic":true,"types":[]},{"text":"impl Sync for Done","synthetic":true,"types":[]},{"text":"impl Sync for KeyValue","synthetic":true,"types":[]},{"text":"impl Sync for RaftSnapshotData","synthetic":true,"types":[]},{"text":"impl Sync for StoreIdent","synthetic":true,"types":[]},{"text":"impl Sync for RaftLocalState","synthetic":true,"types":[]},{"text":"impl Sync for RaftApplyState","synthetic":true,"types":[]},{"text":"impl Sync for MergeState","synthetic":true,"types":[]},{"text":"impl Sync for RegionLocalState","synthetic":true,"types":[]},{"text":"impl Sync for ExtraMessage","synthetic":true,"types":[]},{"text":"impl Sync for PeerState","synthetic":true,"types":[]},{"text":"impl Sync for ExtraMessageType","synthetic":true,"types":[]},{"text":"impl Sync for BackupClient","synthetic":true,"types":[]},{"text":"impl Sync for TaskMeta","synthetic":true,"types":[]},{"text":"impl Sync for DispatchTaskRequest","synthetic":true,"types":[]},{"text":"impl Sync for DispatchTaskResponse","synthetic":true,"types":[]},{"text":"impl Sync for CancelTaskRequest","synthetic":true,"types":[]},{"text":"impl Sync for CancelTaskResponse","synthetic":true,"types":[]},{"text":"impl Sync for EstablishMppConnectionRequest","synthetic":true,"types":[]},{"text":"impl Sync for MppDataPacket","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for EncryptionMeta","synthetic":true,"types":[]},{"text":"impl Sync for FileInfo","synthetic":true,"types":[]},{"text":"impl Sync for FileDictionary","synthetic":true,"types":[]},{"text":"impl Sync for DataKey","synthetic":true,"types":[]},{"text":"impl Sync for KeyDictionary","synthetic":true,"types":[]},{"text":"impl Sync for MasterKey","synthetic":true,"types":[]},{"text":"impl Sync for MasterKeyPlaintext","synthetic":true,"types":[]},{"text":"impl Sync for MasterKeyFile","synthetic":true,"types":[]},{"text":"impl Sync for MasterKeyKms","synthetic":true,"types":[]},{"text":"impl Sync for EncryptedContent","synthetic":true,"types":[]},{"text":"impl Sync for MasterKey_oneof_backend","synthetic":true,"types":[]},{"text":"impl Sync for EncryptionMethod","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl !Sync for group","synthetic":true,"types":[]},{"text":"impl Sync for utimbuf","synthetic":true,"types":[]},{"text":"impl Sync for timeval","synthetic":true,"types":[]},{"text":"impl Sync for timespec","synthetic":true,"types":[]},{"text":"impl Sync for rlimit","synthetic":true,"types":[]},{"text":"impl Sync for rusage","synthetic":true,"types":[]},{"text":"impl Sync for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Sync for hostent","synthetic":true,"types":[]},{"text":"impl !Sync for iovec","synthetic":true,"types":[]},{"text":"impl Sync for pollfd","synthetic":true,"types":[]},{"text":"impl Sync for winsize","synthetic":true,"types":[]},{"text":"impl Sync for linger","synthetic":true,"types":[]},{"text":"impl !Sync for sigval","synthetic":true,"types":[]},{"text":"impl Sync for itimerval","synthetic":true,"types":[]},{"text":"impl Sync for tms","synthetic":true,"types":[]},{"text":"impl !Sync for servent","synthetic":true,"types":[]},{"text":"impl !Sync for protoent","synthetic":true,"types":[]},{"text":"impl Sync for in_addr","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Sync for addrinfo","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Sync for fd_set","synthetic":true,"types":[]},{"text":"impl !Sync for tm","synthetic":true,"types":[]},{"text":"impl Sync for sched_param","synthetic":true,"types":[]},{"text":"impl !Sync for Dl_info","synthetic":true,"types":[]},{"text":"impl !Sync for lconv","synthetic":true,"types":[]},{"text":"impl Sync for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Sync for ifaddrs","synthetic":true,"types":[]},{"text":"impl Sync for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Sync for arpreq","synthetic":true,"types":[]},{"text":"impl Sync for arpreq_old","synthetic":true,"types":[]},{"text":"impl Sync for arphdr","synthetic":true,"types":[]},{"text":"impl !Sync for mmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for epoll_event","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Sync for utsname","synthetic":true,"types":[]},{"text":"impl !Sync for sigevent","synthetic":true,"types":[]},{"text":"impl Sync for rlimit64","synthetic":true,"types":[]},{"text":"impl !Sync for glob_t","synthetic":true,"types":[]},{"text":"impl !Sync for passwd","synthetic":true,"types":[]},{"text":"impl !Sync for spwd","synthetic":true,"types":[]},{"text":"impl Sync for dqblk","synthetic":true,"types":[]},{"text":"impl Sync for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Sync for itimerspec","synthetic":true,"types":[]},{"text":"impl Sync for fsid_t","synthetic":true,"types":[]},{"text":"impl Sync for packet_mreq","synthetic":true,"types":[]},{"text":"impl Sync for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Sync for if_nameindex","synthetic":true,"types":[]},{"text":"impl Sync for msginfo","synthetic":true,"types":[]},{"text":"impl Sync for sembuf","synthetic":true,"types":[]},{"text":"impl Sync for input_event","synthetic":true,"types":[]},{"text":"impl Sync for input_id","synthetic":true,"types":[]},{"text":"impl Sync for input_absinfo","synthetic":true,"types":[]},{"text":"impl Sync for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Sync for input_mask","synthetic":true,"types":[]},{"text":"impl Sync for ff_replay","synthetic":true,"types":[]},{"text":"impl Sync for ff_trigger","synthetic":true,"types":[]},{"text":"impl Sync for ff_envelope","synthetic":true,"types":[]},{"text":"impl Sync for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Sync for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_effect","synthetic":true,"types":[]},{"text":"impl !Sync for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Sync for ucred","synthetic":true,"types":[]},{"text":"impl !Sync for mntent","synthetic":true,"types":[]},{"text":"impl !Sync for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Sync for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Sync for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for arpd_request","synthetic":true,"types":[]},{"text":"impl Sync for inotify_event","synthetic":true,"types":[]},{"text":"impl Sync for fanotify_response","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Sync for regmatch_t","synthetic":true,"types":[]},{"text":"impl Sync for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Sync for dirent","synthetic":true,"types":[]},{"text":"impl Sync for dirent64","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Sync for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Sync for mq_attr","synthetic":true,"types":[]},{"text":"impl Sync for statx","synthetic":true,"types":[]},{"text":"impl Sync for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Sync for aiocb","synthetic":true,"types":[]},{"text":"impl Sync for __exit_status","synthetic":true,"types":[]},{"text":"impl Sync for __timeval","synthetic":true,"types":[]},{"text":"impl !Sync for glob64_t","synthetic":true,"types":[]},{"text":"impl !Sync for msghdr","synthetic":true,"types":[]},{"text":"impl Sync for cmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for termios","synthetic":true,"types":[]},{"text":"impl Sync for mallinfo","synthetic":true,"types":[]},{"text":"impl Sync for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Sync for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Sync for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Sync for nlattr","synthetic":true,"types":[]},{"text":"impl !Sync for rtentry","synthetic":true,"types":[]},{"text":"impl Sync for timex","synthetic":true,"types":[]},{"text":"impl Sync for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Sync for regex_t","synthetic":true,"types":[]},{"text":"impl Sync for utmpx","synthetic":true,"types":[]},{"text":"impl Sync for sigset_t","synthetic":true,"types":[]},{"text":"impl Sync for sysinfo","synthetic":true,"types":[]},{"text":"impl Sync for msqid_ds","synthetic":true,"types":[]},{"text":"impl Sync for sigaction","synthetic":true,"types":[]},{"text":"impl Sync for statfs","synthetic":true,"types":[]},{"text":"impl Sync for flock","synthetic":true,"types":[]},{"text":"impl Sync for flock64","synthetic":true,"types":[]},{"text":"impl Sync for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Sync for stack_t","synthetic":true,"types":[]},{"text":"impl Sync for stat","synthetic":true,"types":[]},{"text":"impl Sync for stat64","synthetic":true,"types":[]},{"text":"impl Sync for statfs64","synthetic":true,"types":[]},{"text":"impl Sync for statvfs64","synthetic":true,"types":[]},{"text":"impl Sync for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Sync for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Sync for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Sync for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Sync for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Sync for user","synthetic":true,"types":[]},{"text":"impl !Sync for mcontext_t","synthetic":true,"types":[]},{"text":"impl Sync for ipc_perm","synthetic":true,"types":[]},{"text":"impl Sync for shmid_ds","synthetic":true,"types":[]},{"text":"impl Sync for termios2","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Sync for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Sync for ucontext_t","synthetic":true,"types":[]},{"text":"impl Sync for statvfs","synthetic":true,"types":[]},{"text":"impl Sync for max_align_t","synthetic":true,"types":[]},{"text":"impl Sync for sem_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Sync for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Sync for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Sync for in6_addr","synthetic":true,"types":[]},{"text":"impl Sync for DIR","synthetic":true,"types":[]},{"text":"impl Sync for FILE","synthetic":true,"types":[]},{"text":"impl Sync for fpos_t","synthetic":true,"types":[]},{"text":"impl Sync for timezone","synthetic":true,"types":[]},{"text":"impl Sync for fpos64_t","synthetic":true,"types":[]}];
implementors["libflate"] = [{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; Sync for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Sync for Finish&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AutoFinish&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AutoFinishUnchecked&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for HeaderBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Header","synthetic":true,"types":[]},{"text":"impl Sync for ExtraField","synthetic":true,"types":[]},{"text":"impl Sync for ExtraSubField","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; Sync for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for MultiDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Sync for Os","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Header","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; Sync for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Sync for Lz77WindowSize","synthetic":true,"types":[]}];
implementors["libflate_lz77"] = [{"text":"impl Sync for DefaultLz77Encoder","synthetic":true,"types":[]},{"text":"impl Sync for DefaultLz77EncoderBuilder","synthetic":true,"types":[]},{"text":"impl Sync for NoCompressionLz77Encoder","synthetic":true,"types":[]},{"text":"impl Sync for Code","synthetic":true,"types":[]},{"text":"impl Sync for CompressionLevel","synthetic":true,"types":[]}];
implementors["librocksdb_sys"] = [{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for CloudEnvOptions","synthetic":true,"types":[]},{"text":"impl Sync for ColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for DBInstance","synthetic":true,"types":[]},{"text":"impl Sync for DBWriteOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBReadOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBMergeOperator","synthetic":true,"types":[]},{"text":"impl Sync for DBBlockBasedTableOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBMemoryAllocator","synthetic":true,"types":[]},{"text":"impl Sync for DBLRUCacheOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBCache","synthetic":true,"types":[]},{"text":"impl Sync for DBFilterPolicy","synthetic":true,"types":[]},{"text":"impl Sync for DBSnapshot","synthetic":true,"types":[]},{"text":"impl Sync for DBIterator","synthetic":true,"types":[]},{"text":"impl Sync for DBCFHandle","synthetic":true,"types":[]},{"text":"impl Sync for DBWriteBatch","synthetic":true,"types":[]},{"text":"impl Sync for DBComparator","synthetic":true,"types":[]},{"text":"impl Sync for DBFlushOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBCompactionFilter","synthetic":true,"types":[]},{"text":"impl Sync for DBCompactionFilterFactory","synthetic":true,"types":[]},{"text":"impl Sync for DBCompactionFilterContext","synthetic":true,"types":[]},{"text":"impl Sync for EnvOptions","synthetic":true,"types":[]},{"text":"impl Sync for SstFileReader","synthetic":true,"types":[]},{"text":"impl Sync for SstFileWriter","synthetic":true,"types":[]},{"text":"impl Sync for ExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl Sync for IngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBBackupEngine","synthetic":true,"types":[]},{"text":"impl Sync for DBRestoreOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBSliceTransform","synthetic":true,"types":[]},{"text":"impl Sync for DBRateLimiter","synthetic":true,"types":[]},{"text":"impl Sync for DBLogger","synthetic":true,"types":[]},{"text":"impl Sync for DBCompactOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBFifoCompactionOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBPinnableSlice","synthetic":true,"types":[]},{"text":"impl Sync for DBUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Sync for DBUserCollectedPropertiesIterator","synthetic":true,"types":[]},{"text":"impl Sync for DBTableProperties","synthetic":true,"types":[]},{"text":"impl Sync for DBTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl Sync for DBTablePropertiesCollectionIterator","synthetic":true,"types":[]},{"text":"impl Sync for DBTablePropertiesCollector","synthetic":true,"types":[]},{"text":"impl Sync for DBTablePropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl Sync for DBFlushJobInfo","synthetic":true,"types":[]},{"text":"impl Sync for DBCompactionJobInfo","synthetic":true,"types":[]},{"text":"impl Sync for DBIngestionInfo","synthetic":true,"types":[]},{"text":"impl Sync for DBEventListener","synthetic":true,"types":[]},{"text":"impl Sync for DBKeyVersions","synthetic":true,"types":[]},{"text":"impl Sync for DBEnv","synthetic":true,"types":[]},{"text":"impl Sync for DBSequentialFile","synthetic":true,"types":[]},{"text":"impl Sync for DBColumnFamilyMetaData","synthetic":true,"types":[]},{"text":"impl Sync for DBLevelMetaData","synthetic":true,"types":[]},{"text":"impl Sync for DBSstFileMetaData","synthetic":true,"types":[]},{"text":"impl Sync for DBCompactionOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBPerfContext","synthetic":true,"types":[]},{"text":"impl Sync for DBIOStatsContext","synthetic":true,"types":[]},{"text":"impl Sync for DBWriteStallInfo","synthetic":true,"types":[]},{"text":"impl Sync for DBStatusPtr","synthetic":true,"types":[]},{"text":"impl Sync for DBMapProperty","synthetic":true,"types":[]},{"text":"impl Sync for DBFileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Sync for DBEncryptionKeyManagerInstance","synthetic":true,"types":[]},{"text":"impl Sync for DBSstPartitioner","synthetic":true,"types":[]},{"text":"impl Sync for DBSstPartitionerRequest","synthetic":true,"types":[]},{"text":"impl Sync for DBSstPartitionerContext","synthetic":true,"types":[]},{"text":"impl Sync for DBSstPartitionerFactory","synthetic":true,"types":[]},{"text":"impl Sync for DBWriteBatchIterator","synthetic":true,"types":[]},{"text":"impl Sync for DBTitanDBOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBTitanReadOptions","synthetic":true,"types":[]},{"text":"impl Sync for DBTitanBlobIndex","synthetic":true,"types":[]},{"text":"impl Sync for WriteStallCondition","synthetic":true,"types":[]},{"text":"impl Sync for DBStatisticsTickerType","synthetic":true,"types":[]},{"text":"impl Sync for DBStatisticsHistogramType","synthetic":true,"types":[]},{"text":"impl Sync for DBEntryType","synthetic":true,"types":[]},{"text":"impl Sync for DBCompressionType","synthetic":true,"types":[]},{"text":"impl Sync for DBCompactionStyle","synthetic":true,"types":[]},{"text":"impl Sync for DBUniversalCompactionStyle","synthetic":true,"types":[]},{"text":"impl Sync for DBRecoveryMode","synthetic":true,"types":[]},{"text":"impl Sync for CompactionPriority","synthetic":true,"types":[]},{"text":"impl Sync for CompactionReason","synthetic":true,"types":[]},{"text":"impl Sync for DBInfoLogLevel","synthetic":true,"types":[]},{"text":"impl Sync for DBTableProperty","synthetic":true,"types":[]},{"text":"impl Sync for DBBottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl Sync for DBRateLimiterMode","synthetic":true,"types":[]},{"text":"impl Sync for DBTitanDBBlobRunMode","synthetic":true,"types":[]},{"text":"impl Sync for IndexType","synthetic":true,"types":[]},{"text":"impl Sync for DBBackgroundErrorReason","synthetic":true,"types":[]},{"text":"impl Sync for DBEncryptionMethod","synthetic":true,"types":[]},{"text":"impl Sync for DBValueType","synthetic":true,"types":[]},{"text":"impl Sync for DBSstPartitionerResult","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl !Sync for gz_header","synthetic":true,"types":[]},{"text":"impl !Sync for z_stream","synthetic":true,"types":[]},{"text":"impl Sync for gzFile_s","synthetic":true,"types":[]},{"text":"impl Sync for internal_state","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Sync for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Sync for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Sync, V:&nbsp;Sync, S:&nbsp;Sync&gt; Sync for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["linked_hash_set"] = [{"text":"impl&lt;T, S&gt; Sync for LinkedHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Sync for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl Sync for GuardSend","synthetic":true,"types":[]},{"text":"impl !Sync for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, T:&nbsp;?Sized + Send&gt; Sync for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, G:&nbsp;GetThreadId + Sync&gt; Sync for RawReentrantMutex&lt;R, G&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, G:&nbsp;GetThreadId + Sync, T:&nbsp;?Sized + Send&gt; Sync for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Sync, T:&nbsp;?Sized + Send + Sync&gt; Sync for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !Sync for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Sync for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Sync for Level","synthetic":true,"types":[]},{"text":"impl Sync for LevelFilter","synthetic":true,"types":[]}];
implementors["log_wrappers"] = [{"text":"impl&lt;T&gt; Sync for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Value&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SyncLoggerBuffer","synthetic":true,"types":[]}];
implementors["lz4_sys"] = [{"text":"impl !Sync for LZ4FCompressionContext","synthetic":true,"types":[]},{"text":"impl !Sync for LZ4FDecompressionContext","synthetic":true,"types":[]},{"text":"impl Sync for LZ4FFrameInfo","synthetic":true,"types":[]},{"text":"impl Sync for LZ4FPreferences","synthetic":true,"types":[]},{"text":"impl Sync for LZ4FCompressOptions","synthetic":true,"types":[]},{"text":"impl Sync for LZ4FDecompressOptions","synthetic":true,"types":[]},{"text":"impl Sync for LZ4StreamEncode","synthetic":true,"types":[]},{"text":"impl Sync for LZ4StreamDecode","synthetic":true,"types":[]},{"text":"impl Sync for BlockSize","synthetic":true,"types":[]},{"text":"impl Sync for BlockMode","synthetic":true,"types":[]},{"text":"impl Sync for ContentChecksum","synthetic":true,"types":[]}];
implementors["match_template"] = [{"text":"impl !Sync for MatchTemplate","synthetic":true,"types":[]},{"text":"impl !Sync for Substitution","synthetic":true,"types":[]}];
implementors["md5"] = [{"text":"impl Sync for Digest","synthetic":true,"types":[]},{"text":"impl Sync for Context","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Sync for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl Sync for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime_guess"] = [{"text":"impl Sync for MimeGuess","synthetic":true,"types":[]},{"text":"impl Sync for Iter","synthetic":true,"types":[]},{"text":"impl Sync for IterRaw","synthetic":true,"types":[]}];
implementors["minitrace"] = [{"text":"impl Sync for Collector","synthetic":true,"types":[]},{"text":"impl Sync for CrossthreadTrace","synthetic":true,"types":[]},{"text":"impl Sync for Span","synthetic":true,"types":[]},{"text":"impl Sync for SpanSet","synthetic":true,"types":[]},{"text":"impl Sync for Link","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TraceSpawned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TraceWrapped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MayTraceRootFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TraceRootFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for SpanGuard","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Sync for Poll","synthetic":true,"types":[]},{"text":"impl Sync for PollOpt","synthetic":true,"types":[]},{"text":"impl Sync for Ready","synthetic":true,"types":[]},{"text":"impl Sync for Token","synthetic":true,"types":[]},{"text":"impl Sync for Events","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UnixReady","synthetic":true,"types":[]},{"text":"impl Sync for TcpListener","synthetic":true,"types":[]},{"text":"impl Sync for TcpStream","synthetic":true,"types":[]},{"text":"impl Sync for UdpSocket","synthetic":true,"types":[]},{"text":"impl Sync for Registration","synthetic":false,"types":[]},{"text":"impl Sync for SetReadiness","synthetic":false,"types":[]}];
implementors["mio_uds"] = [{"text":"impl Sync for UnixStream","synthetic":true,"types":[]},{"text":"impl Sync for UnixListener","synthetic":true,"types":[]},{"text":"impl Sync for UnixDatagram","synthetic":true,"types":[]}];
implementors["native_tls"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Identity","synthetic":true,"types":[]},{"text":"impl Sync for Certificate","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for MidHandshakeTlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TlsConnectorBuilder","synthetic":true,"types":[]},{"text":"impl Sync for TlsConnector","synthetic":true,"types":[]},{"text":"impl Sync for TlsAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl Sync for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Protocol","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl !Sync for TcpBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for UdpBuilder","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl !Sync for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; !Sync for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Entry","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Errno","synthetic":true,"types":[]},{"text":"impl Sync for AtFlags","synthetic":true,"types":[]},{"text":"impl Sync for OFlag","synthetic":true,"types":[]},{"text":"impl Sync for SealFlag","synthetic":true,"types":[]},{"text":"impl Sync for FdFlag","synthetic":true,"types":[]},{"text":"impl Sync for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl Sync for FallocateFlags","synthetic":true,"types":[]},{"text":"impl Sync for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FlockArg","synthetic":true,"types":[]},{"text":"impl Sync for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl !Sync for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl Sync for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl Sync for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl Sync for MsFlags","synthetic":true,"types":[]},{"text":"impl Sync for MntFlags","synthetic":true,"types":[]},{"text":"impl Sync for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl Sync for FdFlag","synthetic":true,"types":[]},{"text":"impl Sync for MqAttr","synthetic":true,"types":[]},{"text":"impl Sync for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl Sync for PollFd","synthetic":true,"types":[]},{"text":"impl Sync for PollFlags","synthetic":true,"types":[]},{"text":"impl Sync for OpenptyResult","synthetic":true,"types":[]},{"text":"impl Sync for ForkptyResult","synthetic":true,"types":[]},{"text":"impl Sync for PtyMaster","synthetic":true,"types":[]},{"text":"impl Sync for CloneFlags","synthetic":true,"types":[]},{"text":"impl Sync for CpuSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl Sync for LioOpcode","synthetic":true,"types":[]},{"text":"impl Sync for LioMode","synthetic":true,"types":[]},{"text":"impl Sync for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for EpollFlags","synthetic":true,"types":[]},{"text":"impl Sync for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl Sync for EpollEvent","synthetic":true,"types":[]},{"text":"impl Sync for EpollOp","synthetic":true,"types":[]},{"text":"impl Sync for EfdFlags","synthetic":true,"types":[]},{"text":"impl Sync for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl Sync for ProtFlags","synthetic":true,"types":[]},{"text":"impl Sync for MapFlags","synthetic":true,"types":[]},{"text":"impl Sync for MsFlags","synthetic":true,"types":[]},{"text":"impl Sync for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl Sync for MmapAdvise","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl Sync for Dqblk","synthetic":true,"types":[]},{"text":"impl Sync for QuotaType","synthetic":true,"types":[]},{"text":"impl Sync for QuotaFmt","synthetic":true,"types":[]},{"text":"impl Sync for RebootMode","synthetic":true,"types":[]},{"text":"impl Sync for FdSet","synthetic":true,"types":[]},{"text":"impl !Sync for SigEvent","synthetic":true,"types":[]},{"text":"impl Sync for SignalIterator","synthetic":true,"types":[]},{"text":"impl Sync for SaFlags","synthetic":true,"types":[]},{"text":"impl Sync for SigSet","synthetic":true,"types":[]},{"text":"impl Sync for SigAction","synthetic":true,"types":[]},{"text":"impl Sync for Signal","synthetic":true,"types":[]},{"text":"impl Sync for SigmaskHow","synthetic":true,"types":[]},{"text":"impl Sync for SigHandler","synthetic":true,"types":[]},{"text":"impl Sync for SigevNotify","synthetic":true,"types":[]},{"text":"impl Sync for SfdFlags","synthetic":true,"types":[]},{"text":"impl Sync for SignalFd","synthetic":true,"types":[]},{"text":"impl Sync for UnixAddr","synthetic":true,"types":[]},{"text":"impl Sync for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Sync for LinkAddr","synthetic":true,"types":[]},{"text":"impl Sync for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl Sync for AlgAddr","synthetic":true,"types":[]},{"text":"impl Sync for VsockAddr","synthetic":true,"types":[]},{"text":"impl Sync for SockFlag","synthetic":true,"types":[]},{"text":"impl Sync for MsgFlags","synthetic":true,"types":[]},{"text":"impl Sync for UnixCredentials","synthetic":true,"types":[]},{"text":"impl Sync for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AddressFamily","synthetic":true,"types":[]},{"text":"impl Sync for SockAddr","synthetic":true,"types":[]},{"text":"impl Sync for InetAddr","synthetic":true,"types":[]},{"text":"impl Sync for IpAddr","synthetic":true,"types":[]},{"text":"impl Sync for SockType","synthetic":true,"types":[]},{"text":"impl Sync for SockProtocol","synthetic":true,"types":[]},{"text":"impl Sync for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SockLevel","synthetic":true,"types":[]},{"text":"impl Sync for Shutdown","synthetic":true,"types":[]},{"text":"impl Sync for ReuseAddr","synthetic":true,"types":[]},{"text":"impl Sync for ReusePort","synthetic":true,"types":[]},{"text":"impl Sync for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl Sync for Linger","synthetic":true,"types":[]},{"text":"impl Sync for IpAddMembership","synthetic":true,"types":[]},{"text":"impl Sync for IpDropMembership","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl Sync for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl Sync for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl Sync for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl Sync for SendTimeout","synthetic":true,"types":[]},{"text":"impl Sync for Broadcast","synthetic":true,"types":[]},{"text":"impl Sync for OobInline","synthetic":true,"types":[]},{"text":"impl Sync for SocketError","synthetic":true,"types":[]},{"text":"impl Sync for KeepAlive","synthetic":true,"types":[]},{"text":"impl Sync for PeerCredentials","synthetic":true,"types":[]},{"text":"impl Sync for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl Sync for RcvBuf","synthetic":true,"types":[]},{"text":"impl Sync for SndBuf","synthetic":true,"types":[]},{"text":"impl Sync for RcvBufForce","synthetic":true,"types":[]},{"text":"impl Sync for SndBufForce","synthetic":true,"types":[]},{"text":"impl Sync for SockType","synthetic":true,"types":[]},{"text":"impl Sync for AcceptConn","synthetic":true,"types":[]},{"text":"impl Sync for OriginalDst","synthetic":true,"types":[]},{"text":"impl Sync for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl Sync for IpTransparent","synthetic":true,"types":[]},{"text":"impl Sync for Mark","synthetic":true,"types":[]},{"text":"impl Sync for PassCred","synthetic":true,"types":[]},{"text":"impl Sync for TcpCongestion","synthetic":true,"types":[]},{"text":"impl Sync for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl Sync for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SFlag","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl Sync for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl Sync for Statfs","synthetic":true,"types":[]},{"text":"impl Sync for FsType","synthetic":true,"types":[]},{"text":"impl Sync for FsFlags","synthetic":true,"types":[]},{"text":"impl Sync for Statvfs","synthetic":true,"types":[]},{"text":"impl Sync for SysInfo","synthetic":true,"types":[]},{"text":"impl !Sync for Termios","synthetic":true,"types":[]},{"text":"impl Sync for InputFlags","synthetic":true,"types":[]},{"text":"impl Sync for OutputFlags","synthetic":true,"types":[]},{"text":"impl Sync for ControlFlags","synthetic":true,"types":[]},{"text":"impl Sync for LocalFlags","synthetic":true,"types":[]},{"text":"impl Sync for BaudRate","synthetic":true,"types":[]},{"text":"impl Sync for SetArg","synthetic":true,"types":[]},{"text":"impl Sync for FlushArg","synthetic":true,"types":[]},{"text":"impl Sync for FlowArg","synthetic":true,"types":[]},{"text":"impl Sync for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl Sync for TimeSpec","synthetic":true,"types":[]},{"text":"impl Sync for TimeVal","synthetic":true,"types":[]},{"text":"impl Sync for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for IoVec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UtsName","synthetic":true,"types":[]},{"text":"impl Sync for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl Sync for WaitStatus","synthetic":true,"types":[]},{"text":"impl Sync for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl Sync for InitFlags","synthetic":true,"types":[]},{"text":"impl Sync for Inotify","synthetic":true,"types":[]},{"text":"impl Sync for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for InotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for UContext","synthetic":true,"types":[]},{"text":"impl Sync for Uid","synthetic":true,"types":[]},{"text":"impl Sync for Gid","synthetic":true,"types":[]},{"text":"impl Sync for Pid","synthetic":true,"types":[]},{"text":"impl Sync for AccessFlags","synthetic":true,"types":[]},{"text":"impl Sync for User","synthetic":true,"types":[]},{"text":"impl Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for ForkResult","synthetic":true,"types":[]},{"text":"impl Sync for FchownatFlags","synthetic":true,"types":[]},{"text":"impl Sync for Whence","synthetic":true,"types":[]},{"text":"impl Sync for LinkatFlags","synthetic":true,"types":[]},{"text":"impl Sync for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl Sync for PathconfVar","synthetic":true,"types":[]},{"text":"impl Sync for SysconfVar","synthetic":true,"types":[]}];
implementors["nodrop"] = [{"text":"impl&lt;T&gt; Sync for NoDrop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl&lt;I&gt; Sync for ProducerRepeat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'x&gt; Sync for MemProducer&lt;'x&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FileProducer","synthetic":true,"types":[]},{"text":"impl&lt;'a, C, R, S, T, E, M, F&gt; Sync for MapConsumer&lt;'a, C, R, S, T, E, M, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, C1, C2, R, S, T, E, M&gt; Sync for ChainConsumer&lt;'a, 'b, C1, C2, R, S, T, E, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;C2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ErrorKind&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CompareResult","synthetic":true,"types":[]},{"text":"impl Sync for Needed","synthetic":true,"types":[]},{"text":"impl&lt;I, O, E&gt; Sync for IResult&lt;I, O, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Sync for IError&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Endianness","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Input&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, E, M&gt; Sync for ConsumerState&lt;O, E, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Move","synthetic":true,"types":[]},{"text":"impl Sync for FileProducerState","synthetic":true,"types":[]},{"text":"impl&lt;P, E&gt; Sync for Err&lt;P, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Sync for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_format"] = [{"text":"impl Sync for Buffer","synthetic":true,"types":[]},{"text":"impl Sync for CustomFormat","synthetic":true,"types":[]},{"text":"impl Sync for CustomFormatBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Grouping","synthetic":true,"types":[]},{"text":"impl Sync for Locale","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DecimalStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for InfinityStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MinusSignStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for NanStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PlusSignStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SeparatorStr&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Sync for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Sync for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Sync for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Sync for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Sync for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; !Sync for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Sync for Lazy&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F:&nbsp;Send&gt; Sync for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Sync for KeyError","synthetic":true,"types":[]},{"text":"impl Sync for AesKey","synthetic":true,"types":[]},{"text":"impl Sync for TimeDiff","synthetic":true,"types":[]},{"text":"impl Sync for MsbOption","synthetic":true,"types":[]},{"text":"impl Sync for CMSOptions","synthetic":true,"types":[]},{"text":"impl !Sync for ConfMethod","synthetic":true,"types":[]},{"text":"impl Sync for PointConversionForm","synthetic":true,"types":[]},{"text":"impl Sync for Asn1Flag","synthetic":true,"types":[]},{"text":"impl !Sync for Seal","synthetic":true,"types":[]},{"text":"impl !Sync for Open","synthetic":true,"types":[]},{"text":"impl Sync for ErrorStack","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DigestBytes","synthetic":true,"types":[]},{"text":"impl Sync for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl Sync for Nid","synthetic":true,"types":[]},{"text":"impl Sync for OcspFlag","synthetic":true,"types":[]},{"text":"impl Sync for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl Sync for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl Sync for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl Sync for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl Sync for KeyIvPair","synthetic":true,"types":[]},{"text":"impl Sync for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl Sync for Id","synthetic":true,"types":[]},{"text":"impl Sync for Params","synthetic":true,"types":[]},{"text":"impl Sync for Public","synthetic":true,"types":[]},{"text":"impl Sync for Private","synthetic":true,"types":[]},{"text":"impl Sync for Padding","synthetic":true,"types":[]},{"text":"impl Sync for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Sha1","synthetic":true,"types":[]},{"text":"impl Sync for Sha224","synthetic":true,"types":[]},{"text":"impl Sync for Sha256","synthetic":true,"types":[]},{"text":"impl Sync for Sha384","synthetic":true,"types":[]},{"text":"impl Sync for Sha512","synthetic":true,"types":[]},{"text":"impl Sync for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl Sync for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl Sync for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for SslAcceptor","synthetic":true,"types":[]},{"text":"impl Sync for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl Sync for SslConnector","synthetic":true,"types":[]},{"text":"impl Sync for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorCode","synthetic":true,"types":[]},{"text":"impl Sync for SslOptions","synthetic":true,"types":[]},{"text":"impl Sync for SslMode","synthetic":true,"types":[]},{"text":"impl Sync for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl Sync for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl Sync for ExtensionContext","synthetic":true,"types":[]},{"text":"impl Sync for SslFiletype","synthetic":true,"types":[]},{"text":"impl Sync for StatusType","synthetic":true,"types":[]},{"text":"impl Sync for NameType","synthetic":true,"types":[]},{"text":"impl Sync for SniError","synthetic":true,"types":[]},{"text":"impl Sync for SslAlert","synthetic":true,"types":[]},{"text":"impl Sync for AlpnError","synthetic":true,"types":[]},{"text":"impl Sync for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl Sync for SslVersion","synthetic":true,"types":[]},{"text":"impl Sync for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl Sync for CipherBits","synthetic":true,"types":[]},{"text":"impl !Sync for SslCipher","synthetic":true,"types":[]},{"text":"impl !Sync for SslCipherRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for MidHandshakeSslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ShutdownResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for X509Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl Sync for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl Sync for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl Sync for BasicConstraints","synthetic":true,"types":[]},{"text":"impl Sync for KeyUsage","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl Sync for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Sync for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Sync for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl Sync for Asn1GeneralizedTime","synthetic":false,"types":[]},{"text":"impl Sync for Asn1GeneralizedTimeRef","synthetic":false,"types":[]},{"text":"impl Sync for Asn1Time","synthetic":false,"types":[]},{"text":"impl Sync for Asn1TimeRef","synthetic":false,"types":[]},{"text":"impl Sync for Asn1String","synthetic":false,"types":[]},{"text":"impl Sync for Asn1StringRef","synthetic":false,"types":[]},{"text":"impl Sync for Asn1Integer","synthetic":false,"types":[]},{"text":"impl Sync for Asn1IntegerRef","synthetic":false,"types":[]},{"text":"impl Sync for Asn1BitString","synthetic":false,"types":[]},{"text":"impl Sync for Asn1BitStringRef","synthetic":false,"types":[]},{"text":"impl Sync for Asn1Object","synthetic":false,"types":[]},{"text":"impl Sync for Asn1ObjectRef","synthetic":false,"types":[]},{"text":"impl Sync for BigNumContext","synthetic":false,"types":[]},{"text":"impl Sync for BigNumContextRef","synthetic":false,"types":[]},{"text":"impl Sync for BigNum","synthetic":false,"types":[]},{"text":"impl Sync for BigNumRef","synthetic":false,"types":[]},{"text":"impl Sync for CmsContentInfo","synthetic":false,"types":[]},{"text":"impl Sync for CmsContentInfoRef","synthetic":false,"types":[]},{"text":"impl Sync for Conf","synthetic":false,"types":[]},{"text":"impl Sync for ConfRef","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sync for Deriver&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for Dh&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for DhRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for Dsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for DsaRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for EcGroup","synthetic":false,"types":[]},{"text":"impl Sync for EcGroupRef","synthetic":false,"types":[]},{"text":"impl Sync for EcPoint","synthetic":false,"types":[]},{"text":"impl Sync for EcPointRef","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for EcKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for EcKeyRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for EcdsaSig","synthetic":false,"types":[]},{"text":"impl Sync for EcdsaSigRef","synthetic":false,"types":[]},{"text":"impl Sync for Error","synthetic":false,"types":[]},{"text":"impl Sync for MessageDigest","synthetic":false,"types":[]},{"text":"impl Sync for Hasher","synthetic":false,"types":[]},{"text":"impl Sync for OcspBasicResponse","synthetic":false,"types":[]},{"text":"impl Sync for OcspBasicResponseRef","synthetic":false,"types":[]},{"text":"impl Sync for OcspCertId","synthetic":false,"types":[]},{"text":"impl Sync for OcspCertIdRef","synthetic":false,"types":[]},{"text":"impl Sync for OcspResponse","synthetic":false,"types":[]},{"text":"impl Sync for OcspResponseRef","synthetic":false,"types":[]},{"text":"impl Sync for OcspRequest","synthetic":false,"types":[]},{"text":"impl Sync for OcspRequestRef","synthetic":false,"types":[]},{"text":"impl Sync for OcspOneReq","synthetic":false,"types":[]},{"text":"impl Sync for OcspOneReqRef","synthetic":false,"types":[]},{"text":"impl Sync for Pkcs12","synthetic":false,"types":[]},{"text":"impl Sync for Pkcs12Ref","synthetic":false,"types":[]},{"text":"impl Sync for Pkcs7","synthetic":false,"types":[]},{"text":"impl Sync for Pkcs7Ref","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for PKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for PKeyRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for Rsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for RsaRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sync for Signer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sync for Verifier&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Sync for SrtpProtectionProfile","synthetic":false,"types":[]},{"text":"impl Sync for SrtpProtectionProfileRef","synthetic":false,"types":[]},{"text":"impl Sync for SslMethod","synthetic":false,"types":[]},{"text":"impl Sync for SslContext","synthetic":false,"types":[]},{"text":"impl Sync for SslContextRef","synthetic":false,"types":[]},{"text":"impl Sync for SslSession","synthetic":false,"types":[]},{"text":"impl Sync for SslSessionRef","synthetic":false,"types":[]},{"text":"impl Sync for Ssl","synthetic":false,"types":[]},{"text":"impl Sync for SslRef","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Stackable + Sync&gt; Sync for Stack&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Stackable + Sync&gt; Sync for StackRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for OpensslString","synthetic":false,"types":[]},{"text":"impl Sync for OpensslStringRef","synthetic":false,"types":[]},{"text":"impl Sync for Cipher","synthetic":false,"types":[]},{"text":"impl Sync for Crypter","synthetic":false,"types":[]},{"text":"impl Sync for X509VerifyParam","synthetic":false,"types":[]},{"text":"impl Sync for X509VerifyParamRef","synthetic":false,"types":[]},{"text":"impl Sync for X509StoreBuilder","synthetic":false,"types":[]},{"text":"impl Sync for X509StoreBuilderRef","synthetic":false,"types":[]},{"text":"impl Sync for X509Store","synthetic":false,"types":[]},{"text":"impl Sync for X509StoreRef","synthetic":false,"types":[]},{"text":"impl Sync for X509StoreContext","synthetic":false,"types":[]},{"text":"impl Sync for X509StoreContextRef","synthetic":false,"types":[]},{"text":"impl Sync for X509","synthetic":false,"types":[]},{"text":"impl Sync for X509Ref","synthetic":false,"types":[]},{"text":"impl Sync for X509Extension","synthetic":false,"types":[]},{"text":"impl Sync for X509ExtensionRef","synthetic":false,"types":[]},{"text":"impl Sync for X509Name","synthetic":false,"types":[]},{"text":"impl Sync for X509NameRef","synthetic":false,"types":[]},{"text":"impl Sync for X509NameEntry","synthetic":false,"types":[]},{"text":"impl Sync for X509NameEntryRef","synthetic":false,"types":[]},{"text":"impl Sync for X509Req","synthetic":false,"types":[]},{"text":"impl Sync for X509ReqRef","synthetic":false,"types":[]},{"text":"impl Sync for GeneralName","synthetic":false,"types":[]},{"text":"impl Sync for GeneralNameRef","synthetic":false,"types":[]},{"text":"impl Sync for X509Algorithm","synthetic":false,"types":[]},{"text":"impl Sync for X509AlgorithmRef","synthetic":false,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl Sync for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl Sync for AES_KEY","synthetic":true,"types":[]},{"text":"impl !Sync for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl !Sync for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl !Sync for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl Sync for SHA_CTX","synthetic":true,"types":[]},{"text":"impl Sync for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl Sync for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl !Sync for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl !Sync for X509_VAL","synthetic":true,"types":[]},{"text":"impl !Sync for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl Sync for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Sync for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl Sync for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl Sync for stack_st_void","synthetic":true,"types":[]},{"text":"impl Sync for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl Sync for EC_METHOD","synthetic":true,"types":[]},{"text":"impl Sync for EC_GROUP","synthetic":true,"types":[]},{"text":"impl Sync for EC_POINT","synthetic":true,"types":[]},{"text":"impl Sync for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl Sync for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl Sync for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl Sync for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl Sync for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl Sync for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl Sync for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl Sync for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl Sync for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl Sync for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl Sync for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Sync for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl Sync for bio_st","synthetic":true,"types":[]},{"text":"impl Sync for BIO","synthetic":true,"types":[]},{"text":"impl Sync for BIGNUM","synthetic":true,"types":[]},{"text":"impl Sync for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl Sync for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl Sync for BN_CTX","synthetic":true,"types":[]},{"text":"impl Sync for BN_GENCB","synthetic":true,"types":[]},{"text":"impl Sync for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl Sync for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl Sync for EVP_MD","synthetic":true,"types":[]},{"text":"impl Sync for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl Sync for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl Sync for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl Sync for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl Sync for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl Sync for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl Sync for DH","synthetic":true,"types":[]},{"text":"impl Sync for DH_METHOD","synthetic":true,"types":[]},{"text":"impl Sync for DSA","synthetic":true,"types":[]},{"text":"impl Sync for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl Sync for RSA","synthetic":true,"types":[]},{"text":"impl Sync for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl Sync for EC_KEY","synthetic":true,"types":[]},{"text":"impl Sync for X509","synthetic":true,"types":[]},{"text":"impl Sync for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl Sync for X509_CRL","synthetic":true,"types":[]},{"text":"impl Sync for X509_NAME","synthetic":true,"types":[]},{"text":"impl Sync for X509_STORE","synthetic":true,"types":[]},{"text":"impl Sync for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl Sync for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl Sync for CONF","synthetic":true,"types":[]},{"text":"impl Sync for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl Sync for ENGINE","synthetic":true,"types":[]},{"text":"impl Sync for SSL","synthetic":true,"types":[]},{"text":"impl Sync for SSL_CTX","synthetic":true,"types":[]},{"text":"impl Sync for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl Sync for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl Sync for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl Sync for PKCS12","synthetic":true,"types":[]},{"text":"impl Sync for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl Sync for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Sync for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Sync for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl Sync for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl Sync for PKCS7","synthetic":true,"types":[]},{"text":"impl Sync for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl Sync for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl Sync for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Sync for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl Sync for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Sync for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl Sync for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl Sync for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl Sync for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl Sync for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Sync for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Sync for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl Sync for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl Sync for X509_REQ","synthetic":true,"types":[]},{"text":"impl Sync for X509_CINF","synthetic":true,"types":[]},{"text":"impl Sync for stack_st_X509","synthetic":true,"types":[]},{"text":"impl Sync for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl Sync for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; Sync for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Sync for Condvar","synthetic":true,"types":[]},{"text":"impl Sync for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Sync for Once","synthetic":true,"types":[]},{"text":"impl Sync for RawMutex","synthetic":true,"types":[]},{"text":"impl Sync for RawRwLock","synthetic":true,"types":[]},{"text":"impl Sync for RawThreadId","synthetic":true,"types":[]},{"text":"impl Sync for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Sync for ParkToken","synthetic":true,"types":[]},{"text":"impl Sync for UnparkResult","synthetic":true,"types":[]},{"text":"impl Sync for UnparkToken","synthetic":true,"types":[]},{"text":"impl Sync for SpinWait","synthetic":true,"types":[]},{"text":"impl Sync for FilterOp","synthetic":true,"types":[]},{"text":"impl Sync for ParkResult","synthetic":true,"types":[]},{"text":"impl Sync for RequeueOp","synthetic":true,"types":[]}];
implementors["pd_client"] = [{"text":"impl Sync for DummyPdClient","synthetic":true,"types":[]},{"text":"impl Sync for RpcClient","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for RegionStat","synthetic":true,"types":[]},{"text":"impl Sync for RegionInfo","synthetic":true,"types":[]},{"text":"impl Sync for ClusterVersion","synthetic":true,"types":[]},{"text":"impl Sync for PD_REQUEST_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for PD_HEARTBEAT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for PD_VALIDATE_PEER_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_SIZE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for REGION_READ_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for REGION_READ_BYTES_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for REGION_WRITTEN_BYTES_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for REGION_WRITTEN_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for Inner","synthetic":true,"types":[]},{"text":"impl Sync for HeartbeatReceiver","synthetic":true,"types":[]},{"text":"impl Sync for LeaderClient","synthetic":true,"types":[]},{"text":"impl&lt;Req, F&gt; Sync for Request&lt;Req, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Sync for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["pnet_base"] = [{"text":"impl Sync for MacAddr","synthetic":true,"types":[]},{"text":"impl Sync for ParseMacAddrErr","synthetic":true,"types":[]}];
implementors["pnet_datalink"] = [{"text":"impl Sync for FanoutOption","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for NetworkInterface","synthetic":true,"types":[]},{"text":"impl Sync for ChannelType","synthetic":true,"types":[]},{"text":"impl !Sync for Channel","synthetic":true,"types":[]},{"text":"impl Sync for FanoutType","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl !Sync for Config","synthetic":true,"types":[]}];
implementors["pnet_sys"] = [{"text":"impl Sync for FileDesc","synthetic":true,"types":[]}];
implementors["pprof"] = [{"text":"impl !Sync for Frames","synthetic":true,"types":[]},{"text":"impl !Sync for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ProfilerGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Report","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ReportBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Profile","synthetic":true,"types":[]},{"text":"impl Sync for ValueType","synthetic":true,"types":[]},{"text":"impl Sync for Sample","synthetic":true,"types":[]},{"text":"impl Sync for Label","synthetic":true,"types":[]},{"text":"impl Sync for Mapping","synthetic":true,"types":[]},{"text":"impl Sync for Location","synthetic":true,"types":[]},{"text":"impl Sync for Line","synthetic":true,"types":[]},{"text":"impl Sync for Function","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Sync for YesS3","synthetic":true,"types":[]},{"text":"impl Sync for NoS3","synthetic":true,"types":[]},{"text":"impl Sync for YesS4","synthetic":true,"types":[]},{"text":"impl Sync for NoS4","synthetic":true,"types":[]},{"text":"impl Sync for YesA1","synthetic":true,"types":[]},{"text":"impl Sync for NoA1","synthetic":true,"types":[]},{"text":"impl Sync for YesA2","synthetic":true,"types":[]},{"text":"impl Sync for NoA2","synthetic":true,"types":[]},{"text":"impl Sync for YesNI","synthetic":true,"types":[]},{"text":"impl Sync for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Sync for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Sync for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for vec128_storage","synthetic":true,"types":[]},{"text":"impl Sync for vec256_storage","synthetic":true,"types":[]},{"text":"impl Sync for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Sync for TokenStream","synthetic":true,"types":[]},{"text":"impl !Sync for LexError","synthetic":true,"types":[]},{"text":"impl !Sync for Span","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for Punct","synthetic":true,"types":[]},{"text":"impl !Sync for Ident","synthetic":true,"types":[]},{"text":"impl !Sync for Literal","synthetic":true,"types":[]},{"text":"impl !Sync for TokenTree","synthetic":true,"types":[]},{"text":"impl Sync for Delimiter","synthetic":true,"types":[]},{"text":"impl Sync for Spacing","synthetic":true,"types":[]},{"text":"impl !Sync for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl !Sync for Diagnostic","synthetic":true,"types":[]},{"text":"impl Sync for Level","synthetic":true,"types":[]}];
implementors["procfs"] = [{"text":"impl Sync for Meminfo","synthetic":true,"types":[]},{"text":"impl Sync for CpuInfo","synthetic":true,"types":[]},{"text":"impl Sync for CGroupController","synthetic":true,"types":[]},{"text":"impl Sync for ProcessCgroup","synthetic":true,"types":[]},{"text":"impl Sync for PressureRecord","synthetic":true,"types":[]},{"text":"impl Sync for CpuPressure","synthetic":true,"types":[]},{"text":"impl Sync for MemoryPressure","synthetic":true,"types":[]},{"text":"impl Sync for IoPressure","synthetic":true,"types":[]},{"text":"impl Sync for DiskStat","synthetic":true,"types":[]},{"text":"impl Sync for InternalError","synthetic":true,"types":[]},{"text":"impl Sync for LoadAverage","synthetic":true,"types":[]},{"text":"impl Sync for CpuTime","synthetic":true,"types":[]},{"text":"impl Sync for KernelStats","synthetic":true,"types":[]},{"text":"impl Sync for KernelModule","synthetic":true,"types":[]},{"text":"impl Sync for ProcError","synthetic":true,"types":[]},{"text":"impl Sync for ConfigSetting","synthetic":true,"types":[]},{"text":"impl Sync for Limits","synthetic":true,"types":[]},{"text":"impl Sync for Limit","synthetic":true,"types":[]},{"text":"impl Sync for Stat","synthetic":true,"types":[]},{"text":"impl Sync for NFSServerCaps","synthetic":true,"types":[]},{"text":"impl Sync for MountInfo","synthetic":true,"types":[]},{"text":"impl Sync for MountStat","synthetic":true,"types":[]},{"text":"impl Sync for MountNFSStatistics","synthetic":true,"types":[]},{"text":"impl Sync for NFSEventCounter","synthetic":true,"types":[]},{"text":"impl Sync for NFSByteCounter","synthetic":true,"types":[]},{"text":"impl Sync for NFSOperationStat","synthetic":true,"types":[]},{"text":"impl Sync for Status","synthetic":true,"types":[]},{"text":"impl Sync for StatFlags","synthetic":true,"types":[]},{"text":"impl Sync for CoredumpFlags","synthetic":true,"types":[]},{"text":"impl Sync for FDPermissions","synthetic":true,"types":[]},{"text":"impl Sync for Io","synthetic":true,"types":[]},{"text":"impl Sync for MemoryMap","synthetic":true,"types":[]},{"text":"impl Sync for FDInfo","synthetic":true,"types":[]},{"text":"impl Sync for Process","synthetic":true,"types":[]},{"text":"impl Sync for StatM","synthetic":true,"types":[]},{"text":"impl Sync for LimitValue","synthetic":true,"types":[]},{"text":"impl Sync for MountOptFields","synthetic":true,"types":[]},{"text":"impl Sync for ProcState","synthetic":true,"types":[]},{"text":"impl Sync for MMapPath","synthetic":true,"types":[]},{"text":"impl Sync for FDTarget","synthetic":true,"types":[]},{"text":"impl Sync for TcpNetEntry","synthetic":true,"types":[]},{"text":"impl Sync for UdpNetEntry","synthetic":true,"types":[]},{"text":"impl Sync for UnixNetEntry","synthetic":true,"types":[]},{"text":"impl Sync for DeviceStatus","synthetic":true,"types":[]},{"text":"impl Sync for TcpState","synthetic":true,"types":[]},{"text":"impl Sync for UdpState","synthetic":true,"types":[]},{"text":"impl Sync for UnixState","synthetic":true,"types":[]},{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for DropCache","synthetic":true,"types":[]}];
implementors["procinfo"] = [{"text":"impl Sync for LoadAvg","synthetic":true,"types":[]},{"text":"impl Sync for Io","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Limits","synthetic":true,"types":[]},{"text":"impl Sync for Mountinfo","synthetic":true,"types":[]},{"text":"impl Sync for Statm","synthetic":true,"types":[]},{"text":"impl Sync for Status","synthetic":true,"types":[]},{"text":"impl Sync for Stat","synthetic":true,"types":[]},{"text":"impl Sync for Cpu","synthetic":true,"types":[]},{"text":"impl Sync for SeccompMode","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for DeviceStatus","synthetic":true,"types":[]}];
implementors["prometheus"] = [{"text":"impl Sync for ProtobufEncoder","synthetic":true,"types":[]},{"text":"impl Sync for TextEncoder","synthetic":true,"types":[]},{"text":"impl Sync for Histogram","synthetic":true,"types":[]},{"text":"impl Sync for HistogramOpts","synthetic":true,"types":[]},{"text":"impl Sync for HistogramTimer","synthetic":true,"types":[]},{"text":"impl Sync for Opts","synthetic":true,"types":[]},{"text":"impl Sync for BasicAuthentication","synthetic":true,"types":[]},{"text":"impl Sync for Registry","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for LabelPair","synthetic":true,"types":[]},{"text":"impl Sync for Gauge","synthetic":true,"types":[]},{"text":"impl Sync for Counter","synthetic":true,"types":[]},{"text":"impl Sync for Quantile","synthetic":true,"types":[]},{"text":"impl Sync for Summary","synthetic":true,"types":[]},{"text":"impl Sync for Untyped","synthetic":true,"types":[]},{"text":"impl Sync for Histogram","synthetic":true,"types":[]},{"text":"impl Sync for Bucket","synthetic":true,"types":[]},{"text":"impl Sync for Metric","synthetic":true,"types":[]},{"text":"impl Sync for MetricFamily","synthetic":true,"types":[]},{"text":"impl Sync for MetricType","synthetic":true,"types":[]},{"text":"impl Sync for AtomicF64","synthetic":true,"types":[]},{"text":"impl Sync for AtomicI64","synthetic":true,"types":[]},{"text":"impl Sync for AtomicU64","synthetic":true,"types":[]},{"text":"impl&lt;T, V, D&gt; Sync for AFLocalCounter&lt;T, V, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Sync for AFLocalHistogram&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for GenericCounter&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !Sync for GenericLocalCounter&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !Sync for GenericLocalCounterVec&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Desc","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for GenericGauge&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for LocalHistogram","synthetic":true,"types":[]},{"text":"impl !Sync for LocalHistogramTimer","synthetic":true,"types":[]},{"text":"impl !Sync for LocalHistogramVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MetricVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as MetricVecBuilder&gt;::M: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as MetricVecBuilder&gt;::P: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["prost"] = [{"text":"impl Sync for DecodeError","synthetic":true,"types":[]},{"text":"impl Sync for EncodeError","synthetic":true,"types":[]}];
implementors["protobuf"] = [{"text":"impl Sync for CachedSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RepeatedField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SingularField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SingularPtrField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CodedInputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CodedOutputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UnknownFields","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; Sync for UnknownFieldsIter&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UnknownValues","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; Sync for UnknownValuesIter&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UnknownValue","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; Sync for UnknownValueRef&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Tag","synthetic":true,"types":[]},{"text":"impl Sync for WireType","synthetic":true,"types":[]},{"text":"impl Sync for FileDescriptorSet","synthetic":true,"types":[]},{"text":"impl Sync for FileDescriptorProto","synthetic":true,"types":[]},{"text":"impl Sync for DescriptorProto","synthetic":true,"types":[]},{"text":"impl Sync for DescriptorProto_ExtensionRange","synthetic":true,"types":[]},{"text":"impl Sync for DescriptorProto_ReservedRange","synthetic":true,"types":[]},{"text":"impl Sync for FieldDescriptorProto","synthetic":true,"types":[]},{"text":"impl Sync for OneofDescriptorProto","synthetic":true,"types":[]},{"text":"impl Sync for EnumDescriptorProto","synthetic":true,"types":[]},{"text":"impl Sync for EnumValueDescriptorProto","synthetic":true,"types":[]},{"text":"impl Sync for ServiceDescriptorProto","synthetic":true,"types":[]},{"text":"impl Sync for MethodDescriptorProto","synthetic":true,"types":[]},{"text":"impl Sync for FileOptions","synthetic":true,"types":[]},{"text":"impl Sync for MessageOptions","synthetic":true,"types":[]},{"text":"impl Sync for FieldOptions","synthetic":true,"types":[]},{"text":"impl Sync for OneofOptions","synthetic":true,"types":[]},{"text":"impl Sync for EnumOptions","synthetic":true,"types":[]},{"text":"impl Sync for EnumValueOptions","synthetic":true,"types":[]},{"text":"impl Sync for ServiceOptions","synthetic":true,"types":[]},{"text":"impl Sync for MethodOptions","synthetic":true,"types":[]},{"text":"impl Sync for UninterpretedOption","synthetic":true,"types":[]},{"text":"impl Sync for UninterpretedOption_NamePart","synthetic":true,"types":[]},{"text":"impl Sync for SourceCodeInfo","synthetic":true,"types":[]},{"text":"impl Sync for SourceCodeInfo_Location","synthetic":true,"types":[]},{"text":"impl Sync for GeneratedCodeInfo","synthetic":true,"types":[]},{"text":"impl Sync for GeneratedCodeInfo_Annotation","synthetic":true,"types":[]},{"text":"impl Sync for FieldDescriptorProto_Type","synthetic":true,"types":[]},{"text":"impl Sync for FieldDescriptorProto_Label","synthetic":true,"types":[]},{"text":"impl Sync for FileOptions_OptimizeMode","synthetic":true,"types":[]},{"text":"impl Sync for FieldOptions_CType","synthetic":true,"types":[]},{"text":"impl Sync for FieldOptions_JSType","synthetic":true,"types":[]},{"text":"impl Sync for CodeGeneratorRequest","synthetic":true,"types":[]},{"text":"impl Sync for CodeGeneratorResponse","synthetic":true,"types":[]},{"text":"impl Sync for CodeGeneratorResponse_File","synthetic":true,"types":[]},{"text":"impl Sync for WireError","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufError","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; Sync for ExtFieldOptional&lt;M, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; Sync for ExtFieldRepeated&lt;M, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Lazy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for FieldDescriptor","synthetic":true,"types":[]},{"text":"impl !Sync for MessageDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for EnumValueDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for EnumDescriptor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ProtobufValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ReflectFieldRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeFloat","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeDouble","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeInt32","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeInt64","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeUint32","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeUint64","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeSint32","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeSint64","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeFixed32","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeFixed64","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeSfixed32","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeSfixed64","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeBool","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeString","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeBytes","synthetic":true,"types":[]},{"text":"impl Sync for ProtobufTypeChars","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ProtobufTypeEnum&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Sync for ProtobufTypeMessage&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Any","synthetic":true,"types":[]},{"text":"impl Sync for Api","synthetic":true,"types":[]},{"text":"impl Sync for Method","synthetic":true,"types":[]},{"text":"impl Sync for Mixin","synthetic":true,"types":[]},{"text":"impl Sync for Duration","synthetic":true,"types":[]},{"text":"impl Sync for Empty","synthetic":true,"types":[]},{"text":"impl Sync for FieldMask","synthetic":true,"types":[]},{"text":"impl Sync for SourceContext","synthetic":true,"types":[]},{"text":"impl Sync for Struct","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl Sync for ListValue","synthetic":true,"types":[]},{"text":"impl Sync for Timestamp","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Field","synthetic":true,"types":[]},{"text":"impl Sync for Enum","synthetic":true,"types":[]},{"text":"impl Sync for EnumValue","synthetic":true,"types":[]},{"text":"impl Sync for Option","synthetic":true,"types":[]},{"text":"impl Sync for DoubleValue","synthetic":true,"types":[]},{"text":"impl Sync for FloatValue","synthetic":true,"types":[]},{"text":"impl Sync for Int64Value","synthetic":true,"types":[]},{"text":"impl Sync for UInt64Value","synthetic":true,"types":[]},{"text":"impl Sync for Int32Value","synthetic":true,"types":[]},{"text":"impl Sync for UInt32Value","synthetic":true,"types":[]},{"text":"impl Sync for BoolValue","synthetic":true,"types":[]},{"text":"impl Sync for StringValue","synthetic":true,"types":[]},{"text":"impl Sync for BytesValue","synthetic":true,"types":[]},{"text":"impl Sync for Value_oneof_kind","synthetic":true,"types":[]},{"text":"impl Sync for NullValue","synthetic":true,"types":[]},{"text":"impl Sync for Field_Kind","synthetic":true,"types":[]},{"text":"impl Sync for Field_Cardinality","synthetic":true,"types":[]},{"text":"impl Sync for Syntax","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; Sync for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quick_xml"] = [{"text":"impl&lt;B&gt; Sync for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BytesStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BytesDecl&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BytesEnd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BytesText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Attribute&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["raft"] = [{"text":"impl&lt;'a&gt; Sync for Changer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for Unstable","synthetic":true,"types":[]},{"text":"impl Sync for Configuration","synthetic":true,"types":[]},{"text":"impl Sync for Configuration","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Raft&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SoftState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RaftLog&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Inflights","synthetic":true,"types":[]},{"text":"impl Sync for Progress","synthetic":true,"types":[]},{"text":"impl Sync for ProgressTracker","synthetic":true,"types":[]},{"text":"impl Sync for ReadState","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Status&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for StorageError","synthetic":true,"types":[]},{"text":"impl Sync for StateRole","synthetic":true,"types":[]},{"text":"impl Sync for ProgressState","synthetic":true,"types":[]},{"text":"impl Sync for ReadOnlyOption","synthetic":true,"types":[]},{"text":"impl Sync for Peer","synthetic":true,"types":[]},{"text":"impl Sync for Ready","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RawNode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotStatus","synthetic":true,"types":[]},{"text":"impl Sync for RaftState","synthetic":true,"types":[]},{"text":"impl Sync for MemStorageCore","synthetic":true,"types":[]},{"text":"impl Sync for MemStorage","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Union&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["raft_engine"] = [{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl&lt;E, W&gt; !Sync for LogBatch&lt;E, W&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CacheStats","synthetic":true,"types":[]},{"text":"impl Sync for GlobalStats","synthetic":true,"types":[]},{"text":"impl Sync for RecoveryMode","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["raft_log_engine"] = [{"text":"impl !Sync for RaftLogBatch","synthetic":true,"types":[]},{"text":"impl Sync for RaftLogEngine","synthetic":true,"types":[]},{"text":"impl Sync for EntryExtTyped","synthetic":true,"types":[]}];
implementors["raft_proto"] = [{"text":"impl Sync for Entry","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotMetadata","synthetic":true,"types":[]},{"text":"impl Sync for Snapshot","synthetic":true,"types":[]},{"text":"impl Sync for Message","synthetic":true,"types":[]},{"text":"impl Sync for HardState","synthetic":true,"types":[]},{"text":"impl Sync for ConfState","synthetic":true,"types":[]},{"text":"impl Sync for ConfChange","synthetic":true,"types":[]},{"text":"impl Sync for ConfChangeSingle","synthetic":true,"types":[]},{"text":"impl Sync for ConfChangeV2","synthetic":true,"types":[]},{"text":"impl Sync for EntryType","synthetic":true,"types":[]},{"text":"impl Sync for MessageType","synthetic":true,"types":[]},{"text":"impl Sync for ConfChangeTransition","synthetic":true,"types":[]},{"text":"impl Sync for ConfChangeType","synthetic":true,"types":[]}];
implementors["raftstore"] = [{"text":"impl&lt;E&gt; Sync for Raw&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Sync for HalfCheckObserver","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; !Sync for Host&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Sync for KeysCheckObserver&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Sync for SizeCheckObserver&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TableCheckObserver","synthetic":true,"types":[]},{"text":"impl Sync for KeyEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ObserverContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Cmd","synthetic":true,"types":[]},{"text":"impl Sync for CmdBatch","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for RegionChangeEvent","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for SplitCheckConfigManager","synthetic":true,"types":[]},{"text":"impl Sync for ConsistencyCheckMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Entry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for BoxAdminObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WrappedAdminObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for BoxQueryObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WrappedQueryObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for BoxApplySnapshotObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WrappedApplySnapshotObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Sync for BoxSplitCheckObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; Sync for WrappedSplitCheckObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for BoxRoleObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WrappedRoleObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for BoxRegionChangeObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WrappedRegionChangeObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for BoxReadIndexObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WrappedReadIndexObserver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Sync for BoxCmdObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; Sync for WrappedCmdObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Sync for BoxConsistencyCheckObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; Sync for WrappedConsistencyCheckObserver&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Sync for Registry&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Sync for CoprocessorHost&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Sync for REGION_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for REGION_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for REGION_COUNT_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for RegionInfo","synthetic":true,"types":[]},{"text":"impl Sync for RegionEventListener","synthetic":true,"types":[]},{"text":"impl Sync for RegionCollector","synthetic":true,"types":[]},{"text":"impl Sync for RegionInfoAccessor","synthetic":true,"types":[]},{"text":"impl Sync for RaftStoreEvent","synthetic":true,"types":[]},{"text":"impl !Sync for RegionInfoQuery","synthetic":true,"types":[]},{"text":"impl Sync for Checker","synthetic":true,"types":[]},{"text":"impl Sync for Checker","synthetic":true,"types":[]},{"text":"impl Sync for Checker","synthetic":true,"types":[]},{"text":"impl Sync for Checker","synthetic":true,"types":[]},{"text":"impl Sync for SplitObserver","synthetic":true,"types":[]},{"text":"impl Sync for DiscardReason","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for RaftStoreBlackHole","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Sync for ServerRaftStoreRouter&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CompactionGuardGeneratorFactory","synthetic":true,"types":[]},{"text":"impl Sync for DestroyPeerJob","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Sync for Peer&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PeerStat","synthetic":true,"types":[]},{"text":"impl Sync for ProposalContext","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Sync for PeerStorage&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ReadIndexContext","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for RegionIterator&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Iterable&gt;::Iterator: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for RegionSnapshot&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GlobalReplicationState","synthetic":true,"types":[]},{"text":"impl Sync for StoreGroup","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for ApplyOptions&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SnapKey","synthetic":true,"types":[]},{"text":"impl Sync for SnapManager","synthetic":true,"types":[]},{"text":"impl Sync for SnapManagerBuilder","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotStatistics","synthetic":true,"types":[]},{"text":"impl Sync for AutoSplitController","synthetic":true,"types":[]},{"text":"impl Sync for FlowStatistics","synthetic":true,"types":[]},{"text":"impl Sync for ReadDelegate","synthetic":true,"types":[]},{"text":"impl Sync for ReadStats","synthetic":true,"types":[]},{"text":"impl Sync for SplitConfig","synthetic":true,"types":[]},{"text":"impl Sync for SplitConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; !Sync for LocalReader&lt;C, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, S&gt; !Sync for Runner&lt;E, S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RequestPolicy","synthetic":true,"types":[]},{"text":"impl !Sync for SnapState","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for SnapEntry","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Sync for Task&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Task&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for Task","synthetic":true,"types":[]},{"text":"impl Sync for CONFIG_RAFTSTORE_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for RaftstoreConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Sync for PeerFsm&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GroupState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for PendingCmd&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for PendingCmdQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ChangePeer","synthetic":true,"types":[]},{"text":"impl Sync for Range","synthetic":true,"types":[]},{"text":"impl Sync for ExecContext","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for ApplyCallback&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !Sync for ApplyContext&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl Sync for WaitSourceMergeState","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for YieldState&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Sync for NewSplitPeer","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for ApplyDelegate&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for Apply&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Registration","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for Proposal&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Destroy","synthetic":true,"types":[]},{"text":"impl Sync for CatchUpLogs","synthetic":true,"types":[]},{"text":"impl Sync for GenSnapTask","synthetic":true,"types":[]},{"text":"impl Sync for ObserveID","synthetic":true,"types":[]},{"text":"impl Sync for ObserveCmd","synthetic":true,"types":[]},{"text":"impl Sync for ApplyMetrics","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for ApplyRes&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for ApplyFsm&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ControlMsg","synthetic":true,"types":[]},{"text":"impl Sync for ControlFsm","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !Sync for ApplyPoller&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; !Sync for Builder&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for ApplyRouter&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for ApplyBatchSystem&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for ExecResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for ApplyResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ChangeCmd","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for Msg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for TaskRes&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for APPLY_PROPOSAL","synthetic":true,"types":[]},{"text":"impl Sync for StoreStat","synthetic":true,"types":[]},{"text":"impl Sync for GlobalStoreStat","synthetic":true,"types":[]},{"text":"impl Sync for LocalStoreStat","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Sync for BatchRaftCmdRequestBuilder&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, EK, ER, T&gt; !Sync for PeerFsmDelegate&lt;'a, EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for StoreInfo&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StoreMeta","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Sync for RaftRouter&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for PeerTickBatch","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !Sync for PollContext&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Store","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Sync for StoreFsm&lt;EK&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;EK as CompactExt&gt;::CompactedEvent: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, EK, ER, T&gt; !Sync for StoreFsmDelegate&lt;'a, EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !Sync for RaftPoller&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !Sync for RaftPollerBuilder&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for Workers&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; !Sync for RaftBatchSystem&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CheckMsgStatus","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for ReadResponse&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for WriteResponse","synthetic":true,"types":[]},{"text":"impl Sync for PeerTicks","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for RaftCommand&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for Callback&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for StoreTick","synthetic":true,"types":[]},{"text":"impl Sync for MergeResultKind","synthetic":true,"types":[]},{"text":"impl&lt;SK&gt; !Sync for SignificantMsg&lt;SK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for CasualMessage&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for PeerMsg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; !Sync for StoreMsg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AdminCmdEpochState","synthetic":true,"types":[]},{"text":"impl Sync for ADMIN_CMD_EPOCH_MAP","synthetic":true,"types":[]},{"text":"impl Sync for Lease","synthetic":true,"types":[]},{"text":"impl Sync for RemoteLease","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Sync for KeysInfoFormatter&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PerfContextStatistics","synthetic":true,"types":[]},{"text":"impl Sync for LeaseState","synthetic":true,"types":[]},{"text":"impl Sync for ConfChangeKind","synthetic":true,"types":[]},{"text":"impl Sync for COMPACTION_GUARD","synthetic":true,"types":[]},{"text":"impl !Sync for CompactionGuardGenerator","synthetic":true,"types":[]},{"text":"impl Sync for RaftReadyMetrics","synthetic":true,"types":[]},{"text":"impl Sync for RaftMessageMetrics","synthetic":true,"types":[]},{"text":"impl Sync for RaftMessageDropMetrics","synthetic":true,"types":[]},{"text":"impl !Sync for RaftProposeMetrics","synthetic":true,"types":[]},{"text":"impl Sync for RaftInvalidProposeMetrics","synthetic":true,"types":[]},{"text":"impl !Sync for RaftMetrics","synthetic":true,"types":[]},{"text":"impl Sync for PEER_PROPOSAL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for PEER_PROPOSAL_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for PEER_ADMIN_CMD_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for PEER_ADMIN_CMD_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for PEER_APPEND_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for PEER_COMMIT_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for STORE_APPLY_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for APPLY_TASK_WAIT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for STORE_RAFT_READY_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_RAFT_READY_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for STORE_RAFT_SENT_MESSAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_RAFT_SENT_MESSAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for STORE_RAFT_DROPPED_MESSAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_RAFT_DROPPED_MESSAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for STORE_SNAPSHOT_TRAFFIC_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_SNAPSHOT_VALIDATION_FAILURE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_SNAPSHOT_VALIDATION_FAILURE_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for PEER_RAFT_PROCESS_DURATION","synthetic":true,"types":[]},{"text":"impl Sync for PEER_PROPOSE_LOG_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for REGION_HASH_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for REGION_HASH_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for REGION_MAX_LOG_LAG","synthetic":true,"types":[]},{"text":"impl Sync for REQUEST_WAIT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for PEER_GC_RAFT_LOG_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for UPDATE_REGION_SIZE_BY_COMPACTION_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for COMPACTION_RELATED_REGION_COUNT","synthetic":true,"types":[]},{"text":"impl Sync for COMPACTION_DECLINED_BYTES","synthetic":true,"types":[]},{"text":"impl Sync for SNAPSHOT_CF_KV_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SNAPSHOT_CF_KV_COUNT","synthetic":true,"types":[]},{"text":"impl Sync for SNAPSHOT_CF_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SNAPSHOT_CF_SIZE","synthetic":true,"types":[]},{"text":"impl Sync for SNAPSHOT_BUILD_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for SNAPSHOT_KV_COUNT_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for SNAPSHOT_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_ENTRY_FETCHES_VEC","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_ENTRY_FETCHES","synthetic":true,"types":[]},{"text":"impl Sync for LEADER_MISSING","synthetic":true,"types":[]},{"text":"impl Sync for INGEST_SST_DURATION_SECONDS","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_INVALID_PROPOSAL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_INVALID_PROPOSAL_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_EVENT_DURATION_VEC","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_EVENT_DURATION","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_READ_INDEX_PENDING_DURATION","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_READ_INDEX_PENDING_COUNT","synthetic":true,"types":[]},{"text":"impl Sync for APPLY_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for STORE_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for APPLY_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for STORE_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for READ_QPS_TOPN","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_ENTRIES_CACHES_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for APPLY_PENDING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for APPLY_PENDING_ENTRIES_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for PerfContextType","synthetic":true,"types":[]},{"text":"impl Sync for ProposalType","synthetic":true,"types":[]},{"text":"impl Sync for AdminCmdType","synthetic":true,"types":[]},{"text":"impl Sync for AdminCmdStatus","synthetic":true,"types":[]},{"text":"impl Sync for RaftReadyType","synthetic":true,"types":[]},{"text":"impl Sync for MessageCounterType","synthetic":true,"types":[]},{"text":"impl Sync for RaftDroppedMessage","synthetic":true,"types":[]},{"text":"impl Sync for SnapValidationType","synthetic":true,"types":[]},{"text":"impl Sync for RegionHashType","synthetic":true,"types":[]},{"text":"impl Sync for RegionHashResult","synthetic":true,"types":[]},{"text":"impl Sync for CfNames","synthetic":true,"types":[]},{"text":"impl Sync for RaftEntryType","synthetic":true,"types":[]},{"text":"impl Sync for RaftInvalidProposal","synthetic":true,"types":[]},{"text":"impl Sync for RaftEventDurationType","synthetic":true,"types":[]},{"text":"impl !Sync for RaftEventDurationInner","synthetic":true,"types":[]},{"text":"impl Sync for RaftEventDurationDelegator","synthetic":true,"types":[]},{"text":"impl Sync for RaftEventDuration","synthetic":true,"types":[]},{"text":"impl !Sync for RaftInvalidProposalCountInner","synthetic":true,"types":[]},{"text":"impl Sync for RaftInvalidProposalCountDelegator","synthetic":true,"types":[]},{"text":"impl Sync for RaftInvalidProposalCount","synthetic":true,"types":[]},{"text":"impl !Sync for RaftEntryFetchesInner","synthetic":true,"types":[]},{"text":"impl Sync for RaftEntryFetchesDelegator","synthetic":true,"types":[]},{"text":"impl Sync for RaftEntryFetches","synthetic":true,"types":[]},{"text":"impl !Sync for SnapCfInner","synthetic":true,"types":[]},{"text":"impl Sync for SnapCfDelegator","synthetic":true,"types":[]},{"text":"impl Sync for SnapCf","synthetic":true,"types":[]},{"text":"impl !Sync for SnapCfSizeInner","synthetic":true,"types":[]},{"text":"impl Sync for SnapCfSizeDelegator","synthetic":true,"types":[]},{"text":"impl Sync for SnapCfSize","synthetic":true,"types":[]},{"text":"impl !Sync for RegionHashCounterInner","synthetic":true,"types":[]},{"text":"impl Sync for RegionHashCounterDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for RegionHashCounter2Inner","synthetic":true,"types":[]},{"text":"impl Sync for RegionHashCounter2Delegator","synthetic":true,"types":[]},{"text":"impl Sync for RegionHashCounter","synthetic":true,"types":[]},{"text":"impl !Sync for ProposalVecInner","synthetic":true,"types":[]},{"text":"impl Sync for ProposalVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for ProposalVec","synthetic":true,"types":[]},{"text":"impl !Sync for AdminCmdVecInner","synthetic":true,"types":[]},{"text":"impl Sync for AdminCmdVecDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for AdminCmdVec2Inner","synthetic":true,"types":[]},{"text":"impl Sync for AdminCmdVec2Delegator","synthetic":true,"types":[]},{"text":"impl Sync for AdminCmdVec","synthetic":true,"types":[]},{"text":"impl !Sync for RaftReadyVecInner","synthetic":true,"types":[]},{"text":"impl Sync for RaftReadyVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for RaftReadyVec","synthetic":true,"types":[]},{"text":"impl !Sync for MessageCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for MessageCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for MessageCounterVec","synthetic":true,"types":[]},{"text":"impl !Sync for RaftDropedVecInner","synthetic":true,"types":[]},{"text":"impl Sync for RaftDropedVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for RaftDropedVec","synthetic":true,"types":[]},{"text":"impl !Sync for SnapValidVecInner","synthetic":true,"types":[]},{"text":"impl Sync for SnapValidVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for SnapValidVec","synthetic":true,"types":[]},{"text":"impl !Sync for PerfContextTimeDurationInner","synthetic":true,"types":[]},{"text":"impl Sync for PerfContextTimeDurationDelegator","synthetic":true,"types":[]},{"text":"impl Sync for PerfContextTimeDuration","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for ProposalQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ConsistencyState","synthetic":true,"types":[]},{"text":"impl Sync for CheckTickResult","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for ProposedAdminCmd&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for CmdEpochChecker&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for StaleState","synthetic":true,"types":[]},{"text":"impl !Sync for EntryCache","synthetic":true,"types":[]},{"text":"impl Sync for ApplySnapResult","synthetic":true,"types":[]},{"text":"impl Sync for InvokeContext","synthetic":true,"types":[]},{"text":"impl Sync for CheckApplyingSnapStatus","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for ReadIndexRequest&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for ReadIndexQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CfFileForRecving","synthetic":true,"types":[]},{"text":"impl !Sync for CfFile","synthetic":true,"types":[]},{"text":"impl Sync for MetaFile","synthetic":true,"types":[]},{"text":"impl !Sync for Snap","synthetic":true,"types":[]},{"text":"impl Sync for ApplyAbortChecker","synthetic":true,"types":[]},{"text":"impl Sync for SnapStats","synthetic":true,"types":[]},{"text":"impl Sync for SnapManagerCore","synthetic":true,"types":[]},{"text":"impl Sync for BuildStatistics","synthetic":true,"types":[]},{"text":"impl&lt;E, C, S&gt; Sync for Runner&lt;E, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Task","synthetic":true,"types":[]},{"text":"impl&lt;EK, C, S&gt; Sync for Runner&lt;EK, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Task","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Runner&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Task","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;EK, C&gt; !Sync for Runner&lt;EK, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Task&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SNAP_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SNAP_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for CHECK_SPILT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for CHECK_SPILT_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for SNAP_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SNAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for CHECK_SPILT_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for COMPACT_RANGE_CF","synthetic":true,"types":[]},{"text":"impl Sync for REGION_HASH_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for STALE_PEER_PENDING_DELETE_RANGE_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for LOCAL_READ_REJECT_VEC","synthetic":true,"types":[]},{"text":"impl Sync for LOCAL_READ_REJECT","synthetic":true,"types":[]},{"text":"impl Sync for LOCAL_READ_EXECUTED_REQUESTS","synthetic":true,"types":[]},{"text":"impl Sync for LOCAL_READ_EXECUTED_CACHE_REQUESTS","synthetic":true,"types":[]},{"text":"impl Sync for SnapType","synthetic":true,"types":[]},{"text":"impl Sync for SnapStatus","synthetic":true,"types":[]},{"text":"impl Sync for RejectReason","synthetic":true,"types":[]},{"text":"impl !Sync for SnapCounterInner","synthetic":true,"types":[]},{"text":"impl Sync for SnapCounterDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for SnapCounter2Inner","synthetic":true,"types":[]},{"text":"impl Sync for SnapCounter2Delegator","synthetic":true,"types":[]},{"text":"impl Sync for SnapCounter","synthetic":true,"types":[]},{"text":"impl !Sync for CheckSplitCounterInner","synthetic":true,"types":[]},{"text":"impl Sync for CheckSplitCounterDelegator","synthetic":true,"types":[]},{"text":"impl Sync for CheckSplitCounter","synthetic":true,"types":[]},{"text":"impl !Sync for SnapHistogramInner","synthetic":true,"types":[]},{"text":"impl Sync for SnapHistogramDelegator","synthetic":true,"types":[]},{"text":"impl Sync for SnapHistogram","synthetic":true,"types":[]},{"text":"impl Sync for ReadRejectCounter","synthetic":true,"types":[]},{"text":"impl !Sync for StoreStat","synthetic":true,"types":[]},{"text":"impl Sync for PeerStat","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Sync for StatsMonitor&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; !Sync for Runner&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, R&gt; !Sync for Runner&lt;EK, ER, R&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Task","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'r, 'm&gt; Sync for Inspector&lt;'r, 'm&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ReadMetrics","synthetic":true,"types":[]},{"text":"impl Sync for Progress","synthetic":true,"types":[]},{"text":"impl Sync for StalePeerInfo","synthetic":true,"types":[]},{"text":"impl Sync for PendingDeleteRanges","synthetic":true,"types":[]},{"text":"impl&lt;EK, R&gt; !Sync for SnapContext&lt;EK, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, R&gt; !Sync for Runner&lt;EK, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MergedIterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SplitInfo","synthetic":true,"types":[]},{"text":"impl Sync for Sample","synthetic":true,"types":[]},{"text":"impl Sync for RegionInfo","synthetic":true,"types":[]},{"text":"impl Sync for Recorder","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Sync for Bernoulli","synthetic":true,"types":[]},{"text":"impl Sync for Open01","synthetic":true,"types":[]},{"text":"impl Sync for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Sync for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Binomial","synthetic":true,"types":[]},{"text":"impl Sync for Cauchy","synthetic":true,"types":[]},{"text":"impl Sync for Dirichlet","synthetic":true,"types":[]},{"text":"impl Sync for Exp","synthetic":true,"types":[]},{"text":"impl Sync for Exp1","synthetic":true,"types":[]},{"text":"impl Sync for Beta","synthetic":true,"types":[]},{"text":"impl Sync for ChiSquared","synthetic":true,"types":[]},{"text":"impl Sync for FisherF","synthetic":true,"types":[]},{"text":"impl Sync for Gamma","synthetic":true,"types":[]},{"text":"impl Sync for StudentT","synthetic":true,"types":[]},{"text":"impl Sync for LogNormal","synthetic":true,"types":[]},{"text":"impl Sync for Normal","synthetic":true,"types":[]},{"text":"impl Sync for StandardNormal","synthetic":true,"types":[]},{"text":"impl Sync for Pareto","synthetic":true,"types":[]},{"text":"impl Sync for Poisson","synthetic":true,"types":[]},{"text":"impl Sync for Triangular","synthetic":true,"types":[]},{"text":"impl Sync for UnitCircle","synthetic":true,"types":[]},{"text":"impl Sync for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Sync for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Sync for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Standard","synthetic":true,"types":[]},{"text":"impl Sync for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EntropyRng","synthetic":true,"types":[]},{"text":"impl Sync for StdRng","synthetic":true,"types":[]},{"text":"impl !Sync for ThreadRng","synthetic":true,"types":[]},{"text":"impl Sync for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Sync for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Sync for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Sync for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Sync for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Sync for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_isaac"] = [{"text":"impl Sync for IsaacRng","synthetic":true,"types":[]},{"text":"impl Sync for IsaacCore","synthetic":true,"types":[]},{"text":"impl Sync for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl Sync for Isaac64Core","synthetic":true,"types":[]}];
implementors["raw_cpuid"] = [{"text":"impl Sync for CpuId","synthetic":true,"types":[]},{"text":"impl Sync for CpuIdResult","synthetic":true,"types":[]},{"text":"impl Sync for VendorInfo","synthetic":true,"types":[]},{"text":"impl Sync for CacheInfoIter","synthetic":true,"types":[]},{"text":"impl Sync for CacheInfo","synthetic":true,"types":[]},{"text":"impl Sync for ProcessorSerial","synthetic":true,"types":[]},{"text":"impl Sync for FeatureInfo","synthetic":true,"types":[]},{"text":"impl Sync for CacheParametersIter","synthetic":true,"types":[]},{"text":"impl Sync for CacheParameter","synthetic":true,"types":[]},{"text":"impl Sync for MonitorMwaitInfo","synthetic":true,"types":[]},{"text":"impl Sync for ThermalPowerInfo","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedFeatures","synthetic":true,"types":[]},{"text":"impl Sync for DirectCacheAccessInfo","synthetic":true,"types":[]},{"text":"impl Sync for PerformanceMonitoringInfo","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedTopologyIter","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedTopologyLevel","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedStateInfo","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedStateIter","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedState","synthetic":true,"types":[]},{"text":"impl Sync for RdtMonitoringInfo","synthetic":true,"types":[]},{"text":"impl Sync for L3MonitoringInfo","synthetic":true,"types":[]},{"text":"impl Sync for RdtAllocationInfo","synthetic":true,"types":[]},{"text":"impl Sync for L3CatInfo","synthetic":true,"types":[]},{"text":"impl Sync for L2CatInfo","synthetic":true,"types":[]},{"text":"impl Sync for MemBwAllocationInfo","synthetic":true,"types":[]},{"text":"impl Sync for SgxInfo","synthetic":true,"types":[]},{"text":"impl Sync for SgxSectionIter","synthetic":true,"types":[]},{"text":"impl Sync for EpcSection","synthetic":true,"types":[]},{"text":"impl Sync for ProcessorTraceInfo","synthetic":true,"types":[]},{"text":"impl Sync for TscInfo","synthetic":true,"types":[]},{"text":"impl Sync for ProcessorFrequencyInfo","synthetic":true,"types":[]},{"text":"impl Sync for DatIter","synthetic":true,"types":[]},{"text":"impl Sync for DatInfo","synthetic":true,"types":[]},{"text":"impl Sync for SoCVendorInfo","synthetic":true,"types":[]},{"text":"impl Sync for SoCVendorAttributesIter","synthetic":true,"types":[]},{"text":"impl Sync for SoCVendorBrand","synthetic":true,"types":[]},{"text":"impl Sync for HypervisorInfo","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedFunctionInfo","synthetic":true,"types":[]},{"text":"impl Sync for MemoryEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Sync for CacheInfoType","synthetic":true,"types":[]},{"text":"impl Sync for CacheType","synthetic":true,"types":[]},{"text":"impl Sync for TopologyType","synthetic":true,"types":[]},{"text":"impl Sync for SgxSectionInfo","synthetic":true,"types":[]},{"text":"impl Sync for DatType","synthetic":true,"types":[]},{"text":"impl Sync for Hypervisor","synthetic":true,"types":[]},{"text":"impl Sync for L2Associativity","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Sync for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Sync for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Sync for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Sync for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Sync for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Sync for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Sync for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Sync for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for IterMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Sync for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Sync for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for Split&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for SplitTerminator&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for Matches&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for MatchIndices&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !Sync for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPool","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !Sync for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Configuration","synthetic":true,"types":[]},{"text":"impl !Sync for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Sync for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexSet","synthetic":true,"types":[]},{"text":"impl Sync for SetMatches","synthetic":true,"types":[]},{"text":"impl Sync for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Sync for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Sync for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Sync for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Sync for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RegexSet","synthetic":true,"types":[]},{"text":"impl Sync for SetMatches","synthetic":true,"types":[]},{"text":"impl Sync for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;D&gt; Sync for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !Sync for Parser","synthetic":true,"types":[]},{"text":"impl Sync for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Sync for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Span","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl Sync for WithComments","synthetic":true,"types":[]},{"text":"impl Sync for Comment","synthetic":true,"types":[]},{"text":"impl Sync for Alternation","synthetic":true,"types":[]},{"text":"impl Sync for Concat","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for ClassPerl","synthetic":true,"types":[]},{"text":"impl Sync for ClassAscii","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Sync for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Sync for Assertion","synthetic":true,"types":[]},{"text":"impl Sync for Repetition","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for CaptureName","synthetic":true,"types":[]},{"text":"impl Sync for SetFlags","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl Sync for FlagsItem","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Ast","synthetic":true,"types":[]},{"text":"impl Sync for LiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for Class","synthetic":true,"types":[]},{"text":"impl Sync for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassSet","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Sync for AssertionKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Sync for GroupKind","synthetic":true,"types":[]},{"text":"impl Sync for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Sync for Flag","synthetic":true,"types":[]},{"text":"impl Sync for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Parser","synthetic":true,"types":[]},{"text":"impl Sync for Printer","synthetic":true,"types":[]},{"text":"impl Sync for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Hir","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Sync for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for Repetition","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for HirKind","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for Class","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for WordBoundary","synthetic":true,"types":[]},{"text":"impl Sync for GroupKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Sync for Literals","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for Printer","synthetic":true,"types":[]},{"text":"impl Sync for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Translator","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Range","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Sequence","synthetic":true,"types":[]}];
implementors["reqwest"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Body","synthetic":true,"types":[]},{"text":"impl Sync for Client","synthetic":true,"types":[]},{"text":"impl Sync for ClientBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for RequestBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Response","synthetic":true,"types":[]},{"text":"impl Sync for Proxy","synthetic":true,"types":[]},{"text":"impl Sync for Certificate","synthetic":true,"types":[]},{"text":"impl Sync for Identity","synthetic":true,"types":[]},{"text":"impl Sync for Form","synthetic":true,"types":[]},{"text":"impl Sync for Part","synthetic":true,"types":[]},{"text":"impl !Sync for Body","synthetic":true,"types":[]},{"text":"impl Sync for Client","synthetic":true,"types":[]},{"text":"impl Sync for ClientBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for RequestBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Response","synthetic":true,"types":[]},{"text":"impl !Sync for Form","synthetic":true,"types":[]},{"text":"impl !Sync for Part","synthetic":true,"types":[]},{"text":"impl Sync for Policy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Attempt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Action","synthetic":true,"types":[]}];
implementors["resolved_ts"] = [{"text":"impl Sync for Resolver","synthetic":true,"types":[]}];
implementors["rev_lines"] = [{"text":"impl&lt;R&gt; Sync for RevLines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rgb"] = [{"text":"impl&lt;ComponentType&gt; Sync for RGB&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Sync for RGBA&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType&gt; Sync for BGR&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Sync for BGRA&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType&gt; Sync for Gray&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Sync for GrayAlpha&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl Sync for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Nonce","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UnboundKey","synthetic":true,"types":[]},{"text":"impl Sync for LessSafeKey","synthetic":true,"types":[]},{"text":"impl Sync for Algorithm","synthetic":true,"types":[]},{"text":"impl Sync for Tag","synthetic":true,"types":[]},{"text":"impl Sync for SealingKey","synthetic":true,"types":[]},{"text":"impl Sync for OpeningKey","synthetic":true,"types":[]},{"text":"impl Sync for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl Sync for Algorithm","synthetic":true,"types":[]},{"text":"impl Sync for Algorithm","synthetic":true,"types":[]},{"text":"impl Sync for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl Sync for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Context","synthetic":true,"types":[]},{"text":"impl Sync for Digest","synthetic":true,"types":[]},{"text":"impl Sync for Algorithm","synthetic":true,"types":[]},{"text":"impl Sync for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl Sync for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl Sync for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl Sync for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl Sync for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl Sync for Unspecified","synthetic":true,"types":[]},{"text":"impl Sync for KeyRejected","synthetic":true,"types":[]},{"text":"impl Sync for Algorithm","synthetic":true,"types":[]},{"text":"impl Sync for Salt","synthetic":true,"types":[]},{"text":"impl Sync for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Sync for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Algorithm","synthetic":true,"types":[]},{"text":"impl Sync for Tag","synthetic":true,"types":[]},{"text":"impl Sync for Key","synthetic":true,"types":[]},{"text":"impl Sync for Context","synthetic":true,"types":[]},{"text":"impl Sync for Algorithm","synthetic":true,"types":[]},{"text":"impl Sync for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SystemRandom","synthetic":true,"types":[]},{"text":"impl Sync for RsaParameters","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl Sync for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl Sync for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rocksdb"] = [{"text":"impl Sync for CompactionFilterContext","synthetic":true,"types":[]},{"text":"impl !Sync for CompactionFilterFactoryHandle","synthetic":true,"types":[]},{"text":"impl !Sync for CompactionFilterHandle","synthetic":true,"types":[]},{"text":"impl Sync for FileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Sync for CompactionJobInfo","synthetic":true,"types":[]},{"text":"impl Sync for FlushJobInfo","synthetic":true,"types":[]},{"text":"impl Sync for IngestionInfo","synthetic":true,"types":[]},{"text":"impl Sync for WriteStallInfo","synthetic":true,"types":[]},{"text":"impl !Sync for ColumnFamilyMetaData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for LevelMetaData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SstFileMetaData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for IOStatsContext","synthetic":true,"types":[]},{"text":"impl !Sync for PerfContext","synthetic":true,"types":[]},{"text":"impl Sync for TableProperties","synthetic":true,"types":[]},{"text":"impl !Sync for TablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl Sync for TablePropertiesCollectionView","synthetic":true,"types":[]},{"text":"impl Sync for UserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Sync for TitanBlobIndex","synthetic":true,"types":[]},{"text":"impl !Sync for TitanDBOptions","synthetic":true,"types":[]},{"text":"impl !Sync for WriteBatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WriteBatchRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PerfLevel","synthetic":true,"types":[]},{"text":"impl Sync for ComparatorCallback","synthetic":true,"types":[]},{"text":"impl Sync for MergeOperatorCallback","synthetic":true,"types":[]},{"text":"impl !Sync for MergeOperands","synthetic":true,"types":[]},{"text":"impl !Sync for CFHandle","synthetic":true,"types":[]},{"text":"impl !Sync for MapProperty","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Sync for DBIterator&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Range&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for KeyVersion","synthetic":true,"types":[]},{"text":"impl !Sync for DBVector","synthetic":true,"types":[]},{"text":"impl !Sync for BackupEngine","synthetic":true,"types":[]},{"text":"impl !Sync for SstFileReader","synthetic":true,"types":[]},{"text":"impl !Sync for SstFileWriter","synthetic":true,"types":[]},{"text":"impl !Sync for ExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl !Sync for SequentialFile","synthetic":true,"types":[]},{"text":"impl !Sync for Cache","synthetic":true,"types":[]},{"text":"impl !Sync for MemoryAllocator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for HistogramData","synthetic":true,"types":[]},{"text":"impl !Sync for BlockBasedOptions","synthetic":true,"types":[]},{"text":"impl !Sync for UnsafeSnap","synthetic":true,"types":[]},{"text":"impl !Sync for ReadOptions","synthetic":true,"types":[]},{"text":"impl !Sync for WriteOptions","synthetic":true,"types":[]},{"text":"impl !Sync for CompactOptions","synthetic":true,"types":[]},{"text":"impl !Sync for CompactionOptions","synthetic":true,"types":[]},{"text":"impl !Sync for DBOptions","synthetic":true,"types":[]},{"text":"impl !Sync for ColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ColumnFamilyDescriptor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for CColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl !Sync for FlushOptions","synthetic":true,"types":[]},{"text":"impl !Sync for IngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl !Sync for EnvOptions","synthetic":true,"types":[]},{"text":"impl !Sync for RestoreOptions","synthetic":true,"types":[]},{"text":"impl !Sync for FifoCompactionOptions","synthetic":true,"types":[]},{"text":"impl !Sync for LRUCacheOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SstPartitionerRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SstPartitionerContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for TablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl !Sync for TablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl !Sync for TablePropertiesKey","synthetic":true,"types":[]},{"text":"impl !Sync for TableProperties","synthetic":true,"types":[]},{"text":"impl !Sync for UserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Sync for DB","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Deref&lt;Target = DB&gt; + Send + Sync&gt; Sync for Snapshot&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Env","synthetic":false,"types":[]},{"text":"impl Sync for RateLimiter","synthetic":false,"types":[]}];
implementors["rusoto_core"] = [{"text":"impl&lt;E&gt; Sync for RusotoError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for EventStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for HttpResponse","synthetic":true,"types":[]},{"text":"impl Sync for BufferedHttpResponse","synthetic":true,"types":[]},{"text":"impl Sync for HttpDispatchError","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for HttpClient&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for HttpConfig","synthetic":true,"types":[]},{"text":"impl Sync for TlsError","synthetic":true,"types":[]}];
implementors["rusoto_credential"] = [{"text":"impl Sync for ContainerProvider","synthetic":true,"types":[]},{"text":"impl Sync for EnvironmentProvider","synthetic":true,"types":[]},{"text":"impl Sync for InstanceMetadataProvider","synthetic":true,"types":[]},{"text":"impl Sync for ProfileProvider","synthetic":true,"types":[]},{"text":"impl Sync for Secret","synthetic":true,"types":[]},{"text":"impl Sync for StaticProvider","synthetic":true,"types":[]},{"text":"impl Sync for AwsCredentials","synthetic":true,"types":[]},{"text":"impl Sync for CredentialsError","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for AutoRefreshingProvider&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DefaultCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Sync for ChainProvider","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Sync for Variable&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rusoto_kms"] = [{"text":"impl Sync for AliasListEntry","synthetic":true,"types":[]},{"text":"impl Sync for CancelKeyDeletionRequest","synthetic":true,"types":[]},{"text":"impl Sync for CancelKeyDeletionResponse","synthetic":true,"types":[]},{"text":"impl Sync for ConnectCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Sync for ConnectCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Sync for CreateAliasRequest","synthetic":true,"types":[]},{"text":"impl Sync for CreateCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Sync for CreateCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Sync for CreateGrantRequest","synthetic":true,"types":[]},{"text":"impl Sync for CreateGrantResponse","synthetic":true,"types":[]},{"text":"impl Sync for CreateKeyRequest","synthetic":true,"types":[]},{"text":"impl Sync for CreateKeyResponse","synthetic":true,"types":[]},{"text":"impl Sync for CustomKeyStoresListEntry","synthetic":true,"types":[]},{"text":"impl Sync for DecryptRequest","synthetic":true,"types":[]},{"text":"impl Sync for DecryptResponse","synthetic":true,"types":[]},{"text":"impl Sync for DeleteAliasRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Sync for DeleteImportedKeyMaterialRequest","synthetic":true,"types":[]},{"text":"impl Sync for DescribeCustomKeyStoresRequest","synthetic":true,"types":[]},{"text":"impl Sync for DescribeCustomKeyStoresResponse","synthetic":true,"types":[]},{"text":"impl Sync for DescribeKeyRequest","synthetic":true,"types":[]},{"text":"impl Sync for DescribeKeyResponse","synthetic":true,"types":[]},{"text":"impl Sync for DisableKeyRequest","synthetic":true,"types":[]},{"text":"impl Sync for DisableKeyRotationRequest","synthetic":true,"types":[]},{"text":"impl Sync for DisconnectCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Sync for DisconnectCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Sync for EnableKeyRequest","synthetic":true,"types":[]},{"text":"impl Sync for EnableKeyRotationRequest","synthetic":true,"types":[]},{"text":"impl Sync for EncryptRequest","synthetic":true,"types":[]},{"text":"impl Sync for EncryptResponse","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyPairRequest","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyPairResponse","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyPairWithoutPlaintextRequest","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyPairWithoutPlaintextResponse","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyRequest","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyResponse","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyWithoutPlaintextRequest","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyWithoutPlaintextResponse","synthetic":true,"types":[]},{"text":"impl Sync for GenerateRandomRequest","synthetic":true,"types":[]},{"text":"impl Sync for GenerateRandomResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetKeyPolicyRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetKeyPolicyResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetKeyRotationStatusRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetKeyRotationStatusResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetParametersForImportRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetParametersForImportResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetPublicKeyRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetPublicKeyResponse","synthetic":true,"types":[]},{"text":"impl Sync for GrantConstraints","synthetic":true,"types":[]},{"text":"impl Sync for GrantListEntry","synthetic":true,"types":[]},{"text":"impl Sync for ImportKeyMaterialRequest","synthetic":true,"types":[]},{"text":"impl Sync for ImportKeyMaterialResponse","synthetic":true,"types":[]},{"text":"impl Sync for KeyListEntry","synthetic":true,"types":[]},{"text":"impl Sync for KeyMetadata","synthetic":true,"types":[]},{"text":"impl Sync for ListAliasesRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListAliasesResponse","synthetic":true,"types":[]},{"text":"impl Sync for ListGrantsRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListGrantsResponse","synthetic":true,"types":[]},{"text":"impl Sync for ListKeyPoliciesRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListKeyPoliciesResponse","synthetic":true,"types":[]},{"text":"impl Sync for ListKeysRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListKeysResponse","synthetic":true,"types":[]},{"text":"impl Sync for ListResourceTagsRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListResourceTagsResponse","synthetic":true,"types":[]},{"text":"impl Sync for ListRetirableGrantsRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutKeyPolicyRequest","synthetic":true,"types":[]},{"text":"impl Sync for ReEncryptRequest","synthetic":true,"types":[]},{"text":"impl Sync for ReEncryptResponse","synthetic":true,"types":[]},{"text":"impl Sync for RetireGrantRequest","synthetic":true,"types":[]},{"text":"impl Sync for RevokeGrantRequest","synthetic":true,"types":[]},{"text":"impl Sync for ScheduleKeyDeletionRequest","synthetic":true,"types":[]},{"text":"impl Sync for ScheduleKeyDeletionResponse","synthetic":true,"types":[]},{"text":"impl Sync for SignRequest","synthetic":true,"types":[]},{"text":"impl Sync for SignResponse","synthetic":true,"types":[]},{"text":"impl Sync for Tag","synthetic":true,"types":[]},{"text":"impl Sync for TagResourceRequest","synthetic":true,"types":[]},{"text":"impl Sync for UntagResourceRequest","synthetic":true,"types":[]},{"text":"impl Sync for UpdateAliasRequest","synthetic":true,"types":[]},{"text":"impl Sync for UpdateCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Sync for UpdateCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Sync for UpdateKeyDescriptionRequest","synthetic":true,"types":[]},{"text":"impl Sync for VerifyRequest","synthetic":true,"types":[]},{"text":"impl Sync for VerifyResponse","synthetic":true,"types":[]},{"text":"impl Sync for KmsClient","synthetic":true,"types":[]},{"text":"impl Sync for CancelKeyDeletionError","synthetic":true,"types":[]},{"text":"impl Sync for ConnectCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Sync for CreateAliasError","synthetic":true,"types":[]},{"text":"impl Sync for CreateCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Sync for CreateGrantError","synthetic":true,"types":[]},{"text":"impl Sync for CreateKeyError","synthetic":true,"types":[]},{"text":"impl Sync for DecryptError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteAliasError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteImportedKeyMaterialError","synthetic":true,"types":[]},{"text":"impl Sync for DescribeCustomKeyStoresError","synthetic":true,"types":[]},{"text":"impl Sync for DescribeKeyError","synthetic":true,"types":[]},{"text":"impl Sync for DisableKeyError","synthetic":true,"types":[]},{"text":"impl Sync for DisableKeyRotationError","synthetic":true,"types":[]},{"text":"impl Sync for DisconnectCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Sync for EnableKeyError","synthetic":true,"types":[]},{"text":"impl Sync for EnableKeyRotationError","synthetic":true,"types":[]},{"text":"impl Sync for EncryptError","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyError","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyPairError","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyPairWithoutPlaintextError","synthetic":true,"types":[]},{"text":"impl Sync for GenerateDataKeyWithoutPlaintextError","synthetic":true,"types":[]},{"text":"impl Sync for GenerateRandomError","synthetic":true,"types":[]},{"text":"impl Sync for GetKeyPolicyError","synthetic":true,"types":[]},{"text":"impl Sync for GetKeyRotationStatusError","synthetic":true,"types":[]},{"text":"impl Sync for GetParametersForImportError","synthetic":true,"types":[]},{"text":"impl Sync for GetPublicKeyError","synthetic":true,"types":[]},{"text":"impl Sync for ImportKeyMaterialError","synthetic":true,"types":[]},{"text":"impl Sync for ListAliasesError","synthetic":true,"types":[]},{"text":"impl Sync for ListGrantsError","synthetic":true,"types":[]},{"text":"impl Sync for ListKeyPoliciesError","synthetic":true,"types":[]},{"text":"impl Sync for ListKeysError","synthetic":true,"types":[]},{"text":"impl Sync for ListResourceTagsError","synthetic":true,"types":[]},{"text":"impl Sync for ListRetirableGrantsError","synthetic":true,"types":[]},{"text":"impl Sync for PutKeyPolicyError","synthetic":true,"types":[]},{"text":"impl Sync for ReEncryptError","synthetic":true,"types":[]},{"text":"impl Sync for RetireGrantError","synthetic":true,"types":[]},{"text":"impl Sync for RevokeGrantError","synthetic":true,"types":[]},{"text":"impl Sync for ScheduleKeyDeletionError","synthetic":true,"types":[]},{"text":"impl Sync for SignError","synthetic":true,"types":[]},{"text":"impl Sync for TagResourceError","synthetic":true,"types":[]},{"text":"impl Sync for UntagResourceError","synthetic":true,"types":[]},{"text":"impl Sync for UpdateAliasError","synthetic":true,"types":[]},{"text":"impl Sync for UpdateCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Sync for UpdateKeyDescriptionError","synthetic":true,"types":[]},{"text":"impl Sync for VerifyError","synthetic":true,"types":[]}];
implementors["rusoto_s3"] = [{"text":"impl Sync for AbortIncompleteMultipartUpload","synthetic":true,"types":[]},{"text":"impl Sync for AbortIncompleteMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AbortMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Sync for AbortMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Sync for AccelerateConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for AccelerateConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AccessControlPolicy","synthetic":true,"types":[]},{"text":"impl Sync for AccessControlPolicySerializer","synthetic":true,"types":[]},{"text":"impl Sync for AccessControlTranslation","synthetic":true,"types":[]},{"text":"impl Sync for AccessControlTranslationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AccountIdSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AllowQuotedRecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AllowedHeaderSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AllowedHeadersSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AllowedMethodSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AllowedMethodsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AllowedOriginSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AllowedOriginsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsAndOperator","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsExportDestination","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsExportDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsFilter","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsFilterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsIdSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsS3BucketDestination","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for AnalyticsS3ExportFileFormatSerializer","synthetic":true,"types":[]},{"text":"impl Sync for BodySerializer","synthetic":true,"types":[]},{"text":"impl Sync for Bucket","synthetic":true,"types":[]},{"text":"impl Sync for BucketAccelerateStatusSerializer","synthetic":true,"types":[]},{"text":"impl Sync for BucketLifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for BucketLifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for BucketLocationConstraintSerializer","synthetic":true,"types":[]},{"text":"impl Sync for BucketLoggingStatus","synthetic":true,"types":[]},{"text":"impl Sync for BucketLoggingStatusSerializer","synthetic":true,"types":[]},{"text":"impl Sync for BucketLogsPermissionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for BucketNameSerializer","synthetic":true,"types":[]},{"text":"impl Sync for BucketVersioningStatusSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CORSConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for CORSConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CORSRule","synthetic":true,"types":[]},{"text":"impl Sync for CORSRuleSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CORSRulesSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CSVInput","synthetic":true,"types":[]},{"text":"impl Sync for CSVInputSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CSVOutput","synthetic":true,"types":[]},{"text":"impl Sync for CSVOutputSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CloudFunctionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CloudFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for CloudFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CloudFunctionInvocationRoleSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CommentsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CommonPrefix","synthetic":true,"types":[]},{"text":"impl Sync for CompleteMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Sync for CompleteMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Sync for CompletedMultipartUpload","synthetic":true,"types":[]},{"text":"impl Sync for CompletedMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CompletedPart","synthetic":true,"types":[]},{"text":"impl Sync for CompletedPartSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CompletedPartListSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CompressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Condition","synthetic":true,"types":[]},{"text":"impl Sync for ConditionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ContinuationEvent","synthetic":true,"types":[]},{"text":"impl Sync for CopyObjectOutput","synthetic":true,"types":[]},{"text":"impl Sync for CopyObjectRequest","synthetic":true,"types":[]},{"text":"impl Sync for CopyObjectResult","synthetic":true,"types":[]},{"text":"impl Sync for CopyPartResult","synthetic":true,"types":[]},{"text":"impl Sync for CreateBucketConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for CreateBucketConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for CreateBucketOutput","synthetic":true,"types":[]},{"text":"impl Sync for CreateBucketRequest","synthetic":true,"types":[]},{"text":"impl Sync for CreateMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Sync for CreateMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Sync for DateSerializer","synthetic":true,"types":[]},{"text":"impl Sync for DaysSerializer","synthetic":true,"types":[]},{"text":"impl Sync for DaysAfterInitiationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for DefaultRetention","synthetic":true,"types":[]},{"text":"impl Sync for DefaultRetentionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Delete","synthetic":true,"types":[]},{"text":"impl Sync for DeleteSerializer","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteMarkerEntry","synthetic":true,"types":[]},{"text":"impl Sync for DeleteMarkerReplication","synthetic":true,"types":[]},{"text":"impl Sync for DeleteMarkerReplicationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for DeleteMarkerReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Sync for DeleteObjectOutput","synthetic":true,"types":[]},{"text":"impl Sync for DeleteObjectRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Sync for DeleteObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeleteObjectsOutput","synthetic":true,"types":[]},{"text":"impl Sync for DeleteObjectsRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeletePublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Sync for DeletedObject","synthetic":true,"types":[]},{"text":"impl Sync for DelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for DescriptionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Destination","synthetic":true,"types":[]},{"text":"impl Sync for DestinationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for DisplayNameSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ETagSerializer","synthetic":true,"types":[]},{"text":"impl Sync for EmailAddressSerializer","synthetic":true,"types":[]},{"text":"impl Sync for EnableRequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl Sync for EncodingTypeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Encryption","synthetic":true,"types":[]},{"text":"impl Sync for EncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for EncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for EncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for EndSerializer","synthetic":true,"types":[]},{"text":"impl Sync for EndEvent","synthetic":true,"types":[]},{"text":"impl Sync for S3Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorDocument","synthetic":true,"types":[]},{"text":"impl Sync for ErrorDocumentSerializer","synthetic":true,"types":[]},{"text":"impl Sync for EventSerializer","synthetic":true,"types":[]},{"text":"impl Sync for EventListSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ExistingObjectReplication","synthetic":true,"types":[]},{"text":"impl Sync for ExistingObjectReplicationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ExistingObjectReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ExpirationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ExpiredObjectDeleteMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ExposeHeaderSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ExposeHeadersSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ExpressionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ExpressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for FetchOwnerSerializer","synthetic":true,"types":[]},{"text":"impl Sync for FieldDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for FileHeaderInfoSerializer","synthetic":true,"types":[]},{"text":"impl Sync for FilterRule","synthetic":true,"types":[]},{"text":"impl Sync for FilterRuleSerializer","synthetic":true,"types":[]},{"text":"impl Sync for FilterRuleListSerializer","synthetic":true,"types":[]},{"text":"impl Sync for FilterRuleNameSerializer","synthetic":true,"types":[]},{"text":"impl Sync for FilterRuleValueSerializer","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketAccelerateConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketAclOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketAclRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketAnalyticsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketCorsOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketEncryptionOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketInventoryConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLifecycleConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLifecycleOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLocationOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLocationRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLoggingOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketMetricsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketPolicyOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketPolicyStatusOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketPolicyStatusRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketReplicationOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketRequestPaymentOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketTaggingOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketVersioningOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketWebsiteOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectAclOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectAclRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectTorrentOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectTorrentRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetPublicAccessBlockOutput","synthetic":true,"types":[]},{"text":"impl Sync for GetPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Sync for GlacierJobParameters","synthetic":true,"types":[]},{"text":"impl Sync for GlacierJobParametersSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Grant","synthetic":true,"types":[]},{"text":"impl Sync for GrantSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Grantee","synthetic":true,"types":[]},{"text":"impl Sync for GranteeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for GrantsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for HeadBucketRequest","synthetic":true,"types":[]},{"text":"impl Sync for HeadObjectOutput","synthetic":true,"types":[]},{"text":"impl Sync for HeadObjectRequest","synthetic":true,"types":[]},{"text":"impl Sync for HostNameSerializer","synthetic":true,"types":[]},{"text":"impl Sync for HttpErrorCodeReturnedEqualsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for HttpRedirectCodeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for IDSerializer","synthetic":true,"types":[]},{"text":"impl Sync for IndexDocument","synthetic":true,"types":[]},{"text":"impl Sync for IndexDocumentSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Initiator","synthetic":true,"types":[]},{"text":"impl Sync for InputSerialization","synthetic":true,"types":[]},{"text":"impl Sync for InputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventoryConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for InventoryConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventoryDestination","synthetic":true,"types":[]},{"text":"impl Sync for InventoryDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventoryEncryption","synthetic":true,"types":[]},{"text":"impl Sync for InventoryEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventoryFilter","synthetic":true,"types":[]},{"text":"impl Sync for InventoryFilterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventoryFormatSerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventoryFrequencySerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventoryIdSerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventoryIncludedObjectVersionsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventoryOptionalFieldSerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventoryOptionalFieldsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventoryS3BucketDestination","synthetic":true,"types":[]},{"text":"impl Sync for InventoryS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for InventorySchedule","synthetic":true,"types":[]},{"text":"impl Sync for InventoryScheduleSerializer","synthetic":true,"types":[]},{"text":"impl Sync for IsEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Sync for JSONInput","synthetic":true,"types":[]},{"text":"impl Sync for JSONInputSerializer","synthetic":true,"types":[]},{"text":"impl Sync for JSONOutput","synthetic":true,"types":[]},{"text":"impl Sync for JSONOutputSerializer","synthetic":true,"types":[]},{"text":"impl Sync for JSONTypeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for KMSContextSerializer","synthetic":true,"types":[]},{"text":"impl Sync for KeyMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Sync for KeyPrefixEqualsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for LambdaFunctionArnSerializer","synthetic":true,"types":[]},{"text":"impl Sync for LambdaFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for LambdaFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for LambdaFunctionConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Sync for LifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for LifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for LifecycleExpiration","synthetic":true,"types":[]},{"text":"impl Sync for LifecycleExpirationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for LifecycleRule","synthetic":true,"types":[]},{"text":"impl Sync for LifecycleRuleSerializer","synthetic":true,"types":[]},{"text":"impl Sync for LifecycleRuleAndOperator","synthetic":true,"types":[]},{"text":"impl Sync for LifecycleRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Sync for LifecycleRuleFilter","synthetic":true,"types":[]},{"text":"impl Sync for LifecycleRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for LifecycleRulesSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ListBucketAnalyticsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Sync for ListBucketAnalyticsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListBucketInventoryConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Sync for ListBucketInventoryConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListBucketMetricsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Sync for ListBucketMetricsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListBucketsOutput","synthetic":true,"types":[]},{"text":"impl Sync for ListMultipartUploadsOutput","synthetic":true,"types":[]},{"text":"impl Sync for ListMultipartUploadsRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListObjectVersionsOutput","synthetic":true,"types":[]},{"text":"impl Sync for ListObjectVersionsRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListObjectsOutput","synthetic":true,"types":[]},{"text":"impl Sync for ListObjectsRequest","synthetic":true,"types":[]},{"text":"impl Sync for ListObjectsV2Output","synthetic":true,"types":[]},{"text":"impl Sync for ListObjectsV2Request","synthetic":true,"types":[]},{"text":"impl Sync for ListPartsOutput","synthetic":true,"types":[]},{"text":"impl Sync for ListPartsRequest","synthetic":true,"types":[]},{"text":"impl Sync for LocationPrefixSerializer","synthetic":true,"types":[]},{"text":"impl Sync for LoggingEnabled","synthetic":true,"types":[]},{"text":"impl Sync for LoggingEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MFADeleteSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MarkerSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MaxAgeSecondsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MaxKeysSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MaxPartsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MaxUploadsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MetadataEntry","synthetic":true,"types":[]},{"text":"impl Sync for MetadataEntrySerializer","synthetic":true,"types":[]},{"text":"impl Sync for MetadataKeySerializer","synthetic":true,"types":[]},{"text":"impl Sync for MetadataValueSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Metrics","synthetic":true,"types":[]},{"text":"impl Sync for MetricsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MetricsAndOperator","synthetic":true,"types":[]},{"text":"impl Sync for MetricsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MetricsConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for MetricsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MetricsFilter","synthetic":true,"types":[]},{"text":"impl Sync for MetricsFilterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MetricsIdSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MetricsStatusSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MinutesSerializer","synthetic":true,"types":[]},{"text":"impl Sync for MultipartUpload","synthetic":true,"types":[]},{"text":"impl Sync for MultipartUploadIdSerializer","synthetic":true,"types":[]},{"text":"impl Sync for NoncurrentVersionExpiration","synthetic":true,"types":[]},{"text":"impl Sync for NoncurrentVersionExpirationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for NoncurrentVersionTransition","synthetic":true,"types":[]},{"text":"impl Sync for NoncurrentVersionTransitionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for NoncurrentVersionTransitionListSerializer","synthetic":true,"types":[]},{"text":"impl Sync for NotificationConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for NotificationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for NotificationConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Sync for NotificationConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Sync for NotificationConfigurationFilter","synthetic":true,"types":[]},{"text":"impl Sync for NotificationConfigurationFilterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for NotificationIdSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Object","synthetic":true,"types":[]},{"text":"impl Sync for ObjectCannedACLSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ObjectIdentifier","synthetic":true,"types":[]},{"text":"impl Sync for ObjectIdentifierSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ObjectIdentifierListSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ObjectKeySerializer","synthetic":true,"types":[]},{"text":"impl Sync for ObjectLockConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for ObjectLockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ObjectLockEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ObjectLockLegalHold","synthetic":true,"types":[]},{"text":"impl Sync for ObjectLockLegalHoldSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ObjectLockLegalHoldStatusSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ObjectLockRetention","synthetic":true,"types":[]},{"text":"impl Sync for ObjectLockRetentionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ObjectLockRetentionModeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ObjectLockRule","synthetic":true,"types":[]},{"text":"impl Sync for ObjectLockRuleSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ObjectVersion","synthetic":true,"types":[]},{"text":"impl Sync for ObjectVersionIdSerializer","synthetic":true,"types":[]},{"text":"impl Sync for OutputLocation","synthetic":true,"types":[]},{"text":"impl Sync for OutputLocationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for OutputSerialization","synthetic":true,"types":[]},{"text":"impl Sync for OutputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Owner","synthetic":true,"types":[]},{"text":"impl Sync for OwnerSerializer","synthetic":true,"types":[]},{"text":"impl Sync for OwnerOverrideSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ParquetInput","synthetic":true,"types":[]},{"text":"impl Sync for ParquetInputSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Part","synthetic":true,"types":[]},{"text":"impl Sync for PartNumberSerializer","synthetic":true,"types":[]},{"text":"impl Sync for PartNumberMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Sync for PayerSerializer","synthetic":true,"types":[]},{"text":"impl Sync for PermissionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for PolicyStatus","synthetic":true,"types":[]},{"text":"impl Sync for PrefixSerializer","synthetic":true,"types":[]},{"text":"impl Sync for PrioritySerializer","synthetic":true,"types":[]},{"text":"impl Sync for Progress","synthetic":true,"types":[]},{"text":"impl Sync for ProgressEvent","synthetic":true,"types":[]},{"text":"impl Sync for ProtocolSerializer","synthetic":true,"types":[]},{"text":"impl Sync for PublicAccessBlockConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for PublicAccessBlockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketAclRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketNotificationRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectAclOutput","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectAclRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectOutput","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Sync for PutPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Sync for QueueArnSerializer","synthetic":true,"types":[]},{"text":"impl Sync for QueueConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for QueueConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for QueueConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Sync for QueueConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Sync for QueueConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Sync for QuietSerializer","synthetic":true,"types":[]},{"text":"impl Sync for QuoteCharacterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for QuoteEscapeCharacterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for QuoteFieldsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for RecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for RecordsEvent","synthetic":true,"types":[]},{"text":"impl Sync for Redirect","synthetic":true,"types":[]},{"text":"impl Sync for RedirectSerializer","synthetic":true,"types":[]},{"text":"impl Sync for RedirectAllRequestsTo","synthetic":true,"types":[]},{"text":"impl Sync for RedirectAllRequestsToSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplaceKeyPrefixWithSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplaceKeyWithSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplicaKmsKeyIDSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationRule","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationRuleSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationRuleAndOperator","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationRuleFilter","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationRuleStatusSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationRulesSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationTime","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationTimeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationTimeStatusSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationTimeValue","synthetic":true,"types":[]},{"text":"impl Sync for ReplicationTimeValueSerializer","synthetic":true,"types":[]},{"text":"impl Sync for RequestPaymentConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for RequestPaymentConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for RequestProgress","synthetic":true,"types":[]},{"text":"impl Sync for RequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ResponseCacheControlSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ResponseContentDispositionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ResponseContentEncodingSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ResponseContentLanguageSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ResponseContentTypeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ResponseExpiresSerializer","synthetic":true,"types":[]},{"text":"impl Sync for RestoreObjectOutput","synthetic":true,"types":[]},{"text":"impl Sync for RestoreObjectRequest","synthetic":true,"types":[]},{"text":"impl Sync for RestoreRequest","synthetic":true,"types":[]},{"text":"impl Sync for RestoreRequestSerializer","synthetic":true,"types":[]},{"text":"impl Sync for RestoreRequestTypeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for RoleSerializer","synthetic":true,"types":[]},{"text":"impl Sync for RoutingRule","synthetic":true,"types":[]},{"text":"impl Sync for RoutingRuleSerializer","synthetic":true,"types":[]},{"text":"impl Sync for RoutingRulesSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Rule","synthetic":true,"types":[]},{"text":"impl Sync for RuleSerializer","synthetic":true,"types":[]},{"text":"impl Sync for RulesSerializer","synthetic":true,"types":[]},{"text":"impl Sync for S3KeyFilter","synthetic":true,"types":[]},{"text":"impl Sync for S3KeyFilterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for S3Location","synthetic":true,"types":[]},{"text":"impl Sync for S3LocationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for SSEKMS","synthetic":true,"types":[]},{"text":"impl Sync for SSEKMSSerializer","synthetic":true,"types":[]},{"text":"impl Sync for SSEKMSKeyIdSerializer","synthetic":true,"types":[]},{"text":"impl Sync for SSES3","synthetic":true,"types":[]},{"text":"impl Sync for SSES3Serializer","synthetic":true,"types":[]},{"text":"impl Sync for ScanRange","synthetic":true,"types":[]},{"text":"impl Sync for ScanRangeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for SelectObjectContentOutput","synthetic":true,"types":[]},{"text":"impl Sync for SelectObjectContentRequest","synthetic":true,"types":[]},{"text":"impl Sync for SelectObjectContentRequestSerializer","synthetic":true,"types":[]},{"text":"impl Sync for SelectParameters","synthetic":true,"types":[]},{"text":"impl Sync for SelectParametersSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ServerSideEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ServerSideEncryptionByDefault","synthetic":true,"types":[]},{"text":"impl Sync for ServerSideEncryptionByDefaultSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ServerSideEncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for ServerSideEncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ServerSideEncryptionRule","synthetic":true,"types":[]},{"text":"impl Sync for ServerSideEncryptionRuleSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ServerSideEncryptionRulesSerializer","synthetic":true,"types":[]},{"text":"impl Sync for SettingSerializer","synthetic":true,"types":[]},{"text":"impl Sync for SourceSelectionCriteria","synthetic":true,"types":[]},{"text":"impl Sync for SourceSelectionCriteriaSerializer","synthetic":true,"types":[]},{"text":"impl Sync for SseKmsEncryptedObjects","synthetic":true,"types":[]},{"text":"impl Sync for SseKmsEncryptedObjectsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for SseKmsEncryptedObjectsStatusSerializer","synthetic":true,"types":[]},{"text":"impl Sync for StartSerializer","synthetic":true,"types":[]},{"text":"impl Sync for StartAfterSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Stats","synthetic":true,"types":[]},{"text":"impl Sync for StatsEvent","synthetic":true,"types":[]},{"text":"impl Sync for StorageClassSerializer","synthetic":true,"types":[]},{"text":"impl Sync for StorageClassAnalysis","synthetic":true,"types":[]},{"text":"impl Sync for StorageClassAnalysisSerializer","synthetic":true,"types":[]},{"text":"impl Sync for StorageClassAnalysisDataExport","synthetic":true,"types":[]},{"text":"impl Sync for StorageClassAnalysisDataExportSerializer","synthetic":true,"types":[]},{"text":"impl Sync for StorageClassAnalysisSchemaVersionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for SuffixSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Tag","synthetic":true,"types":[]},{"text":"impl Sync for TagSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TagSetSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Tagging","synthetic":true,"types":[]},{"text":"impl Sync for TaggingSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TargetBucketSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TargetGrant","synthetic":true,"types":[]},{"text":"impl Sync for TargetGrantSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TargetGrantsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TargetPrefixSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TierSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TokenSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TopicArnSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TopicConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for TopicConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TopicConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Sync for TopicConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TopicConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Sync for Transition","synthetic":true,"types":[]},{"text":"impl Sync for TransitionSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TransitionListSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TransitionStorageClassSerializer","synthetic":true,"types":[]},{"text":"impl Sync for TypeSerializer","synthetic":true,"types":[]},{"text":"impl Sync for URISerializer","synthetic":true,"types":[]},{"text":"impl Sync for UploadIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Sync for UploadPartCopyOutput","synthetic":true,"types":[]},{"text":"impl Sync for UploadPartCopyRequest","synthetic":true,"types":[]},{"text":"impl Sync for UploadPartOutput","synthetic":true,"types":[]},{"text":"impl Sync for UploadPartRequest","synthetic":true,"types":[]},{"text":"impl Sync for UserMetadataSerializer","synthetic":true,"types":[]},{"text":"impl Sync for ValueSerializer","synthetic":true,"types":[]},{"text":"impl Sync for VersionIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Sync for VersioningConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for VersioningConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for WebsiteConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for WebsiteConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Sync for YearsSerializer","synthetic":true,"types":[]},{"text":"impl Sync for S3Client","synthetic":true,"types":[]},{"text":"impl Sync for SelectObjectContentEventStreamItem","synthetic":true,"types":[]},{"text":"impl Sync for AbortMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Sync for CompleteMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Sync for CopyObjectError","synthetic":true,"types":[]},{"text":"impl Sync for CreateBucketError","synthetic":true,"types":[]},{"text":"impl Sync for CreateMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketCorsError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteObjectError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Sync for DeleteObjectsError","synthetic":true,"types":[]},{"text":"impl Sync for DeletePublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketAclError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketCorsError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLocationError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketLoggingError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketNotificationError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketPolicyStatusError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketVersioningError","synthetic":true,"types":[]},{"text":"impl Sync for GetBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectError","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectAclError","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectRetentionError","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectTorrentError","synthetic":true,"types":[]},{"text":"impl Sync for GetPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Sync for HeadBucketError","synthetic":true,"types":[]},{"text":"impl Sync for HeadObjectError","synthetic":true,"types":[]},{"text":"impl Sync for ListBucketAnalyticsConfigurationsError","synthetic":true,"types":[]},{"text":"impl Sync for ListBucketInventoryConfigurationsError","synthetic":true,"types":[]},{"text":"impl Sync for ListBucketMetricsConfigurationsError","synthetic":true,"types":[]},{"text":"impl Sync for ListBucketsError","synthetic":true,"types":[]},{"text":"impl Sync for ListMultipartUploadsError","synthetic":true,"types":[]},{"text":"impl Sync for ListObjectVersionsError","synthetic":true,"types":[]},{"text":"impl Sync for ListObjectsError","synthetic":true,"types":[]},{"text":"impl Sync for ListObjectsV2Error","synthetic":true,"types":[]},{"text":"impl Sync for ListPartsError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketAclError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketCorsError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketLoggingError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketNotificationError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketVersioningError","synthetic":true,"types":[]},{"text":"impl Sync for PutBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectError","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectAclError","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectRetentionError","synthetic":true,"types":[]},{"text":"impl Sync for PutObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Sync for PutPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Sync for RestoreObjectError","synthetic":true,"types":[]},{"text":"impl Sync for SelectObjectContentError","synthetic":true,"types":[]},{"text":"impl Sync for UploadPartError","synthetic":true,"types":[]},{"text":"impl Sync for UploadPartCopyError","synthetic":true,"types":[]},{"text":"impl Sync for PreSignedRequestOption","synthetic":true,"types":[]}];
implementors["rusoto_signature"] = [{"text":"impl Sync for ParseRegionError","synthetic":true,"types":[]},{"text":"impl Sync for Region","synthetic":true,"types":[]},{"text":"impl Sync for SignedRequest","synthetic":true,"types":[]},{"text":"impl Sync for SignedRequestPayload","synthetic":true,"types":[]},{"text":"impl Sync for ByteStream","synthetic":true,"types":[]}];
implementors["rusoto_sts"] = [{"text":"impl Sync for StsAssumeRoleSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Sync for StsSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Sync for StsWebIdentityFederationSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Sync for WebIdentityProvider","synthetic":true,"types":[]},{"text":"impl Sync for AssumeRoleRequest","synthetic":true,"types":[]},{"text":"impl Sync for AssumeRoleResponse","synthetic":true,"types":[]},{"text":"impl Sync for AssumeRoleWithSAMLRequest","synthetic":true,"types":[]},{"text":"impl Sync for AssumeRoleWithSAMLResponse","synthetic":true,"types":[]},{"text":"impl Sync for AssumeRoleWithWebIdentityRequest","synthetic":true,"types":[]},{"text":"impl Sync for AssumeRoleWithWebIdentityResponse","synthetic":true,"types":[]},{"text":"impl Sync for AssumedRoleUser","synthetic":true,"types":[]},{"text":"impl Sync for Credentials","synthetic":true,"types":[]},{"text":"impl Sync for DecodeAuthorizationMessageRequest","synthetic":true,"types":[]},{"text":"impl Sync for DecodeAuthorizationMessageResponse","synthetic":true,"types":[]},{"text":"impl Sync for FederatedUser","synthetic":true,"types":[]},{"text":"impl Sync for GetAccessKeyInfoRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetAccessKeyInfoResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetCallerIdentityRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetCallerIdentityResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetFederationTokenRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetFederationTokenResponse","synthetic":true,"types":[]},{"text":"impl Sync for GetSessionTokenRequest","synthetic":true,"types":[]},{"text":"impl Sync for GetSessionTokenResponse","synthetic":true,"types":[]},{"text":"impl Sync for PolicyDescriptorType","synthetic":true,"types":[]},{"text":"impl Sync for Tag","synthetic":true,"types":[]},{"text":"impl Sync for StsClient","synthetic":true,"types":[]},{"text":"impl Sync for AssumeRoleError","synthetic":true,"types":[]},{"text":"impl Sync for AssumeRoleWithSAMLError","synthetic":true,"types":[]},{"text":"impl Sync for AssumeRoleWithWebIdentityError","synthetic":true,"types":[]},{"text":"impl Sync for DecodeAuthorizationMessageError","synthetic":true,"types":[]},{"text":"impl Sync for GetAccessKeyInfoError","synthetic":true,"types":[]},{"text":"impl Sync for GetCallerIdentityError","synthetic":true,"types":[]},{"text":"impl Sync for GetFederationTokenError","synthetic":true,"types":[]},{"text":"impl Sync for GetSessionTokenError","synthetic":true,"types":[]}];
implementors["rusoto_util"] = [{"text":"impl Sync for DefaultCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Sync for CredentialsProvider","synthetic":true,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl&lt;'a&gt; Sync for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TryDemangleError","synthetic":true,"types":[]}];
implementors["rustyline"] = [{"text":"impl&lt;'h&gt; Sync for Context&lt;'h&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Sync for Editor&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; Sync for Iter&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for At","synthetic":true,"types":[]},{"text":"impl Sync for CharSearch","synthetic":true,"types":[]},{"text":"impl Sync for Cmd","synthetic":true,"types":[]},{"text":"impl Sync for Movement","synthetic":true,"types":[]},{"text":"impl Sync for Word","synthetic":true,"types":[]},{"text":"impl Sync for KeyPress","synthetic":true,"types":[]},{"text":"impl Sync for Pair","synthetic":true,"types":[]},{"text":"impl Sync for FilenameCompleter","synthetic":true,"types":[]},{"text":"impl Sync for Quote","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for BellStyle","synthetic":true,"types":[]},{"text":"impl Sync for HistoryDuplicates","synthetic":true,"types":[]},{"text":"impl Sync for CompletionType","synthetic":true,"types":[]},{"text":"impl Sync for EditMode","synthetic":true,"types":[]},{"text":"impl Sync for ColorMode","synthetic":true,"types":[]},{"text":"impl Sync for OutputStreamType","synthetic":true,"types":[]},{"text":"impl Sync for ReadlineError","synthetic":true,"types":[]},{"text":"impl !Sync for MatchingBracketHighlighter","synthetic":true,"types":[]},{"text":"impl Sync for HistoryHinter","synthetic":true,"types":[]},{"text":"impl Sync for History","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Direction","synthetic":true,"types":[]},{"text":"impl !Sync for LineBuffer","synthetic":true,"types":[]},{"text":"impl Sync for WordAction","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; !Sync for ValidationContext&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Sync for MatchingBracketValidator","synthetic":true,"types":[]},{"text":"impl Sync for ValidationResult","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Sync for Buffer","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl Sync for Handle","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Sync for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Always","synthetic":true,"types":[]}];
implementors["security"] = [{"text":"impl Sync for SecurityConfig","synthetic":true,"types":[]},{"text":"impl Sync for SecurityManager","synthetic":true,"types":[]},{"text":"impl Sync for Fetcher","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for VersionReq","synthetic":true,"types":[]},{"text":"impl Sync for Identifier","synthetic":true,"types":[]},{"text":"impl Sync for SemVerError","synthetic":true,"types":[]},{"text":"impl Sync for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for Identifier","synthetic":true,"types":[]},{"text":"impl Sync for VersionReq","synthetic":true,"types":[]},{"text":"impl Sync for Predicate","synthetic":true,"types":[]},{"text":"impl Sync for WildcardVersion","synthetic":true,"types":[]},{"text":"impl Sync for Op","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Sync for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Sync for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Sync for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Sync for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_ignored"] = [{"text":"impl&lt;'a, 'b, D, F&gt; Sync for Deserializer&lt;'a, 'b, D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Path&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Sync for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Sync for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Sync for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Number","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CharEscape","synthetic":true,"types":[]},{"text":"impl Sync for Serializer","synthetic":true,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl&lt;'de&gt; Sync for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Sync for Serializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Sync for SeqSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Sync for TupleSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Sync for TupleStructSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Sync for TupleVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Sync for MapSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Sync for StructSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Sync for StructVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["serde_with"] = [{"text":"impl Sync for SpaceSeparator","synthetic":true,"types":[]},{"text":"impl Sync for CommaSeparator","synthetic":true,"types":[]},{"text":"impl&lt;Sep&gt; Sync for StringWithSeparator&lt;Sep&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Sep: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Sync for Sha224","synthetic":true,"types":[]},{"text":"impl Sync for Sha256","synthetic":true,"types":[]},{"text":"impl Sync for Sha384","synthetic":true,"types":[]},{"text":"impl Sync for Sha512","synthetic":true,"types":[]},{"text":"impl Sync for Sha512Trunc224","synthetic":true,"types":[]},{"text":"impl Sync for Sha512Trunc256","synthetic":true,"types":[]}];
implementors["shlex"] = [{"text":"impl&lt;'a&gt; Sync for Shlex&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal"] = [{"text":"impl Sync for Trap","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Sync for SigId","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Sync for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog"] = [{"text":"impl&lt;D&gt; Sync for Logger&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Discard","synthetic":true,"types":[]},{"text":"impl&lt;D, F&gt; Sync for Filter&lt;D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for LevelFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, E&gt; Sync for MapError&lt;D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D1, D2&gt; Sync for Duplicate&lt;D1, D2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D2: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for Fuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for IgnoreResult&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RecordStatic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; Sync for FnValue&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for PushFnValueSerializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for PushFnValue&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Sync for SingleKV&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Sync for OwnedKV&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for BorrowedKV&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for OwnedKVList","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for MutexDrainError&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Drain&gt;::Err: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Level","synthetic":true,"types":[]},{"text":"impl Sync for FilterLevel","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["slog_async"] = [{"text":"impl&lt;D&gt; Sync for AsyncCoreBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AsyncGuard","synthetic":true,"types":[]},{"text":"impl Sync for AsyncCore","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for AsyncBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Async","synthetic":true,"types":[]},{"text":"impl !Sync for AsyncError","synthetic":true,"types":[]},{"text":"impl Sync for OverflowStrategy","synthetic":true,"types":[]}];
implementors["slog_json"] = [{"text":"impl&lt;W&gt; !Sync for Json&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for JsonBuilder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog_term"] = [{"text":"impl&lt;D&gt; Sync for FullFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for FullFormatBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Sync for CompactFormat&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for CompactFormatBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !Sync for PlainDecorator&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !Sync for PlainRecordDecorator&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for PlainSyncDecorator&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for PlainSyncRecordDecorator&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TermDecoratorBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for TermDecorator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TermRecordDecorator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TestStdoutWriter","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A&gt; Sync for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync + Array&gt; Sync for Drain&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Sync for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send + Sync&gt; Sync for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync&gt; Sync for Once&lt;T&gt;","synthetic":false,"types":[]}];
implementors["sst_importer"] = [{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for IMPORT_RPC_DURATION","synthetic":true,"types":[]},{"text":"impl Sync for IMPORT_UPLOAD_CHUNK_BYTES","synthetic":true,"types":[]},{"text":"impl Sync for IMPORT_UPLOAD_CHUNK_DURATION","synthetic":true,"types":[]},{"text":"impl Sync for IMPORT_WRITE_CHUNK_DURATION","synthetic":true,"types":[]},{"text":"impl Sync for IMPORTER_DOWNLOAD_DURATION","synthetic":true,"types":[]},{"text":"impl Sync for IMPORTER_DOWNLOAD_BYTES","synthetic":true,"types":[]},{"text":"impl Sync for IMPORTER_INGEST_DURATION","synthetic":true,"types":[]},{"text":"impl Sync for IMPORTER_INGEST_BYTES","synthetic":true,"types":[]},{"text":"impl Sync for IMPORTER_ERROR_VEC","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ImportModeSwitcherInner&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ImportModeSwitcher&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ImportModeDBOptions","synthetic":true,"types":[]},{"text":"impl Sync for ImportModeCFOptions","synthetic":true,"types":[]},{"text":"impl Sync for SSTImporter","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SSTWriter&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as SstExt&gt;::SstWriter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ImportDir","synthetic":true,"types":[]},{"text":"impl Sync for ImportPath","synthetic":true,"types":[]},{"text":"impl !Sync for ImportFile","synthetic":true,"types":[]}];
implementors["str_stack"] = [{"text":"impl Sync for StrStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Writer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl Sync for StrSimError","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Sync for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Sync for Attribute","synthetic":true,"types":[]},{"text":"impl !Sync for MetaList","synthetic":true,"types":[]},{"text":"impl !Sync for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Sync for Field","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Sync for Variant","synthetic":true,"types":[]},{"text":"impl !Sync for VisCrate","synthetic":true,"types":[]},{"text":"impl !Sync for VisPublic","synthetic":true,"types":[]},{"text":"impl !Sync for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Sync for Arm","synthetic":true,"types":[]},{"text":"impl !Sync for FieldValue","synthetic":true,"types":[]},{"text":"impl !Sync for Label","synthetic":true,"types":[]},{"text":"impl !Sync for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Sync for ExprArray","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBox","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCast","synthetic":true,"types":[]},{"text":"impl !Sync for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Sync for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Sync for ExprField","synthetic":true,"types":[]},{"text":"impl !Sync for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIf","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLet","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLit","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprParen","synthetic":true,"types":[]},{"text":"impl !Sync for ExprPath","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRange","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReference","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Sync for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTry","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Sync for ExprType","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Sync for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Sync for ExprYield","synthetic":true,"types":[]},{"text":"impl !Sync for Index","synthetic":true,"types":[]},{"text":"impl !Sync for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Sync for ConstParam","synthetic":true,"types":[]},{"text":"impl !Sync for Generics","synthetic":true,"types":[]},{"text":"impl !Sync for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateType","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBound","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParam","synthetic":true,"types":[]},{"text":"impl !Sync for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Sync for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Sync for ItemFn","synthetic":true,"types":[]},{"text":"impl !Sync for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Sync for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMod","synthetic":true,"types":[]},{"text":"impl !Sync for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Sync for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Sync for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Sync for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Sync for ItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Sync for ItemUse","synthetic":true,"types":[]},{"text":"impl !Sync for Receiver","synthetic":true,"types":[]},{"text":"impl !Sync for Signature","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Sync for UseGlob","synthetic":true,"types":[]},{"text":"impl !Sync for UseGroup","synthetic":true,"types":[]},{"text":"impl !Sync for UseName","synthetic":true,"types":[]},{"text":"impl !Sync for UsePath","synthetic":true,"types":[]},{"text":"impl !Sync for UseRename","synthetic":true,"types":[]},{"text":"impl !Sync for File","synthetic":true,"types":[]},{"text":"impl !Sync for Lifetime","synthetic":true,"types":[]},{"text":"impl !Sync for LitBool","synthetic":true,"types":[]},{"text":"impl !Sync for LitByte","synthetic":true,"types":[]},{"text":"impl !Sync for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Sync for LitChar","synthetic":true,"types":[]},{"text":"impl !Sync for LitFloat","synthetic":true,"types":[]},{"text":"impl !Sync for LitInt","synthetic":true,"types":[]},{"text":"impl !Sync for LitStr","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for DataEnum","synthetic":true,"types":[]},{"text":"impl !Sync for DataStruct","synthetic":true,"types":[]},{"text":"impl !Sync for DataUnion","synthetic":true,"types":[]},{"text":"impl !Sync for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Sync for Block","synthetic":true,"types":[]},{"text":"impl !Sync for Local","synthetic":true,"types":[]},{"text":"impl !Sync for Abi","synthetic":true,"types":[]},{"text":"impl !Sync for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Sync for TypeArray","synthetic":true,"types":[]},{"text":"impl !Sync for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Sync for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Sync for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Sync for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Sync for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TypeNever","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParen","synthetic":true,"types":[]},{"text":"impl !Sync for TypePath","synthetic":true,"types":[]},{"text":"impl !Sync for TypePtr","synthetic":true,"types":[]},{"text":"impl !Sync for TypeReference","synthetic":true,"types":[]},{"text":"impl !Sync for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Sync for Variadic","synthetic":true,"types":[]},{"text":"impl !Sync for FieldPat","synthetic":true,"types":[]},{"text":"impl !Sync for PatBox","synthetic":true,"types":[]},{"text":"impl !Sync for PatIdent","synthetic":true,"types":[]},{"text":"impl !Sync for PatLit","synthetic":true,"types":[]},{"text":"impl !Sync for PatMacro","synthetic":true,"types":[]},{"text":"impl !Sync for PatOr","synthetic":true,"types":[]},{"text":"impl !Sync for PatPath","synthetic":true,"types":[]},{"text":"impl !Sync for PatRange","synthetic":true,"types":[]},{"text":"impl !Sync for PatReference","synthetic":true,"types":[]},{"text":"impl !Sync for PatRest","synthetic":true,"types":[]},{"text":"impl !Sync for PatSlice","synthetic":true,"types":[]},{"text":"impl !Sync for PatStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatTuple","synthetic":true,"types":[]},{"text":"impl !Sync for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatType","synthetic":true,"types":[]},{"text":"impl !Sync for PatWild","synthetic":true,"types":[]},{"text":"impl !Sync for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Binding","synthetic":true,"types":[]},{"text":"impl !Sync for Constraint","synthetic":true,"types":[]},{"text":"impl !Sync for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Path","synthetic":true,"types":[]},{"text":"impl !Sync for PathSegment","synthetic":true,"types":[]},{"text":"impl !Sync for QSelf","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl !Sync for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for Meta","synthetic":true,"types":[]},{"text":"impl !Sync for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Sync for Fields","synthetic":true,"types":[]},{"text":"impl !Sync for Visibility","synthetic":true,"types":[]},{"text":"impl !Sync for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Sync for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Sync for Expr","synthetic":true,"types":[]},{"text":"impl !Sync for Member","synthetic":true,"types":[]},{"text":"impl !Sync for GenericParam","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Sync for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Sync for FnArg","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItem","synthetic":true,"types":[]},{"text":"impl !Sync for Item","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItem","synthetic":true,"types":[]},{"text":"impl !Sync for UseTree","synthetic":true,"types":[]},{"text":"impl !Sync for Lit","synthetic":true,"types":[]},{"text":"impl Sync for StrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Sync for Data","synthetic":true,"types":[]},{"text":"impl !Sync for BinOp","synthetic":true,"types":[]},{"text":"impl !Sync for UnOp","synthetic":true,"types":[]},{"text":"impl !Sync for Stmt","synthetic":true,"types":[]},{"text":"impl !Sync for ReturnType","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for Pat","synthetic":true,"types":[]},{"text":"impl !Sync for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Sync for PathArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Underscore","synthetic":true,"types":[]},{"text":"impl !Sync for Abstract","synthetic":true,"types":[]},{"text":"impl !Sync for As","synthetic":true,"types":[]},{"text":"impl !Sync for Async","synthetic":true,"types":[]},{"text":"impl !Sync for Auto","synthetic":true,"types":[]},{"text":"impl !Sync for Await","synthetic":true,"types":[]},{"text":"impl !Sync for Become","synthetic":true,"types":[]},{"text":"impl !Sync for Box","synthetic":true,"types":[]},{"text":"impl !Sync for Break","synthetic":true,"types":[]},{"text":"impl !Sync for Const","synthetic":true,"types":[]},{"text":"impl !Sync for Continue","synthetic":true,"types":[]},{"text":"impl !Sync for Crate","synthetic":true,"types":[]},{"text":"impl !Sync for Default","synthetic":true,"types":[]},{"text":"impl !Sync for Do","synthetic":true,"types":[]},{"text":"impl !Sync for Dyn","synthetic":true,"types":[]},{"text":"impl !Sync for Else","synthetic":true,"types":[]},{"text":"impl !Sync for Enum","synthetic":true,"types":[]},{"text":"impl !Sync for Extern","synthetic":true,"types":[]},{"text":"impl !Sync for Final","synthetic":true,"types":[]},{"text":"impl !Sync for Fn","synthetic":true,"types":[]},{"text":"impl !Sync for For","synthetic":true,"types":[]},{"text":"impl !Sync for If","synthetic":true,"types":[]},{"text":"impl !Sync for Impl","synthetic":true,"types":[]},{"text":"impl !Sync for In","synthetic":true,"types":[]},{"text":"impl !Sync for Let","synthetic":true,"types":[]},{"text":"impl !Sync for Loop","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for Match","synthetic":true,"types":[]},{"text":"impl !Sync for Mod","synthetic":true,"types":[]},{"text":"impl !Sync for Move","synthetic":true,"types":[]},{"text":"impl !Sync for Mut","synthetic":true,"types":[]},{"text":"impl !Sync for Override","synthetic":true,"types":[]},{"text":"impl !Sync for Priv","synthetic":true,"types":[]},{"text":"impl !Sync for Pub","synthetic":true,"types":[]},{"text":"impl !Sync for Ref","synthetic":true,"types":[]},{"text":"impl !Sync for Return","synthetic":true,"types":[]},{"text":"impl !Sync for SelfType","synthetic":true,"types":[]},{"text":"impl !Sync for SelfValue","synthetic":true,"types":[]},{"text":"impl !Sync for Static","synthetic":true,"types":[]},{"text":"impl !Sync for Struct","synthetic":true,"types":[]},{"text":"impl !Sync for Super","synthetic":true,"types":[]},{"text":"impl !Sync for Trait","synthetic":true,"types":[]},{"text":"impl !Sync for Try","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for Typeof","synthetic":true,"types":[]},{"text":"impl !Sync for Union","synthetic":true,"types":[]},{"text":"impl !Sync for Unsafe","synthetic":true,"types":[]},{"text":"impl !Sync for Unsized","synthetic":true,"types":[]},{"text":"impl !Sync for Use","synthetic":true,"types":[]},{"text":"impl !Sync for Virtual","synthetic":true,"types":[]},{"text":"impl !Sync for Where","synthetic":true,"types":[]},{"text":"impl !Sync for While","synthetic":true,"types":[]},{"text":"impl !Sync for Yield","synthetic":true,"types":[]},{"text":"impl !Sync for Add","synthetic":true,"types":[]},{"text":"impl !Sync for AddEq","synthetic":true,"types":[]},{"text":"impl !Sync for And","synthetic":true,"types":[]},{"text":"impl !Sync for AndAnd","synthetic":true,"types":[]},{"text":"impl !Sync for AndEq","synthetic":true,"types":[]},{"text":"impl !Sync for At","synthetic":true,"types":[]},{"text":"impl !Sync for Bang","synthetic":true,"types":[]},{"text":"impl !Sync for Caret","synthetic":true,"types":[]},{"text":"impl !Sync for CaretEq","synthetic":true,"types":[]},{"text":"impl !Sync for Colon","synthetic":true,"types":[]},{"text":"impl !Sync for Colon2","synthetic":true,"types":[]},{"text":"impl !Sync for Comma","synthetic":true,"types":[]},{"text":"impl !Sync for Div","synthetic":true,"types":[]},{"text":"impl !Sync for DivEq","synthetic":true,"types":[]},{"text":"impl !Sync for Dollar","synthetic":true,"types":[]},{"text":"impl !Sync for Dot","synthetic":true,"types":[]},{"text":"impl !Sync for Dot2","synthetic":true,"types":[]},{"text":"impl !Sync for Dot3","synthetic":true,"types":[]},{"text":"impl !Sync for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Sync for Eq","synthetic":true,"types":[]},{"text":"impl !Sync for EqEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ge","synthetic":true,"types":[]},{"text":"impl !Sync for Gt","synthetic":true,"types":[]},{"text":"impl !Sync for Le","synthetic":true,"types":[]},{"text":"impl !Sync for Lt","synthetic":true,"types":[]},{"text":"impl !Sync for MulEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ne","synthetic":true,"types":[]},{"text":"impl !Sync for Or","synthetic":true,"types":[]},{"text":"impl !Sync for OrEq","synthetic":true,"types":[]},{"text":"impl !Sync for OrOr","synthetic":true,"types":[]},{"text":"impl !Sync for Pound","synthetic":true,"types":[]},{"text":"impl !Sync for Question","synthetic":true,"types":[]},{"text":"impl !Sync for RArrow","synthetic":true,"types":[]},{"text":"impl !Sync for LArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Rem","synthetic":true,"types":[]},{"text":"impl !Sync for RemEq","synthetic":true,"types":[]},{"text":"impl !Sync for FatArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Semi","synthetic":true,"types":[]},{"text":"impl !Sync for Shl","synthetic":true,"types":[]},{"text":"impl !Sync for ShlEq","synthetic":true,"types":[]},{"text":"impl !Sync for Shr","synthetic":true,"types":[]},{"text":"impl !Sync for ShrEq","synthetic":true,"types":[]},{"text":"impl !Sync for Star","synthetic":true,"types":[]},{"text":"impl !Sync for Sub","synthetic":true,"types":[]},{"text":"impl !Sync for SubEq","synthetic":true,"types":[]},{"text":"impl !Sync for Tilde","synthetic":true,"types":[]},{"text":"impl !Sync for Brace","synthetic":true,"types":[]},{"text":"impl !Sync for Bracket","synthetic":true,"types":[]},{"text":"impl !Sync for Paren","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Sync for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Nothing","synthetic":true,"types":[]}];
implementors["syn_mid"] = [{"text":"impl !Sync for Receiver","synthetic":true,"types":[]},{"text":"impl !Sync for PatIdent","synthetic":true,"types":[]},{"text":"impl !Sync for PatPath","synthetic":true,"types":[]},{"text":"impl !Sync for PatReference","synthetic":true,"types":[]},{"text":"impl !Sync for PatStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatTuple","synthetic":true,"types":[]},{"text":"impl !Sync for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatType","synthetic":true,"types":[]},{"text":"impl !Sync for PatWild","synthetic":true,"types":[]},{"text":"impl !Sync for FieldPat","synthetic":true,"types":[]},{"text":"impl !Sync for Block","synthetic":true,"types":[]},{"text":"impl !Sync for ItemFn","synthetic":true,"types":[]},{"text":"impl !Sync for Signature","synthetic":true,"types":[]},{"text":"impl !Sync for FnArg","synthetic":true,"types":[]},{"text":"impl !Sync for Pat","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; !Sync for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AddBounds","synthetic":true,"types":[]},{"text":"impl Sync for BindStyle","synthetic":true,"types":[]}];
implementors["sysinfo"] = [{"text":"impl Sync for DiskUsage","synthetic":true,"types":[]},{"text":"impl Sync for LoadAvg","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for NetworksIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RefreshKind","synthetic":true,"types":[]},{"text":"impl Sync for User","synthetic":true,"types":[]},{"text":"impl Sync for Component","synthetic":true,"types":[]},{"text":"impl Sync for Disk","synthetic":true,"types":[]},{"text":"impl Sync for NetworkData","synthetic":true,"types":[]},{"text":"impl Sync for Networks","synthetic":true,"types":[]},{"text":"impl Sync for Process","synthetic":true,"types":[]},{"text":"impl Sync for Processor","synthetic":true,"types":[]},{"text":"impl Sync for System","synthetic":true,"types":[]},{"text":"impl Sync for DiskType","synthetic":true,"types":[]},{"text":"impl Sync for Signal","synthetic":true,"types":[]},{"text":"impl Sync for ProcessStatus","synthetic":true,"types":[]}];
implementors["take_mut"] = [{"text":"impl&lt;'s&gt; !Sync for Scope&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'm, T, F&gt; !Sync for Hole&lt;'c, 'm, T, F&gt;","synthetic":true,"types":[]}];
implementors["tame_gcs"] = [{"text":"impl&lt;T&gt; Sync for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Scopes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StandardQueryParameters&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Conditionals","synthetic":true,"types":[]},{"text":"impl Sync for StorageClass","synthetic":true,"types":[]},{"text":"impl Sync for PredefinedAcl","synthetic":true,"types":[]},{"text":"impl Sync for Projection","synthetic":true,"types":[]},{"text":"impl Sync for Object","synthetic":true,"types":[]},{"text":"impl Sync for Metadata","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DeleteObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DeleteObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DownloadObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DownloadObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for GetObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GetObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for InsertObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for InsertResponse","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Multipart&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ListResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PatchObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PatchObjectResponse","synthetic":true,"types":[]},{"text":"impl Sync for HttpError","synthetic":true,"types":[]},{"text":"impl Sync for HttpStatusError","synthetic":true,"types":[]},{"text":"impl Sync for IoError","synthetic":true,"types":[]},{"text":"impl Sync for JsonError","synthetic":true,"types":[]},{"text":"impl Sync for ApiErrorInner","synthetic":true,"types":[]},{"text":"impl Sync for ApiError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Sync for UrlSigner&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SignedUrlOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ServiceAccount","synthetic":true,"types":[]},{"text":"impl Sync for DigestAlgorithm","synthetic":true,"types":[]},{"text":"impl Sync for SigningAlgorithm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Key&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BucketName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ObjectName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ObjectId&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tame_oauth"] = [{"text":"impl Sync for Token","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ServiceAccountInfo","synthetic":true,"types":[]},{"text":"impl Sync for ServiceAccountAccess","synthetic":true,"types":[]},{"text":"impl Sync for RequestReason","synthetic":true,"types":[]},{"text":"impl Sync for TokenOrRequest","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl Sync for TempDir","synthetic":true,"types":[]},{"text":"impl Sync for NamedTempFile","synthetic":true,"types":[]},{"text":"impl Sync for PathPersistError","synthetic":true,"types":[]},{"text":"impl Sync for PersistError","synthetic":true,"types":[]},{"text":"impl Sync for TempPath","synthetic":true,"types":[]},{"text":"impl Sync for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["term"] = [{"text":"impl Sync for Attr","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for TermInfo","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TerminfoTerminal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Variables","synthetic":true,"types":[]},{"text":"impl Sync for Param","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["test_coprocessor"] = [{"text":"impl Sync for Column","synthetic":true,"types":[]},{"text":"impl Sync for ColumnBuilder","synthetic":true,"types":[]},{"text":"impl Sync for DAGSelect","synthetic":true,"types":[]},{"text":"impl Sync for DAGChunkSpliter","synthetic":true,"types":[]},{"text":"impl Sync for ProductTable","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for Insert&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for Delete&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Store&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Table","synthetic":true,"types":[]},{"text":"impl Sync for TableBuilder","synthetic":true,"types":[]}];
implementors["test_pd"] = [{"text":"impl&lt;C&gt; !Sync for Server&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AlreadyBootstrapped","synthetic":true,"types":[]},{"text":"impl Sync for Incompatible","synthetic":true,"types":[]},{"text":"impl Sync for LeaderChange","synthetic":true,"types":[]},{"text":"impl Sync for NotRetry","synthetic":true,"types":[]},{"text":"impl Sync for Retry","synthetic":true,"types":[]},{"text":"impl Sync for Service","synthetic":true,"types":[]},{"text":"impl Sync for Split","synthetic":true,"types":[]},{"text":"impl Sync for Roulette","synthetic":true,"types":[]},{"text":"impl Sync for Inner","synthetic":true,"types":[]},{"text":"impl Sync for Inner","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for PdMock&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["test_raftstore"] = [{"text":"impl&lt;T&gt; Sync for Cluster&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for ChannelTransportCore","synthetic":true,"types":[]},{"text":"impl Sync for ChannelTransport","synthetic":true,"types":[]},{"text":"impl !Sync for NodeCluster","synthetic":true,"types":[]},{"text":"impl Sync for TestPdClient","synthetic":true,"types":[]},{"text":"impl Sync for MockRaftStoreRouter","synthetic":true,"types":[]},{"text":"impl Sync for AddressMap","synthetic":true,"types":[]},{"text":"impl !Sync for ServerCluster","synthetic":true,"types":[]},{"text":"impl Sync for MessageTypeNotifier","synthetic":true,"types":[]},{"text":"impl Sync for DropPacketFilter","synthetic":true,"types":[]},{"text":"impl Sync for DelayFilter","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for SimulateTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for DefaultFilterFactory&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for CloneFilterFactory&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PartitionFilterFactory","synthetic":true,"types":[]},{"text":"impl Sync for IsolationFilterFactory","synthetic":true,"types":[]},{"text":"impl Sync for RegionPacketFilter","synthetic":true,"types":[]},{"text":"impl Sync for SnapshotFilter","synthetic":true,"types":[]},{"text":"impl Sync for CollectSnapshotFilter","synthetic":true,"types":[]},{"text":"impl Sync for DropSnapshotFilter","synthetic":true,"types":[]},{"text":"impl Sync for RecvSnapshotFilter","synthetic":true,"types":[]},{"text":"impl Sync for LeadingFilter","synthetic":true,"types":[]},{"text":"impl Sync for LeadingDuplicatedSnapshotFilter","synthetic":true,"types":[]},{"text":"impl Sync for RandomLatencyFilter","synthetic":true,"types":[]},{"text":"impl Sync for LeaseReadFilter","synthetic":true,"types":[]},{"text":"impl Sync for DropMessageFilter","synthetic":true,"types":[]},{"text":"impl Sync for Direction","synthetic":true,"types":[]},{"text":"impl Sync for Store","synthetic":true,"types":[]},{"text":"impl Sync for Cluster","synthetic":true,"types":[]},{"text":"impl Sync for SchedulePolicy","synthetic":true,"types":[]},{"text":"impl Sync for Operator","synthetic":true,"types":[]},{"text":"impl !Sync for ServerMeta","synthetic":true,"types":[]},{"text":"impl Sync for PartitionFilter","synthetic":true,"types":[]},{"text":"impl Sync for TEST_CONFIG","synthetic":true,"types":[]}];
implementors["test_sst_importer"] = [{"text":"impl Sync for TestPropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl Sync for TestPropertiesCollector","synthetic":true,"types":[]}];
implementors["test_storage"] = [{"text":"impl&lt;E&gt; Sync for AssertionStorage&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SyncTestStorageBuilder&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SyncTestStorage&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["test_util"] = [{"text":"impl Sync for KvGenerator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CaseTraceLogger","synthetic":true,"types":[]},{"text":"impl Sync for Never","synthetic":true,"types":[]},{"text":"impl Sync for Nope","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Sync for CaseLifeWatcher&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FailpointHook","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl Sync for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl Sync for NoHyphenation","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Sync for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Sync for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; Sync for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Sync for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Sync for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tidb_query_aggr"] = [{"text":"impl Sync for AllAggrDefinitionParser","synthetic":true,"types":[]},{"text":"impl Sync for AggrFnDefinitionParserAvg","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AggrFnAvg&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AggrFnStateAvg&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BitAnd","synthetic":true,"types":[]},{"text":"impl Sync for BitOr","synthetic":true,"types":[]},{"text":"impl Sync for BitXor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AggrFnDefinitionParserBitOp&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AggrFnBitOp&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AggrFnStateBitOp&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AggrFnDefinitionParserCount","synthetic":true,"types":[]},{"text":"impl Sync for AggrFnCount","synthetic":true,"types":[]},{"text":"impl Sync for AggrFnStateCount","synthetic":true,"types":[]},{"text":"impl Sync for AggrFnDefinitionParserFirst","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AggrFnFirst&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AggrFnStateFirst&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as EvaluableRef&lt;'static&gt;&gt;::EvaluableType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Max","synthetic":true,"types":[]},{"text":"impl Sync for Min","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AggrFnDefinitionParserExtremum&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Sync for AggFnExtremumForBytes&lt;C, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Sync for AggFnStateExtremum4Bytes&lt;C, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for AggFnExtremumForEnum&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for AggFnStateExtremumForEnum&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Sync for AggFnExtremum&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Sync for AggFnStateExtremum&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as EvaluableRef&lt;'static&gt;&gt;::EvaluableType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AggrFnDefinitionParserSum","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AggrFnSum&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AggrFnStateSum&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AggrFnSumForEnum","synthetic":true,"types":[]},{"text":"impl Sync for AggrFnStateSumForEnum","synthetic":true,"types":[]}];
implementors["tidb_query_codegen"] = [{"text":"impl !Sync for AggrFunctionStateExpr","synthetic":true,"types":[]},{"text":"impl !Sync for AggrFunctionOpts","synthetic":true,"types":[]},{"text":"impl !Sync for state","synthetic":true,"types":[]},{"text":"impl !Sync for RpnFnAttr","synthetic":true,"types":[]},{"text":"impl !Sync for RpnFnRefEvaluableTypeWithOption","synthetic":true,"types":[]},{"text":"impl !Sync for RpnFnEvaluableType","synthetic":true,"types":[]},{"text":"impl !Sync for RpnFnSignatureParam","synthetic":true,"types":[]},{"text":"impl !Sync for VargsRpnFnSignatureParam","synthetic":true,"types":[]},{"text":"impl !Sync for RpnFnSignatureReturnGuardType","synthetic":true,"types":[]},{"text":"impl !Sync for RpnFnSignatureReturnType","synthetic":true,"types":[]},{"text":"impl !Sync for ValidatorFnGenerator","synthetic":true,"types":[]},{"text":"impl !Sync for VargsRpnFn","synthetic":true,"types":[]},{"text":"impl !Sync for RawVargsRpnFn","synthetic":true,"types":[]},{"text":"impl !Sync for NormalRpnFn","synthetic":true,"types":[]},{"text":"impl !Sync for RpnFnRefEvaluableType","synthetic":true,"types":[]},{"text":"impl !Sync for Option","synthetic":true,"types":[]}];
implementors["tidb_query_common"] = [{"text":"impl Sync for StorageError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for EvaluateError","synthetic":true,"types":[]},{"text":"impl Sync for ErrorInner","synthetic":true,"types":[]},{"text":"impl Sync for ExecSummary","synthetic":true,"types":[]},{"text":"impl Sync for ExecSummaryCollectorEnabled","synthetic":true,"types":[]},{"text":"impl Sync for ExecSummaryCollectorDisabled","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; Sync for WithSummaryCollector&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ExecuteStats","synthetic":true,"types":[]},{"text":"impl !Sync for LocalCoprExecutorCountInner","synthetic":true,"types":[]},{"text":"impl Sync for LocalCoprExecutorCount","synthetic":true,"types":[]},{"text":"impl Sync for COPR_EXECUTOR_COUNT","synthetic":true,"types":[]},{"text":"impl Sync for EXECUTOR_COUNT_METRICS","synthetic":true,"types":[]},{"text":"impl Sync for ExecutorName","synthetic":true,"types":[]},{"text":"impl Sync for LocalCoprExecutorCountDelegator","synthetic":true,"types":[]},{"text":"impl Sync for IntervalRange","synthetic":true,"types":[]},{"text":"impl Sync for PointRange","synthetic":true,"types":[]},{"text":"impl Sync for Range","synthetic":true,"types":[]},{"text":"impl Sync for RangesIterator","synthetic":true,"types":[]},{"text":"impl Sync for IterStatus","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RangesScanner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RangesScannerOptions&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FixtureStorage","synthetic":true,"types":[]}];
implementors["tidb_query_datatype"] = [{"text":"impl Sync for FieldTypeBuilder","synthetic":true,"types":[]},{"text":"impl Sync for FieldTypeFlag","synthetic":true,"types":[]},{"text":"impl Sync for EvalType","synthetic":true,"types":[]},{"text":"impl Sync for Collation","synthetic":true,"types":[]},{"text":"impl Sync for FieldTypeTp","synthetic":true,"types":[]},{"text":"impl Sync for DataTypeError","synthetic":true,"types":[]},{"text":"impl Sync for LazyBatchColumnVec","synthetic":true,"types":[]},{"text":"impl Sync for LazyBatchColumn","synthetic":true,"types":[]},{"text":"impl Sync for Chunk","synthetic":true,"types":[]},{"text":"impl Sync for Column","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Row&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RowIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Sync for SortKey&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CharsetBinary","synthetic":true,"types":[]},{"text":"impl Sync for CharsetUtf8mb4","synthetic":true,"types":[]},{"text":"impl Sync for CollatorBinary","synthetic":true,"types":[]},{"text":"impl Sync for CollatorLatin1Bin","synthetic":true,"types":[]},{"text":"impl Sync for CollatorUtf8Mb4Bin","synthetic":true,"types":[]},{"text":"impl Sync for CollatorUtf8Mb4BinNoPadding","synthetic":true,"types":[]},{"text":"impl Sync for CollatorUtf8Mb4GeneralCi","synthetic":true,"types":[]},{"text":"impl Sync for CollatorUtf8Mb4UnicodeCi","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BitAndIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BitVec","synthetic":true,"types":[]},{"text":"impl Sync for BytesGuard","synthetic":true,"types":[]},{"text":"impl Sync for BytesWriter","synthetic":true,"types":[]},{"text":"impl Sync for ChunkedVecBytes","synthetic":true,"types":[]},{"text":"impl Sync for PartialBytesWriter","synthetic":true,"types":[]},{"text":"impl Sync for ChunkedVecEnum","synthetic":true,"types":[]},{"text":"impl Sync for ChunkedVecJson","synthetic":true,"types":[]},{"text":"impl Sync for ChunkedVecSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ChunkedVecSized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LogicalRows&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ScalarValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ScalarValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for VectorValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LogicalRowsIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Datum","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for PathExpression","synthetic":true,"types":[]},{"text":"impl Sync for ModifyType","synthetic":true,"types":[]},{"text":"impl Sync for Tz","synthetic":true,"types":[]},{"text":"impl Sync for BinaryLiteral","synthetic":true,"types":[]},{"text":"impl Sync for Decimal","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Res&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RoundMode","synthetic":true,"types":[]},{"text":"impl Sync for Duration","synthetic":true,"types":[]},{"text":"impl Sync for Enum","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EnumRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for JsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Json","synthetic":true,"types":[]},{"text":"impl Sync for JsonType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for BinaryModifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PathLeg","synthetic":true,"types":[]},{"text":"impl Sync for JsonVisitor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MergeUnit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Set","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SetRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Time","synthetic":true,"types":[]},{"text":"impl Sync for TimeArgs","synthetic":true,"types":[]},{"text":"impl Sync for TimeType","synthetic":true,"types":[]},{"text":"impl Sync for TzOffset","synthetic":true,"types":[]},{"text":"impl Sync for WeekMode","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for LEBytes&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RowSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Column","synthetic":true,"types":[]},{"text":"impl Sync for RowColMeta","synthetic":true,"types":[]},{"text":"impl Sync for RowColsDict","synthetic":true,"types":[]},{"text":"impl Sync for SqlMode","synthetic":true,"types":[]},{"text":"impl Sync for Flag","synthetic":true,"types":[]},{"text":"impl Sync for EvalConfig","synthetic":true,"types":[]},{"text":"impl Sync for EvalWarnings","synthetic":true,"types":[]},{"text":"impl Sync for EvalContext","synthetic":true,"types":[]}];
implementors["tidb_query_executors"] = [{"text":"impl&lt;Src&gt; !Sync for BatchFastHashAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for BatchIndexScanExecutor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Sync for BatchLimitExecutor&lt;Src&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !Sync for BatchSelectionExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !Sync for BatchSimpleAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !Sync for BatchSlowHashAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !Sync for BatchStreamAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for BatchTableScanExecutor&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !Sync for BatchTopNExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for FastHashAggregationImpl","synthetic":true,"types":[]},{"text":"impl Sync for Groups","synthetic":true,"types":[]},{"text":"impl Sync for IndexScanExecutorImpl","synthetic":true,"types":[]},{"text":"impl Sync for DecodeHandleStrategy","synthetic":true,"types":[]},{"text":"impl Sync for BatchExecuteResult","synthetic":true,"types":[]},{"text":"impl&lt;SS&gt; !Sync for BatchExecutorsRunner&lt;SS&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for SimpleAggregationImpl","synthetic":true,"types":[]},{"text":"impl !Sync for SlowHashAggregationImpl","synthetic":true,"types":[]},{"text":"impl !Sync for GroupKeyRefUnsafe","synthetic":true,"types":[]},{"text":"impl !Sync for BatchStreamAggregationImpl","synthetic":true,"types":[]},{"text":"impl Sync for TableScanExecutorImpl","synthetic":true,"types":[]},{"text":"impl Sync for HeapItemSourceData","synthetic":true,"types":[]},{"text":"impl !Sync for HeapItemUnsafe","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; !Sync for Entities&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src, I&gt; !Sync for AggregationExecutor&lt;Src, I&gt;","synthetic":true,"types":[]},{"text":"impl Sync for HashAggregationHelper","synthetic":true,"types":[]},{"text":"impl&lt;S, I&gt; Sync for ScanExecutor&lt;S, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, I&gt; Sync for ScanExecutorOptions&lt;S, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tidb_query_expr"] = [{"text":"impl !Sync for RpnExpression","synthetic":true,"types":[]},{"text":"impl !Sync for RpnExpressionBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for RpnExpressionNode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RpnStackNode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RpnStackNodeVectorValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RpnFnMeta","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RpnFnCallExtra&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for ScalarArg&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&gt; Sync for VectorArg&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, Rem&gt; Sync for Arg&lt;A, Rem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rem: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Null","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, E&gt; Sync for ArgConstructor&lt;'a, A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Arithmetic_Evaluator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for ArithmeticWithCtx_Evaluator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IntIntPlus","synthetic":true,"types":[]},{"text":"impl Sync for IntUintPlus","synthetic":true,"types":[]},{"text":"impl Sync for UintIntPlus","synthetic":true,"types":[]},{"text":"impl Sync for UintUintPlus","synthetic":true,"types":[]},{"text":"impl Sync for RealPlus","synthetic":true,"types":[]},{"text":"impl Sync for DecimalPlus","synthetic":true,"types":[]},{"text":"impl Sync for IntIntMinus","synthetic":true,"types":[]},{"text":"impl Sync for IntUintMinus","synthetic":true,"types":[]},{"text":"impl Sync for UintIntMinus","synthetic":true,"types":[]},{"text":"impl Sync for UintUintMinus","synthetic":true,"types":[]},{"text":"impl Sync for RealMinus","synthetic":true,"types":[]},{"text":"impl Sync for DecimalMinus","synthetic":true,"types":[]},{"text":"impl Sync for IntIntMod","synthetic":true,"types":[]},{"text":"impl Sync for IntUintMod","synthetic":true,"types":[]},{"text":"impl Sync for UintIntMod","synthetic":true,"types":[]},{"text":"impl Sync for UintUintMod","synthetic":true,"types":[]},{"text":"impl Sync for RealMod","synthetic":true,"types":[]},{"text":"impl Sync for DecimalMod","synthetic":true,"types":[]},{"text":"impl Sync for DecimalMultiply","synthetic":true,"types":[]},{"text":"impl Sync for RealMultiply","synthetic":true,"types":[]},{"text":"impl Sync for IntIntMultiply","synthetic":true,"types":[]},{"text":"impl Sync for IntUintMultiply","synthetic":true,"types":[]},{"text":"impl Sync for UintIntMultiply","synthetic":true,"types":[]},{"text":"impl Sync for UintUintMultiply","synthetic":true,"types":[]},{"text":"impl Sync for IntDivideInt","synthetic":true,"types":[]},{"text":"impl Sync for IntDivideUint","synthetic":true,"types":[]},{"text":"impl Sync for UintDivideUint","synthetic":true,"types":[]},{"text":"impl Sync for UintDivideInt","synthetic":true,"types":[]},{"text":"impl Sync for IntDivideDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for DecimalDivide","synthetic":true,"types":[]},{"text":"impl Sync for RealDivide","synthetic":true,"types":[]},{"text":"impl Sync for CastSignedIntAsUnsignedInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastIntAsIntOthers_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastRealAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastStringAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastBinaryStringAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastDecimalAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastJsonAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastSignedIntAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastSignedIntAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastUnsignedIntAsSignedOrUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastRealAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastRealAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastStringAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastBinaryStringAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastStringAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastBinaryStringAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastDecimalAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for CastAnyAsString_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CastUintAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastFloatRealAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastStringAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastUnsignedIntAsSignedOrUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastSignedIntAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastRealAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastStringAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastDecimalAsSignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastDecimalAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; Sync for CastAnyAsDecimal_Evaluator&lt;From&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CastJsonAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastBytesAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastIntAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastTimeAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastDurationAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastRealAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastBytesAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastDecimalAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastJsonAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastIntAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastRealAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastStringAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastDecimalAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastTimeAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastDurationAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastBoolAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastUintAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastStringAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CastJsonAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;From, To&gt; Sync for CastAnyAsAny_Evaluator&lt;From, To&gt;","synthetic":true,"types":[]},{"text":"impl&lt;To&gt; Sync for CastJsonAsAny_Evaluator&lt;To&gt;","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; Sync for CastAnyAsJson_Evaluator&lt;From&gt;","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; Sync for CastAnyAsBytes_Evaluator&lt;From&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CastJsonAsBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for Compare_Evaluator&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for CompareJson_Evaluator&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, F&gt; Sync for CompareBytes_Evaluator&lt;C, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Sync for BasicComparer&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for UintUintComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for UintIntComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for IntUintComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CmpOpLT","synthetic":true,"types":[]},{"text":"impl Sync for CmpOpLE","synthetic":true,"types":[]},{"text":"impl Sync for CmpOpGT","synthetic":true,"types":[]},{"text":"impl Sync for CmpOpGE","synthetic":true,"types":[]},{"text":"impl Sync for CmpOpNE","synthetic":true,"types":[]},{"text":"impl Sync for CmpOpEQ","synthetic":true,"types":[]},{"text":"impl Sync for CmpOpNullEQ","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for NormalInByHash&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for CollationAwareBytesInByHash&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for CompareInMeta&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IfNull_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IfNullJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for IfNullBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IfCondition_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IfConditionJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for IfConditionBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Md5_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Sha1_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Sha2_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Password_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for UncompressedLength_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for RandomBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for JsonDepth_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for JsonType_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for JsonUnquote_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for Like_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Pi_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Crc32_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Log1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Log2Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Log2_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Log10_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for Ceil_Evaluator&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CeilReal","synthetic":true,"types":[]},{"text":"impl Sync for CeilDecToDec","synthetic":true,"types":[]},{"text":"impl Sync for CeilIntToDec","synthetic":true,"types":[]},{"text":"impl Sync for CeilDecToInt","synthetic":true,"types":[]},{"text":"impl Sync for CeilIntToInt","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Floor_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FloorReal","synthetic":true,"types":[]},{"text":"impl Sync for FloorIntToDec","synthetic":true,"types":[]},{"text":"impl Sync for FloorDecToInt","synthetic":true,"types":[]},{"text":"impl Sync for FloorDecToDec","synthetic":true,"types":[]},{"text":"impl Sync for FloorIntToInt","synthetic":true,"types":[]},{"text":"impl Sync for AbsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for AbsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for AbsReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for AbsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Sign_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Sqrt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Radians_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Exp_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Sin_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Cos_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Tan_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Cot_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Pow_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Rand_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for RandWithSeedFirstGen_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Degrees_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Asin_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Acos_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Atan1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Atan2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Conv_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for RoundReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for RoundInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for RoundDec_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for TruncateIntWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for TruncateIntWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for TruncateRealWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for TruncateRealWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for RoundWithFracInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for RoundWithFracDec_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for RoundWithFracReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for IntWithSign","synthetic":true,"types":[]},{"text":"impl Sync for MySQLRng","synthetic":true,"types":[]},{"text":"impl Sync for InetAton_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for InetNtoa_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Inet6Aton_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Inet6Ntoa_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for IsIpv4_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for IsIpv4Compat_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for IsIpv4Mapped_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for IsIpv6_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Uuid_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for LogicalAnd_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for LogicalOr_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for LogicalXor_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for UnaryNotInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for UnaryNotReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for UnaryNotDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for UnaryMinusUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for UnaryMinusInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for UnaryMinusReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for UnaryMinusDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IsNull_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IsNullBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for IsNullJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for BitAnd_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for BitOr_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for BitXor_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for BitNeg_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for KeepNullOn","synthetic":true,"types":[]},{"text":"impl Sync for KeepNullOff","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for IntIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for RealIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for DecimalIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for IntIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for RealIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for DecimalIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LeftShift_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for RightShift_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for BitCount_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Bin_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for OctInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for OctString_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Length_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Unhex_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for BitLength_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Ord_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Ascii_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for ReverseUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for HexIntArg_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Ltrim_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Rtrim_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Lpad_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for LpadUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Rpad_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Replace_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Left_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for LeftUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Right_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Insert_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for RightUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for UpperUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Upper_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for HexStrArg_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Locate2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Reverse_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Locate3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Space_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for SubstringIndex_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Strcmp_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for InstrUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for FindInSet_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Trim1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Trim3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CharLength_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for CharLengthUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for ToBase64_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for FromBase64_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Quote_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Repeat_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Substring2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Substring3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for TrimDirection","synthetic":true,"types":[]},{"text":"impl Sync for DateFormat_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for WeekWithMode_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for WeekDay_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for DayOfWeek_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for DayOfYear_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for WeekOfYear_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for ToDays_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for ToSeconds_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for DateDiff_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for AddDatetimeAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for SubDurationAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for SubDatetimeAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for FromDays_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for MakeDate_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for MakeTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Month_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for MonthName_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Hour_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Minute_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Second_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for TimeToSec_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for MicroSecond_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for Year_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for DayOfMonth_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for DayName_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for PeriodAdd_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for PeriodDiff_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for LastDay_Evaluator","synthetic":true,"types":[]},{"text":"impl Sync for AddDurationAndDuration_Evaluator","synthetic":true,"types":[]}];
implementors["tikv"] = [{"text":"impl Sync for TitanCfConfig","synthetic":true,"types":[]},{"text":"impl Sync for DefaultCfConfig","synthetic":true,"types":[]},{"text":"impl Sync for WriteCfConfig","synthetic":true,"types":[]},{"text":"impl Sync for LockCfConfig","synthetic":true,"types":[]},{"text":"impl Sync for RaftCfConfig","synthetic":true,"types":[]},{"text":"impl Sync for VersionCfConfig","synthetic":true,"types":[]},{"text":"impl Sync for TitanDBConfig","synthetic":true,"types":[]},{"text":"impl Sync for DbConfig","synthetic":true,"types":[]},{"text":"impl Sync for RaftDefaultCfConfig","synthetic":true,"types":[]},{"text":"impl Sync for RaftDbConfig","synthetic":true,"types":[]},{"text":"impl Sync for RaftEngineConfig","synthetic":true,"types":[]},{"text":"impl Sync for DBConfigManger","synthetic":true,"types":[]},{"text":"impl Sync for MetricConfig","synthetic":true,"types":[]},{"text":"impl Sync for UnifiedReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Sync for StorageReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Sync for CoprReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Sync for ReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Sync for BackupConfig","synthetic":true,"types":[]},{"text":"impl Sync for CdcConfig","synthetic":true,"types":[]},{"text":"impl Sync for TiKvConfig","synthetic":true,"types":[]},{"text":"impl Sync for TIKVCONFIG_TYPED","synthetic":true,"types":[]},{"text":"impl Sync for ConfigController","synthetic":true,"types":[]},{"text":"impl Sync for ConfigInner","synthetic":true,"types":[]},{"text":"impl Sync for DBType","synthetic":true,"types":[]},{"text":"impl Sync for Module","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Endpoint&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReqContext","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for CachedRequestHandler","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for ChecksumContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for TiKVStorage&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Store&gt;::Scanner: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for DagHandlerBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for BatchDAGHandler","synthetic":true,"types":[]},{"text":"impl&lt;'a, PF, F&gt; Sync for ConcurrencyLimiter&lt;'a, PF, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, PF, F&gt; Sync for __ConcurrencyLimiterProjection&lt;'pin, 'a, PF, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, PF, F&gt; Sync for __ConcurrencyLimiterProjectionRef&lt;'pin, 'a, PF, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LimitationState&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Sync for Tracker&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, F&gt; Sync for __TrackerProjection&lt;'pin, 'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, F&gt; Sync for __TrackerProjectionRef&lt;'pin, 'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for COPR_REQ_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for COPR_REQ_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for COPR_REQ_HANDLE_TIME","synthetic":true,"types":[]},{"text":"impl Sync for COPR_REQ_HANDLE_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for COPR_REQ_WAIT_TIME","synthetic":true,"types":[]},{"text":"impl Sync for COPR_REQ_WAIT_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for COPR_REQ_HANDLER_BUILD_TIME","synthetic":true,"types":[]},{"text":"impl Sync for COPR_REQ_HANDLER_BUILD_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for COPR_REQ_ERROR","synthetic":true,"types":[]},{"text":"impl Sync for COPR_SCAN_KEYS","synthetic":true,"types":[]},{"text":"impl Sync for COPR_SCAN_KEYS_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for COPR_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl Sync for COPR_SCAN_DETAILS_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for COPR_ROCKSDB_PERF_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for COPR_ROCKSDB_PERF_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for COPR_DAG_REQ_COUNT","synthetic":true,"types":[]},{"text":"impl Sync for COPR_RESP_SIZE","synthetic":true,"types":[]},{"text":"impl Sync for COPR_ACQUIRE_SEMAPHORE_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for COPR_WAITING_FOR_SEMAPHORE","synthetic":true,"types":[]},{"text":"impl Sync for CopLocalMetrics","synthetic":true,"types":[]},{"text":"impl Sync for ReqTag","synthetic":true,"types":[]},{"text":"impl Sync for CF","synthetic":true,"types":[]},{"text":"impl Sync for ScanKeysKind","synthetic":true,"types":[]},{"text":"impl Sync for ScanKind","synthetic":true,"types":[]},{"text":"impl Sync for WaitType","synthetic":true,"types":[]},{"text":"impl Sync for PerfMetric","synthetic":true,"types":[]},{"text":"impl Sync for AcquireSemaphoreType","synthetic":true,"types":[]},{"text":"impl !Sync for CoprReqHistogramInner","synthetic":true,"types":[]},{"text":"impl Sync for CoprReqHistogramDelegator","synthetic":true,"types":[]},{"text":"impl Sync for CoprReqHistogram","synthetic":true,"types":[]},{"text":"impl !Sync for ReqWaitHistogramInner","synthetic":true,"types":[]},{"text":"impl Sync for ReqWaitHistogramDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for ReqWaitHistogram2Inner","synthetic":true,"types":[]},{"text":"impl Sync for ReqWaitHistogram2Delegator","synthetic":true,"types":[]},{"text":"impl Sync for ReqWaitHistogram","synthetic":true,"types":[]},{"text":"impl !Sync for PerfCounterInner","synthetic":true,"types":[]},{"text":"impl Sync for PerfCounterDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for PerfCounter2Inner","synthetic":true,"types":[]},{"text":"impl Sync for PerfCounter2Delegator","synthetic":true,"types":[]},{"text":"impl Sync for PerfCounter","synthetic":true,"types":[]},{"text":"impl !Sync for CoprScanKeysHistogramInner","synthetic":true,"types":[]},{"text":"impl Sync for CoprScanKeysHistogramDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for CoprScanKeysHistogram2Inner","synthetic":true,"types":[]},{"text":"impl Sync for CoprScanKeysHistogram2Delegator","synthetic":true,"types":[]},{"text":"impl Sync for CoprScanKeysHistogram","synthetic":true,"types":[]},{"text":"impl !Sync for CoprScanDetailsInner","synthetic":true,"types":[]},{"text":"impl Sync for CoprScanDetailsDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for CoprScanDetails2Inner","synthetic":true,"types":[]},{"text":"impl Sync for CoprScanDetails2Delegator","synthetic":true,"types":[]},{"text":"impl !Sync for CoprScanDetails3Inner","synthetic":true,"types":[]},{"text":"impl Sync for CoprScanDetails3Delegator","synthetic":true,"types":[]},{"text":"impl Sync for CoprScanDetails","synthetic":true,"types":[]},{"text":"impl Sync for CoprAcquireSemaphoreTypeCounterVec","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for FuturePoolTicker&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for AnalyzeContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for SampleBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SampleCollector","synthetic":true,"types":[]},{"text":"impl Sync for CmSketch","synthetic":true,"types":[]},{"text":"impl Sync for FmSketch","synthetic":true,"types":[]},{"text":"impl Sync for Bucket","synthetic":true,"types":[]},{"text":"impl Sync for Histogram","synthetic":true,"types":[]},{"text":"impl Sync for Tracker","synthetic":true,"types":[]},{"text":"impl Sync for TrackerState","synthetic":true,"types":[]},{"text":"impl&lt;E, Router&gt; Sync for ImportSSTService&lt;E, Router&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Router: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ReporterTicker&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ReadPool","synthetic":true,"types":[]},{"text":"impl Sync for ReadPoolHandle","synthetic":true,"types":[]},{"text":"impl Sync for ReadPoolError","synthetic":true,"types":[]},{"text":"impl Sync for UNIFIED_READ_POOL_RUNNING_TASKS","synthetic":true,"types":[]},{"text":"impl Sync for CONFIG_ROCKSDB_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for CPU_CORES_QUOTA_GAUGE","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Sync for ConnectionBuilder&lt;S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !Sync for RaftClient&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GC_COMMAND_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SNAP_TASK_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for GC_GCTASK_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for GC_GCTASK_FAIL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for RESOLVE_STORE_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for GRPC_MSG_FAIL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for GC_KEYS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for GRPC_MSG_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for GRPC_MSG_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for GRPC_MSG_HISTOGRAM_GLOBAL","synthetic":true,"types":[]},{"text":"impl Sync for GC_COMMAND_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for SNAP_TASK_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for GC_GCTASK_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for GC_GCTASK_FAIL_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for RESOLVE_STORE_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for GRPC_MSG_FAIL_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for GC_KEYS_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for SEND_SNAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for GRPC_REQ_BATCH_COMMANDS_SIZE","synthetic":true,"types":[]},{"text":"impl Sync for GRPC_RESP_BATCH_COMMANDS_SIZE","synthetic":true,"types":[]},{"text":"impl Sync for GC_EMPTY_RANGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for GC_SKIPPED_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for GC_TASK_DURATION_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for GC_TOO_BUSY_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for AUTO_GC_STATUS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for AUTO_GC_SAFE_POINT_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for AUTO_GC_PROCESSED_REGIONS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_MESSAGE_RECV_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_MESSAGE_BATCH_SIZE","synthetic":true,"types":[]},{"text":"impl Sync for REPORT_FAILURE_MSG_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_MESSAGE_FLUSH_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for RAFT_MESSAGE_DELAY_FLUSH_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for REQUEST_BATCH_SIZE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for REQUEST_BATCH_RATIO_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for ASYNC_REQUESTS_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for ASYNC_REQUESTS_DURATIONS","synthetic":true,"types":[]},{"text":"impl Sync for ASYNC_REQUESTS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for ASYNC_REQUESTS_DURATIONS_VEC","synthetic":true,"types":[]},{"text":"impl Sync for GrpcTypeKind","synthetic":true,"types":[]},{"text":"impl Sync for GcCommandKind","synthetic":true,"types":[]},{"text":"impl Sync for SnapTask","synthetic":true,"types":[]},{"text":"impl Sync for ResolveStore","synthetic":true,"types":[]},{"text":"impl Sync for GcKeysCF","synthetic":true,"types":[]},{"text":"impl Sync for GcKeysDetail","synthetic":true,"types":[]},{"text":"impl Sync for GlobalGrpcTypeKind","synthetic":true,"types":[]},{"text":"impl Sync for BatchableRequestKind","synthetic":true,"types":[]},{"text":"impl Sync for RequestStatusKind","synthetic":true,"types":[]},{"text":"impl Sync for RequestTypeKind","synthetic":true,"types":[]},{"text":"impl !Sync for GcCommandCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for GcCommandCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for GcCommandCounterVec","synthetic":true,"types":[]},{"text":"impl !Sync for SnapTaskCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for SnapTaskCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for SnapTaskCounterVec","synthetic":true,"types":[]},{"text":"impl !Sync for GcTaskCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for GcTaskCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for GcTaskCounterVec","synthetic":true,"types":[]},{"text":"impl !Sync for GcTaskFailCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for GcTaskFailCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for GcTaskFailCounterVec","synthetic":true,"types":[]},{"text":"impl !Sync for ResolveStoreCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for ResolveStoreCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for ResolveStoreCounterVec","synthetic":true,"types":[]},{"text":"impl !Sync for GrpcMsgFailCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for GrpcMsgFailCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for GrpcMsgFailCounterVec","synthetic":true,"types":[]},{"text":"impl !Sync for GcKeysCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for GcKeysCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for GcKeysCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl Sync for GcKeysCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl Sync for GcKeysCounterVec","synthetic":true,"types":[]},{"text":"impl !Sync for GrpcMsgHistogramVecInner","synthetic":true,"types":[]},{"text":"impl Sync for GrpcMsgHistogramVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for GrpcMsgHistogramVec","synthetic":true,"types":[]},{"text":"impl Sync for GrpcMsgHistogramGlobal","synthetic":true,"types":[]},{"text":"impl Sync for RequestBatchSizeHistogramVec","synthetic":true,"types":[]},{"text":"impl Sync for RequestBatchRatioHistogramVec","synthetic":true,"types":[]},{"text":"impl !Sync for AsyncRequestsCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for AsyncRequestsCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for AsyncRequestsCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl Sync for AsyncRequestsCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl Sync for AsyncRequestsCounterVec","synthetic":true,"types":[]},{"text":"impl !Sync for AsyncRequestsDurationVecInner","synthetic":true,"types":[]},{"text":"impl Sync for AsyncRequestsDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for AsyncRequestsDurationVec","synthetic":true,"types":[]},{"text":"impl Sync for Queue","synthetic":true,"types":[]},{"text":"impl Sync for BatchMessageBuffer","synthetic":true,"types":[]},{"text":"impl Sync for MessageBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SnapshotReporter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, M, B&gt; Sync for RaftCall&lt;R, M, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Sync for StreamBackEnd&lt;S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ConnectionPool","synthetic":true,"types":[]},{"text":"impl Sync for CachedQueue","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for GrpcCompressionType","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Sync for MvccInfoIterator&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RegionInfo","synthetic":true,"types":[]},{"text":"impl Sync for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; Sync for Debugger&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for MvccChecker","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl !Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for WriteCompactionFilterFactory","synthetic":true,"types":[]},{"text":"impl Sync for GcConfig","synthetic":true,"types":[]},{"text":"impl Sync for GcWorkerConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !Sync for AutoGcConfig&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, RR&gt; Sync for GcWorker&lt;E, RR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;RR: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for GcTask","synthetic":true,"types":[]},{"text":"impl Sync for LockObserverState","synthetic":true,"types":[]},{"text":"impl Sync for LockObserver","synthetic":true,"types":[]},{"text":"impl Sync for LockCollectorRunner","synthetic":true,"types":[]},{"text":"impl Sync for AppliedLockCollector","synthetic":true,"types":[]},{"text":"impl !Sync for LockCollectorTask","synthetic":true,"types":[]},{"text":"impl Sync for GcContext","synthetic":true,"types":[]},{"text":"impl Sync for GC_CONTEXT","synthetic":true,"types":[]},{"text":"impl !Sync for WriteCompactionFilter","synthetic":true,"types":[]},{"text":"impl !Sync for CompactionFilterStats","synthetic":true,"types":[]},{"text":"impl !Sync for GcManagerContext","synthetic":true,"types":[]},{"text":"impl !Sync for GcManagerHandle","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; !Sync for GcManager&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GcManagerError","synthetic":true,"types":[]},{"text":"impl Sync for GcManagerState","synthetic":true,"types":[]},{"text":"impl&lt;E, RR&gt; Sync for GcRunner&lt;E, RR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;RR: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ThreadLoad","synthetic":true,"types":[]},{"text":"impl Sync for ThreadLoadStatistics","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for LockManagerConfigManager","synthetic":true,"types":[]},{"text":"impl Sync for LockManager","synthetic":true,"types":[]},{"text":"impl Sync for Client","synthetic":true,"types":[]},{"text":"impl Sync for Locks","synthetic":true,"types":[]},{"text":"impl Sync for DetectTable","synthetic":true,"types":[]},{"text":"impl Sync for Scheduler","synthetic":true,"types":[]},{"text":"impl Sync for RoleChangeNotifier","synthetic":true,"types":[]},{"text":"impl Sync for Inner","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; !Sync for Detector&lt;S, P&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Service","synthetic":true,"types":[]},{"text":"impl Sync for Role","synthetic":true,"types":[]},{"text":"impl Sync for DetectType","synthetic":true,"types":[]},{"text":"impl !Sync for Task","synthetic":true,"types":[]},{"text":"impl Sync for TASK_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for ERROR_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for WAITER_LIFETIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for DETECT_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for WAIT_TABLE_STATUS_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for DETECTOR_LEADER_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for TASK_COUNTER_METRICS","synthetic":true,"types":[]},{"text":"impl Sync for ERROR_COUNTER_METRICS","synthetic":true,"types":[]},{"text":"impl !Sync for LocalTaskCounterInner","synthetic":true,"types":[]},{"text":"impl Sync for LocalTaskCounterDelegator","synthetic":true,"types":[]},{"text":"impl Sync for LocalTaskCounter","synthetic":true,"types":[]},{"text":"impl !Sync for LocalErrorCounterInner","synthetic":true,"types":[]},{"text":"impl Sync for LocalErrorCounterDelegator","synthetic":true,"types":[]},{"text":"impl Sync for LocalErrorCounter","synthetic":true,"types":[]},{"text":"impl Sync for WaitTableStatusGauge","synthetic":true,"types":[]},{"text":"impl !Sync for DelayInner","synthetic":true,"types":[]},{"text":"impl !Sync for Delay","synthetic":true,"types":[]},{"text":"impl !Sync for Waiter","synthetic":true,"types":[]},{"text":"impl !Sync for WaitTable","synthetic":true,"types":[]},{"text":"impl Sync for Scheduler","synthetic":true,"types":[]},{"text":"impl !Sync for WaiterManager","synthetic":true,"types":[]},{"text":"impl !Sync for Task","synthetic":true,"types":[]},{"text":"impl&lt;C, ER&gt; !Sync for Node&lt;C, ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for RaftKv&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReplicaReadLockChecker","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for CmdRes","synthetic":true,"types":[]},{"text":"impl !Sync for Task","synthetic":true,"types":[]},{"text":"impl Sync for StoreAddr","synthetic":true,"types":[]},{"text":"impl&lt;T, RR&gt; Sync for Runner&lt;T, RR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RR: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PdStoreAddrResolver","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; !Sync for Server&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for TestRaftStoreRouter","synthetic":true,"types":[]},{"text":"impl&lt;ER, T&gt; Sync for Service&lt;ER, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Service","synthetic":true,"types":[]},{"text":"impl&lt;T, E, L&gt; Sync for Service&lt;T, E, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReqBatcher","synthetic":true,"types":[]},{"text":"impl Sync for IoLoad","synthetic":true,"types":[]},{"text":"impl Sync for LogIterator","synthetic":true,"types":[]},{"text":"impl Sync for NUM_REGEX","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for NicSnapshot","synthetic":true,"types":[]},{"text":"impl Sync for BatchRespCollector","synthetic":true,"types":[]},{"text":"impl !Sync for SnapChunk","synthetic":true,"types":[]},{"text":"impl Sync for SendStat","synthetic":true,"types":[]},{"text":"impl !Sync for RecvSnapContext","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Runner&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for Task","synthetic":true,"types":[]},{"text":"impl Sync for LogLevelRequest","synthetic":true,"types":[]},{"text":"impl&lt;E, R&gt; Sync for StatusServer&lt;E, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for TlsIncoming&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, S&gt; Sync for __TlsIncomingProjection&lt;'pin, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, S&gt; Sync for __TlsIncomingProjectionRef&lt;'pin, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RaftProgress","synthetic":true,"types":[]},{"text":"impl Sync for RaftHardState","synthetic":true,"types":[]},{"text":"impl Sync for RaftSoftState","synthetic":true,"types":[]},{"text":"impl Sync for RaftStatus","synthetic":true,"types":[]},{"text":"impl Sync for Epoch","synthetic":true,"types":[]},{"text":"impl Sync for RegionPeer","synthetic":true,"types":[]},{"text":"impl Sync for RegionMergeState","synthetic":true,"types":[]},{"text":"impl Sync for RaftTruncatedState","synthetic":true,"types":[]},{"text":"impl Sync for RaftApplyState","synthetic":true,"types":[]},{"text":"impl Sync for RegionMeta","synthetic":true,"types":[]},{"text":"impl Sync for RaftProgressState","synthetic":true,"types":[]},{"text":"impl Sync for RaftStateRole","synthetic":true,"types":[]},{"text":"impl Sync for RaftPeerRole","synthetic":true,"types":[]},{"text":"impl Sync for PROFILER_MUTEX","synthetic":true,"types":[]},{"text":"impl Sync for ProfGuard","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; !Sync for ServerTransport&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CfStatistics","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for Cursor&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PerfStatisticsDelta","synthetic":true,"types":[]},{"text":"impl Sync for RocksEngine","synthetic":true,"types":[]},{"text":"impl Sync for Statistics","synthetic":true,"types":[]},{"text":"impl Sync for TestEngineBuilder","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for SnapshotStore&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PrewriteResult","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; Sync for Storage&lt;E, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; Sync for TestStorageBuilder&lt;E, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PessimisticLockRes","synthetic":true,"types":[]},{"text":"impl Sync for SecondaryLocksStatus","synthetic":true,"types":[]},{"text":"impl !Sync for StorageCallback","synthetic":true,"types":[]},{"text":"impl Sync for TxnStatus","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for StorageConfigManger","synthetic":true,"types":[]},{"text":"impl Sync for BlockCacheConfig","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorInner","synthetic":true,"types":[]},{"text":"impl Sync for ErrorHeaderKind","synthetic":true,"types":[]},{"text":"impl Sync for BTreeEngine","synthetic":true,"types":[]},{"text":"impl Sync for BTreeEngineIterator","synthetic":true,"types":[]},{"text":"impl Sync for BTreeEngineSnapshot","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Sync for CursorBuilder&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for StatisticsSummary","synthetic":true,"types":[]},{"text":"impl Sync for CbContext","synthetic":true,"types":[]},{"text":"impl Sync for WriteData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SnapContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Modify","synthetic":true,"types":[]},{"text":"impl Sync for ScanMode","synthetic":true,"types":[]},{"text":"impl Sync for ErrorInner","synthetic":true,"types":[]},{"text":"impl Sync for PerfStatisticsFields","synthetic":true,"types":[]},{"text":"impl Sync for Runner","synthetic":true,"types":[]},{"text":"impl Sync for RocksEngineCore","synthetic":true,"types":[]},{"text":"impl !Sync for Task","synthetic":true,"types":[]},{"text":"impl Sync for Lock","synthetic":true,"types":[]},{"text":"impl Sync for DummyLockManager","synthetic":true,"types":[]},{"text":"impl Sync for WaitTimeout","synthetic":true,"types":[]},{"text":"impl Sync for StorageLocalMetrics","synthetic":true,"types":[]},{"text":"impl Sync for KV_COMMAND_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for KV_COMMAND_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_STAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_STAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_WRITING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_CONTEX_GAUGE","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_HISTOGRAM_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_LATCH_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_LATCH_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_PROCESSING_READ_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_PROCESSING_READ_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_PROCESSING_WRITE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_TOO_BUSY_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_TOO_BUSY_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_COMMANDS_PRI_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for SCHED_COMMANDS_PRI_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for KV_COMMAND_KEYREAD_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for KV_COMMAND_KEYREAD_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for KV_COMMAND_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl Sync for KV_COMMAND_SCAN_DETAILS_STATIC","synthetic":true,"types":[]},{"text":"impl Sync for KV_COMMAND_KEYWRITE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for KV_COMMAND_KEYWRITE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Sync for REQUEST_EXCEED_BOUND","synthetic":true,"types":[]},{"text":"impl Sync for CommandKind","synthetic":true,"types":[]},{"text":"impl Sync for CommandStageKind","synthetic":true,"types":[]},{"text":"impl Sync for CommandPriority","synthetic":true,"types":[]},{"text":"impl Sync for GcKeysCF","synthetic":true,"types":[]},{"text":"impl Sync for GcKeysDetail","synthetic":true,"types":[]},{"text":"impl !Sync for CommandScanDetailsInner","synthetic":true,"types":[]},{"text":"impl Sync for CommandScanDetailsDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for CommandScanDetails2Inner","synthetic":true,"types":[]},{"text":"impl Sync for CommandScanDetails2Delegator","synthetic":true,"types":[]},{"text":"impl !Sync for CommandScanDetails3Inner","synthetic":true,"types":[]},{"text":"impl Sync for CommandScanDetails3Delegator","synthetic":true,"types":[]},{"text":"impl Sync for CommandScanDetails","synthetic":true,"types":[]},{"text":"impl !Sync for SchedDurationVecInner","synthetic":true,"types":[]},{"text":"impl Sync for SchedDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for SchedDurationVec","synthetic":true,"types":[]},{"text":"impl !Sync for ProcessingReadVecInner","synthetic":true,"types":[]},{"text":"impl Sync for ProcessingReadVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for ProcessingReadVec","synthetic":true,"types":[]},{"text":"impl !Sync for KReadVecInner","synthetic":true,"types":[]},{"text":"impl Sync for KReadVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for KReadVec","synthetic":true,"types":[]},{"text":"impl !Sync for KvCommandCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for KvCommandCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for KvCommandCounterVec","synthetic":true,"types":[]},{"text":"impl !Sync for SchedStageCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for SchedStageCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl !Sync for SchedStageCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl Sync for SchedStageCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl Sync for SchedStageCounterVec","synthetic":true,"types":[]},{"text":"impl !Sync for SchedLatchDurationVecInner","synthetic":true,"types":[]},{"text":"impl Sync for SchedLatchDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for SchedLatchDurationVec","synthetic":true,"types":[]},{"text":"impl !Sync for KvCommandKeysWrittenVecInner","synthetic":true,"types":[]},{"text":"impl Sync for KvCommandKeysWrittenVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for KvCommandKeysWrittenVec","synthetic":true,"types":[]},{"text":"impl !Sync for SchedTooBusyVecInner","synthetic":true,"types":[]},{"text":"impl Sync for SchedTooBusyVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for SchedTooBusyVec","synthetic":true,"types":[]},{"text":"impl !Sync for SchedCommandPriCounterVecInner","synthetic":true,"types":[]},{"text":"impl Sync for SchedCommandPriCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Sync for SchedCommandPriCounterVec","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Mvcc&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GC_DELETE_VERSIONS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for MVCC_VERSIONS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for PointGetter&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for PointGetterBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for MvccReader&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for ScannerBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GcInfo","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for MvccTxn&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ReleasedLock","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for TxnCommitRecord","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for Scanner&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for NewerTsCheckState","synthetic":true,"types":[]},{"text":"impl Sync for ErrorInner","synthetic":true,"types":[]},{"text":"impl&lt;Iter, Ob&gt; Sync for MvccInfoScanner&lt;Iter, Ob&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ob: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MvccInfoCollector","synthetic":true,"types":[]},{"text":"impl Sync for MvccChecksum","synthetic":true,"types":[]},{"text":"impl Sync for CONCURRENCY_MANAGER_LOCK_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Sync for MVCC_CONFLICT_COUNTER","synthetic":true,"types":[]},{"text":"impl Sync for MVCC_DUPLICATE_CMD_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for MVCC_CHECK_TXN_STATUS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Sync for MvccConflictKind","synthetic":true,"types":[]},{"text":"impl Sync for MvccDuplicateCommandKind","synthetic":true,"types":[]},{"text":"impl Sync for MvccCheckTxnStatusKind","synthetic":true,"types":[]},{"text":"impl Sync for MvccConflictCounterVec","synthetic":true,"types":[]},{"text":"impl Sync for MvccDuplicateCmdCounterVec","synthetic":true,"types":[]},{"text":"impl Sync for MvccCheckTxnStatusCounterVec","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for ScannerConfig&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for BackwardKvScanner&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for Cursors&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; !Sync for ForwardScanner&lt;S, P&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LatestKvPolicy","synthetic":true,"types":[]},{"text":"impl Sync for LatestEntryPolicy","synthetic":true,"types":[]},{"text":"impl Sync for DeltaEntryPolicy","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for HandleRes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EntryBuilder","synthetic":true,"types":[]},{"text":"impl Sync for MissingLockAction","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TransactionProperties&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for EntryBatch","synthetic":true,"types":[]},{"text":"impl Sync for FixtureStore","synthetic":true,"types":[]},{"text":"impl Sync for FixtureStoreScanner","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for CommitKind","synthetic":true,"types":[]},{"text":"impl Sync for TransactionKind","synthetic":true,"types":[]},{"text":"impl Sync for TxnEntry","synthetic":true,"types":[]},{"text":"impl Sync for ProcessResult","synthetic":true,"types":[]},{"text":"impl Sync for ErrorInner","synthetic":true,"types":[]},{"text":"impl Sync for AcquirePessimisticLock","synthetic":true,"types":[]},{"text":"impl Sync for CheckSecondaryLocks","synthetic":true,"types":[]},{"text":"impl Sync for CheckTxnStatus","synthetic":true,"types":[]},{"text":"impl Sync for Cleanup","synthetic":true,"types":[]},{"text":"impl Sync for Commit","synthetic":true,"types":[]},{"text":"impl Sync for MvccByKey","synthetic":true,"types":[]},{"text":"impl Sync for MvccByStartTs","synthetic":true,"types":[]},{"text":"impl Sync for Pause","synthetic":true,"types":[]},{"text":"impl Sync for PessimisticRollback","synthetic":true,"types":[]},{"text":"impl Sync for Prewrite","synthetic":true,"types":[]},{"text":"impl Sync for PrewritePessimistic","synthetic":true,"types":[]},{"text":"impl Sync for ResolveLock","synthetic":true,"types":[]},{"text":"impl Sync for ResolveLockLite","synthetic":true,"types":[]},{"text":"impl Sync for ResolveLockReadPhase","synthetic":true,"types":[]},{"text":"impl Sync for Rollback","synthetic":true,"types":[]},{"text":"impl Sync for ScanLock","synthetic":true,"types":[]},{"text":"impl Sync for TxnHeartBeat","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TypedCommand&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReleasedLocks","synthetic":true,"types":[]},{"text":"impl Sync for WriteResult","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Sync for WriteContext&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Command","synthetic":true,"types":[]},{"text":"impl Sync for ResponsePolicy","synthetic":true,"types":[]},{"text":"impl Sync for SecondaryLockStatus","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for Prewriter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as PrewriteKind&gt;::Mutation: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Optimistic","synthetic":true,"types":[]},{"text":"impl Sync for Pessimistic","synthetic":true,"types":[]},{"text":"impl !Sync for SchedLocalMetrics","synthetic":true,"types":[]},{"text":"impl Sync for SchedPool","synthetic":true,"types":[]},{"text":"impl Sync for SchedTicker","synthetic":true,"types":[]},{"text":"impl Sync for Task","synthetic":true,"types":[]},{"text":"impl Sync for CmdTimer","synthetic":true,"types":[]},{"text":"impl !Sync for TaskContext","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Sync for SchedulerInner&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; Sync for Scheduler&lt;E, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; !Sync for Gc&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PrewriteMutation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LockStatus","synthetic":true,"types":[]},{"text":"impl Sync for Latch","synthetic":true,"types":[]},{"text":"impl Sync for Lock","synthetic":true,"types":[]},{"text":"impl Sync for Latches","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for FuturePoolTicker&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Sync for MvccInfo","synthetic":true,"types":[]},{"text":"impl !Sync for PerfStatisticsInstant","synthetic":false,"types":[]}];
implementors["tikv_alloc"] = [{"text":"impl Sync for ProfError","synthetic":true,"types":[]},{"text":"impl Sync for THREAD_MEMORY_MAP","synthetic":true,"types":[]},{"text":"impl Sync for MemoryStatsAccessor","synthetic":true,"types":[]}];
implementors["tikv_jemalloc_ctl"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Mib&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MibStr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Name","synthetic":true,"types":[]},{"text":"impl Sync for version","synthetic":true,"types":[]},{"text":"impl Sync for version_mib","synthetic":true,"types":[]},{"text":"impl Sync for background_thread","synthetic":true,"types":[]},{"text":"impl Sync for background_thread_mib","synthetic":true,"types":[]},{"text":"impl Sync for max_background_threads","synthetic":true,"types":[]},{"text":"impl Sync for max_background_threads_mib","synthetic":true,"types":[]},{"text":"impl Sync for epoch","synthetic":true,"types":[]},{"text":"impl Sync for epoch_mib","synthetic":true,"types":[]},{"text":"impl Sync for narenas","synthetic":true,"types":[]},{"text":"impl Sync for narenas_mib","synthetic":true,"types":[]},{"text":"impl Sync for malloc_conf","synthetic":true,"types":[]},{"text":"impl Sync for malloc_conf_mib","synthetic":true,"types":[]},{"text":"impl Sync for abort","synthetic":true,"types":[]},{"text":"impl Sync for abort_mib","synthetic":true,"types":[]},{"text":"impl Sync for dss","synthetic":true,"types":[]},{"text":"impl Sync for dss_mib","synthetic":true,"types":[]},{"text":"impl Sync for narenas","synthetic":true,"types":[]},{"text":"impl Sync for narenas_mib","synthetic":true,"types":[]},{"text":"impl Sync for junk","synthetic":true,"types":[]},{"text":"impl Sync for junk_mib","synthetic":true,"types":[]},{"text":"impl Sync for zero","synthetic":true,"types":[]},{"text":"impl Sync for zero_mib","synthetic":true,"types":[]},{"text":"impl Sync for tcache","synthetic":true,"types":[]},{"text":"impl Sync for tcache_mib","synthetic":true,"types":[]},{"text":"impl Sync for lg_tcache_max","synthetic":true,"types":[]},{"text":"impl Sync for lg_tcache_max_mib","synthetic":true,"types":[]},{"text":"impl Sync for background_thread","synthetic":true,"types":[]},{"text":"impl Sync for background_thread_mib","synthetic":true,"types":[]},{"text":"impl Sync for allocated","synthetic":true,"types":[]},{"text":"impl Sync for allocated_mib","synthetic":true,"types":[]},{"text":"impl Sync for active","synthetic":true,"types":[]},{"text":"impl Sync for active_mib","synthetic":true,"types":[]},{"text":"impl Sync for metadata","synthetic":true,"types":[]},{"text":"impl Sync for metadata_mib","synthetic":true,"types":[]},{"text":"impl Sync for resident","synthetic":true,"types":[]},{"text":"impl Sync for resident_mib","synthetic":true,"types":[]},{"text":"impl Sync for mapped","synthetic":true,"types":[]},{"text":"impl Sync for mapped_mib","synthetic":true,"types":[]},{"text":"impl Sync for retained","synthetic":true,"types":[]},{"text":"impl Sync for retained_mib","synthetic":true,"types":[]},{"text":"impl Sync for allocatedp","synthetic":true,"types":[]},{"text":"impl Sync for allocatedp_mib","synthetic":true,"types":[]},{"text":"impl Sync for deallocatedp","synthetic":true,"types":[]},{"text":"impl Sync for deallocatedp_mib","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tikv_jemallocator"] = [{"text":"impl Sync for Jemalloc","synthetic":true,"types":[]}];
implementors["tikv_util"] = [{"text":"impl !Sync for DefaultRng","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DeferContext&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RingQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MustConsumeVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; Sync for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BufferVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WithConcatExtend&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ReadableSize","synthetic":true,"types":[]},{"text":"impl Sync for OptionReadableSize","synthetic":true,"types":[]},{"text":"impl Sync for ReadableDuration","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for VersionTrack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Tracker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TomlWriter","synthetic":true,"types":[]},{"text":"impl Sync for ConfigError","synthetic":true,"types":[]},{"text":"impl Sync for LogFormat","synthetic":true,"types":[]},{"text":"impl Sync for TomlLine","synthetic":true,"types":[]},{"text":"impl Sync for FsInfo","synthetic":true,"types":[]},{"text":"impl Sync for BatchCommandsWaker","synthetic":true,"types":[]},{"text":"impl&lt;T, C, A&gt; Sync for MustCall&lt;T, C, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DeadlineError","synthetic":true,"types":[]},{"text":"impl Sync for Deadline","synthetic":true,"types":[]},{"text":"impl Sync for KeyBuilder","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for TikvFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for RocksFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for LogAndFuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for SlowLogFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SlowCostSerializer","synthetic":true,"types":[]},{"text":"impl Sync for LogCost","synthetic":true,"types":[]},{"text":"impl&lt;N, R, S, T&gt; Sync for LogDispatcher&lt;N, R, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for RotatingFileLogger","synthetic":true,"types":[]},{"text":"impl !Sync for RotatingFileLoggerBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RotateByTime","synthetic":true,"types":[]},{"text":"impl Sync for RotateBySize","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; !Sync for Record&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Sync for ValueEntry&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; !Sync for Trace&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Sync for LruCache&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Sync for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ThreadInfoStatistics","synthetic":true,"types":[]},{"text":"impl Sync for HistogramReader","synthetic":true,"types":[]},{"text":"impl Sync for CRITICAL_ERROR","synthetic":true,"types":[]},{"text":"impl Sync for Metrics","synthetic":true,"types":[]},{"text":"impl Sync for ThreadsCollector","synthetic":true,"types":[]},{"text":"impl Sync for CLK_TCK","synthetic":true,"types":[]},{"text":"impl Sync for ThreadMetrics","synthetic":true,"types":[]},{"text":"impl Sync for TidRetriever","synthetic":true,"types":[]},{"text":"impl Sync for ProcessCollector","synthetic":true,"types":[]},{"text":"impl Sync for CLK_TCK","synthetic":true,"types":[]},{"text":"impl Sync for PAGESIZE","synthetic":true,"types":[]},{"text":"impl Sync for BOOT_TIME","synthetic":true,"types":[]},{"text":"impl Sync for AllocStatsCollector","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for LooseBoundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for Notifier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for VecCollector","synthetic":true,"types":[]},{"text":"impl&lt;T, E, I, C&gt; Sync for BatchReceiver&lt;T, E, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SYS_INFO","synthetic":true,"types":[]},{"text":"impl Sync for LiunxStyleCpuTime","synthetic":true,"types":[]},{"text":"impl Sync for MountPoint","synthetic":true,"types":[]},{"text":"impl Sync for CGroupSubsys","synthetic":true,"types":[]},{"text":"impl Sync for CGroup","synthetic":true,"types":[]},{"text":"impl Sync for CGroupSys","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for MountInfoFieldPart1","synthetic":true,"types":[]},{"text":"impl Sync for MountInfoFieldPart2","synthetic":true,"types":[]},{"text":"impl Sync for SubsysFields","synthetic":true,"types":[]},{"text":"impl Sync for SysQuota","synthetic":true,"types":[]},{"text":"impl Sync for UnixSecs","synthetic":true,"types":[]},{"text":"impl Sync for SlowTimer","synthetic":true,"types":[]},{"text":"impl !Sync for Monitor","synthetic":true,"types":[]},{"text":"impl Sync for CoarseClock","synthetic":true,"types":[]},{"text":"impl Sync for ThreadReadId","synthetic":true,"types":[]},{"text":"impl Sync for Instant","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Timer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TimeoutTask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for GLOBAL_TIMER_HANDLE","synthetic":true,"types":[]},{"text":"impl Sync for TimeZero","synthetic":true,"types":[]},{"text":"impl Sync for SteadyClock","synthetic":true,"types":[]},{"text":"impl Sync for STEADY_CLOCK","synthetic":true,"types":[]},{"text":"impl Sync for SteadyTimer","synthetic":true,"types":[]},{"text":"impl Sync for GLOBAL_STEADY_TIMER","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Scheduler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Stopped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Worker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Builder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LazyWorker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ReceiverWrapper&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Scheduler&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Worker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ScheduleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for WORKER_PENDING_TASK_VEC","synthetic":true,"types":[]},{"text":"impl Sync for WORKER_HANDLED_TASK_VEC","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RunnableWrapper&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Msg&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Full","synthetic":true,"types":[]},{"text":"impl Sync for FuturePool","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TickerWrapper&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DefaultTicker","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for YatpPoolRunner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for YatpPoolBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Env","synthetic":true,"types":[]},{"text":"impl Sync for FUTUREPOOL_RUNNING_TASK_VEC","synthetic":true,"types":[]},{"text":"impl Sync for FUTUREPOOL_HANDLED_TASK_VEC","synthetic":true,"types":[]},{"text":"impl Sync for FUTUREPOOL_SCHEDULE_DURATION_VEC","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Sync for Date","synthetic":true,"types":[]},{"text":"impl Sync for Duration","synthetic":true,"types":[]},{"text":"impl Sync for Instant","synthetic":true,"types":[]},{"text":"impl Sync for OffsetDateTime","synthetic":true,"types":[]},{"text":"impl Sync for PrimitiveDateTime","synthetic":true,"types":[]},{"text":"impl Sync for Time","synthetic":true,"types":[]},{"text":"impl Sync for UtcOffset","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl Sync for Sign","synthetic":true,"types":[]},{"text":"impl Sync for Weekday","synthetic":true,"types":[]},{"text":"impl Sync for ConversionRange","synthetic":true,"types":[]},{"text":"impl Sync for ComponentRange","synthetic":true,"types":[]},{"text":"impl Sync for IndeterminateOffset","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]}];
implementors["tipb"] = [{"text":"impl Sync for AnalyzeReq","synthetic":true,"types":[]},{"text":"impl Sync for AnalyzeIndexReq","synthetic":true,"types":[]},{"text":"impl Sync for AnalyzeColumnsReq","synthetic":true,"types":[]},{"text":"impl Sync for AnalyzeColumnsResp","synthetic":true,"types":[]},{"text":"impl Sync for AnalyzeIndexResp","synthetic":true,"types":[]},{"text":"impl Sync for Bucket","synthetic":true,"types":[]},{"text":"impl Sync for Histogram","synthetic":true,"types":[]},{"text":"impl Sync for FmSketch","synthetic":true,"types":[]},{"text":"impl Sync for SampleCollector","synthetic":true,"types":[]},{"text":"impl Sync for CmSketchRow","synthetic":true,"types":[]},{"text":"impl Sync for CmSketchTopN","synthetic":true,"types":[]},{"text":"impl Sync for CmSketch","synthetic":true,"types":[]},{"text":"impl Sync for FieldType","synthetic":true,"types":[]},{"text":"impl Sync for Expr","synthetic":true,"types":[]},{"text":"impl Sync for RpnExpr","synthetic":true,"types":[]},{"text":"impl Sync for ByItem","synthetic":true,"types":[]},{"text":"impl Sync for ChecksumRewriteRule","synthetic":true,"types":[]},{"text":"impl Sync for ChecksumRequest","synthetic":true,"types":[]},{"text":"impl Sync for ChecksumResponse","synthetic":true,"types":[]},{"text":"impl Sync for Executor","synthetic":true,"types":[]},{"text":"impl Sync for TableScan","synthetic":true,"types":[]},{"text":"impl Sync for IndexScan","synthetic":true,"types":[]},{"text":"impl Sync for Selection","synthetic":true,"types":[]},{"text":"impl Sync for Projection","synthetic":true,"types":[]},{"text":"impl Sync for Aggregation","synthetic":true,"types":[]},{"text":"impl Sync for TopN","synthetic":true,"types":[]},{"text":"impl Sync for Limit","synthetic":true,"types":[]},{"text":"impl Sync for ExecutorExecutionSummary","synthetic":true,"types":[]},{"text":"impl Sync for Row","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for SelectResponse","synthetic":true,"types":[]},{"text":"impl Sync for Chunk","synthetic":true,"types":[]},{"text":"impl Sync for RowMeta","synthetic":true,"types":[]},{"text":"impl Sync for DagRequest","synthetic":true,"types":[]},{"text":"impl Sync for ChunkMemoryLayout","synthetic":true,"types":[]},{"text":"impl Sync for UserIdentity","synthetic":true,"types":[]},{"text":"impl Sync for StreamResponse","synthetic":true,"types":[]},{"text":"impl Sync for InUnionMetadata","synthetic":true,"types":[]},{"text":"impl Sync for CompareInMetadata","synthetic":true,"types":[]},{"text":"impl Sync for TableInfo","synthetic":true,"types":[]},{"text":"impl Sync for ColumnInfo","synthetic":true,"types":[]},{"text":"impl Sync for IndexInfo","synthetic":true,"types":[]},{"text":"impl Sync for KeyRange","synthetic":true,"types":[]},{"text":"impl Sync for AnalyzeType","synthetic":true,"types":[]},{"text":"impl Sync for ExprType","synthetic":true,"types":[]},{"text":"impl Sync for ScalarFuncSig","synthetic":true,"types":[]},{"text":"impl Sync for ChecksumScanOn","synthetic":true,"types":[]},{"text":"impl Sync for ChecksumAlgorithm","synthetic":true,"types":[]},{"text":"impl Sync for ExecType","synthetic":true,"types":[]},{"text":"impl Sync for EncodeType","synthetic":true,"types":[]},{"text":"impl Sync for Endian","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]}];
implementors["tipb_helper"] = [{"text":"impl Sync for ExprDefBuilder","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl Sync for DirBuilder","synthetic":true,"types":[]},{"text":"impl Sync for File","synthetic":true,"types":[]},{"text":"impl Sync for OpenOptions","synthetic":true,"types":[]},{"text":"impl Sync for DirEntry","synthetic":true,"types":[]},{"text":"impl Sync for ReadDir","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for PollEvented&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Stderr","synthetic":true,"types":[]},{"text":"impl Sync for Stdin","synthetic":true,"types":[]},{"text":"impl Sync for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Sync for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; Sync for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized, W:&nbsp;?Sized&gt; Sync for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Repeat","synthetic":true,"types":[]},{"text":"impl Sync for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, B&gt; Sync for StreamReader&lt;S, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TcpListener","synthetic":true,"types":[]},{"text":"impl Sync for TcpStream","synthetic":true,"types":[]},{"text":"impl Sync for UdpSocket","synthetic":true,"types":[]},{"text":"impl Sync for UnixDatagram","synthetic":true,"types":[]},{"text":"impl Sync for UnixListener","synthetic":true,"types":[]},{"text":"impl Sync for UnixStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl Sync for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl Sync for ReuniteError","synthetic":true,"types":[]},{"text":"impl Sync for RecvHalf","synthetic":true,"types":[]},{"text":"impl Sync for ReuniteError","synthetic":true,"types":[]},{"text":"impl Sync for SendHalf","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UCred","synthetic":true,"types":[]},{"text":"impl Sync for Command","synthetic":true,"types":[]},{"text":"impl Sync for Child","synthetic":true,"types":[]},{"text":"impl Sync for ChildStdin","synthetic":true,"types":[]},{"text":"impl Sync for ChildStdout","synthetic":true,"types":[]},{"text":"impl Sync for ChildStderr","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for Handle","synthetic":true,"types":[]},{"text":"impl Sync for TryCurrentError","synthetic":true,"types":[]},{"text":"impl Sync for Runtime","synthetic":true,"types":[]},{"text":"impl Sync for JoinError","synthetic":true,"types":[]},{"text":"impl Sync for SignalKind","synthetic":true,"types":[]},{"text":"impl Sync for Signal","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for StreamMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Barrier","synthetic":true,"types":[]},{"text":"impl Sync for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl Sync for TryLockError","synthetic":true,"types":[]},{"text":"impl Sync for Notify","synthetic":true,"types":[]},{"text":"impl Sync for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RecvError","synthetic":true,"types":[]},{"text":"impl Sync for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RecvError","synthetic":true,"types":[]},{"text":"impl Sync for ClosedError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RecvError","synthetic":true,"types":[]},{"text":"impl Sync for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Ref&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DelayQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Delay","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Instant","synthetic":true,"types":[]},{"text":"impl Sync for Interval","synthetic":true,"types":[]},{"text":"impl Sync for Elapsed","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Throttle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Key","synthetic":true,"types":[]},{"text":"impl Sync for Registration","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for ReadHalf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for WriteHalf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for JoinHandle&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Sync for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; Sync for MutexGuard&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Sync for OwnedMutexGuard&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Sync for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; Sync for RwLockReadGuard&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; Sync for RwLockWriteGuard&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl !Sync for Enter","synthetic":true,"types":[]},{"text":"impl Sync for EnterError","synthetic":true,"types":[]},{"text":"impl Sync for SpawnError","synthetic":true,"types":[]},{"text":"impl Sync for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl Sync for DefaultGuard","synthetic":true,"types":[]},{"text":"impl !Sync for ParkThread","synthetic":true,"types":[]},{"text":"impl Sync for ParkError","synthetic":true,"types":[]},{"text":"impl Sync for UnparkThread","synthetic":true,"types":[]}];
implementors["tokio_openssl"] = [{"text":"impl&lt;S&gt; Sync for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl Sync for Delay","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DelayQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Clock","synthetic":true,"types":[]},{"text":"impl Sync for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Throttle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ThrottleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Sync for Handle","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Sync for Timer&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Turn","synthetic":true,"types":[]}];
implementors["tokio_tls"] = [{"text":"impl&lt;S&gt; Sync for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TlsConnector","synthetic":true,"types":[]},{"text":"impl Sync for TlsAcceptor","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Sync for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Sync for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Sync for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LinesCodec","synthetic":true,"types":[]},{"text":"impl Sync for LinesCodecError","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl Sync for LengthDelimitedCodec","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; Sync for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;'a, T&gt; Sync for Locked&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for TryLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Sync for XxHash64","synthetic":true,"types":[]},{"text":"impl Sync for XxHash32","synthetic":true,"types":[]}];
implementors["txn_types"] = [{"text":"impl Sync for Lock","synthetic":true,"types":[]},{"text":"impl Sync for TimeStamp","synthetic":true,"types":[]},{"text":"impl Sync for Key","synthetic":true,"types":[]},{"text":"impl Sync for OldValue","synthetic":true,"types":[]},{"text":"impl Sync for TxnExtra","synthetic":true,"types":[]},{"text":"impl Sync for Write","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WriteRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for LockType","synthetic":true,"types":[]},{"text":"impl Sync for TsSet","synthetic":true,"types":[]},{"text":"impl Sync for Mutation","synthetic":true,"types":[]},{"text":"impl Sync for MutationType","synthetic":true,"types":[]},{"text":"impl Sync for WriteType","synthetic":true,"types":[]},{"text":"impl Sync for ErrorInner","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Sync for Greater","synthetic":true,"types":[]},{"text":"impl Sync for Less","synthetic":true,"types":[]},{"text":"impl Sync for Equal","synthetic":true,"types":[]},{"text":"impl Sync for B0","synthetic":true,"types":[]},{"text":"impl Sync for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Sync for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Sync for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Z0","synthetic":true,"types":[]},{"text":"impl Sync for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Sync for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Sync for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unchecked_index"] = [{"text":"impl&lt;S&gt; Sync for UncheckedIndex&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S&gt; Sync for UniCase&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Ascii&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Sync for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Sync for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Sync for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BidiClass","synthetic":true,"types":[]},{"text":"impl Sync for Level","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Sync for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IsNormalized","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Sync for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GraphemeIncomplete","synthetic":true,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Sync for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Mark","synthetic":true,"types":[]},{"text":"impl Sync for EndOfInput","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl Sync for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Origin","synthetic":true,"types":[]},{"text":"impl Sync for ParseError","synthetic":true,"types":[]},{"text":"impl Sync for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["utf8parse"] = [{"text":"impl Sync for Parser","synthetic":true,"types":[]}];
implementors["uuid"] = [{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Uuid","synthetic":true,"types":[]},{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for Variant","synthetic":true,"types":[]},{"text":"impl Sync for Hyphenated","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for HyphenatedRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Simple","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SimpleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Urn","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UrnRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; Sync for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Sync for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Sync for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl Sync for Void","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl Sync for DirEntry","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for WalkDir","synthetic":true,"types":[]},{"text":"impl Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl Sync for Giver","synthetic":true,"types":[]},{"text":"impl Sync for Taker","synthetic":true,"types":[]},{"text":"impl Sync for SharedGiver","synthetic":true,"types":[]},{"text":"impl Sync for Closed","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl Sync for ParserConfig","synthetic":true,"types":[]},{"text":"impl Sync for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl Sync for TextPosition","synthetic":true,"types":[]},{"text":"impl Sync for XmlVersion","synthetic":true,"types":[]},{"text":"impl Sync for Namespace","synthetic":true,"types":[]},{"text":"impl Sync for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for EventReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Events&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for XmlEvent","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EmitterError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["yatp"] = [{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Remote&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MULTILEVEL_LEVEL_ELAPSED","synthetic":true,"types":[]},{"text":"impl Sync for MULTILEVEL_LEVEL0_CHANCE","synthetic":true,"types":[]},{"text":"impl Sync for SchedConfig","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for CloneRunnerBuilder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for Local&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ThreadPool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Extras","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Pop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for QueueType","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for MultilevelRunnerBuilder&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !Sync for MultilevelRunner&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl !Sync for TaskCell","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Handle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Runner","synthetic":true,"types":[]},{"text":"impl !Sync for Task","synthetic":true,"types":[]},{"text":"impl Sync for TaskCell","synthetic":true,"types":[]},{"text":"impl Sync for Runner","synthetic":true,"types":[]},{"text":"impl Sync for Task","synthetic":false,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Sync for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Sync for ZSTD_CCtx_s","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_DCtx_s","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_bounds","synthetic":true,"types":[]},{"text":"impl !Sync for ZSTD_inBuffer_s","synthetic":true,"types":[]},{"text":"impl !Sync for ZSTD_outBuffer_s","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_CDict_s","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_DDict_s","synthetic":true,"types":[]},{"text":"impl Sync for ZDICT_params_t","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_strategy","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_cParameter","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_ResetDirective","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_dParameter","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_EndDirective","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()