(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl Send for RollingAdler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Send for AHasher","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for AHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RandomState","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Send for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Send for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Send for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Send for Match","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Send for Prefix","synthetic":true,"types":[]},{"text":"impl Send for Infix","synthetic":true,"types":[]},{"text":"impl Send for Suffix","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl Send for Colour","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["antidote"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Condvar","synthetic":true,"types":[]},{"text":"impl Send for TryLockError","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arc_swap"] = [{"text":"impl&lt;T&gt; Send for DirectDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for DynGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, F, T, R&gt; Send for MapGuard&lt;G, F, T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Send for Map&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ConstantDeref&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Constant&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Send for Cache&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T, F&gt; Send for MapCache&lt;A, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Shard","synthetic":true,"types":[]},{"text":"impl Send for Global","synthetic":true,"types":[]},{"text":"impl Send for PrivateUnsharded","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PrivateSharded&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'l, T&gt; Send for Guard&lt;'l, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for ArcSwapAny&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Send for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array + Send&gt; Send for Drain&lt;'a, A&gt;","synthetic":false,"types":[]}];
implementors["async_speed_limit"] = [{"text":"impl Send for StandardClock","synthetic":true,"types":[]},{"text":"impl Send for Nanoseconds","synthetic":true,"types":[]},{"text":"impl Send for ManualDelay","synthetic":true,"types":[]},{"text":"impl Send for ManualClock","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Builder&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Instant: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Limiter&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Instant: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, R&gt; Send for Consume&lt;C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Delay: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, C&gt; Send for Resource&lt;R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Delay: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Clock&gt;::Instant: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["atty"] = [{"text":"impl Send for Stream","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl !Send for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for PrintFmt","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !Send for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for Backtrace","synthetic":true,"types":[]},{"text":"impl Send for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl Send for BacktraceSymbol","synthetic":true,"types":[]}];
implementors["backtrace_sys"] = [{"text":"impl Send for backtrace_state","synthetic":true,"types":[]}];
implementors["backup"] = [{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl !Send for LimitedStorage","synthetic":true,"types":[]},{"text":"impl Send for BackupRange","synthetic":true,"types":[]},{"text":"impl Send for ConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;E, R&gt; Send for Endpoint&lt;E, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Progress&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Send for ControlThreadPool","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for BACKUP_REQUEST_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for BACKUP_RANGE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for BACKUP_RANGE_SIZE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for BACKUP_THREAD_POOL_SIZE_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for BACKUP_RANGE_ERROR_VEC","synthetic":true,"types":[]},{"text":"impl Send for Service","synthetic":true,"types":[]},{"text":"impl Send for Writer","synthetic":true,"types":[]},{"text":"impl Send for BackupWriterBuilder","synthetic":true,"types":[]},{"text":"impl Send for BackupWriter","synthetic":true,"types":[]},{"text":"impl Send for BackupRawKVWriter","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Send for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for DecoderReader&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for CharacterSet","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]}];
implementors["batch_system"] = [{"text":"impl&lt;N, C&gt; Send for FsmTypes&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; Send for NormalScheduler&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; Send for ControlScheduler&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; Send for Batch&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C, Handler&gt; Send for Poller&lt;N, C, Handler&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Handler: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReschedulePolicy","synthetic":true,"types":[]},{"text":"impl&lt;N, C&gt; Send for BatchSystem&lt;N, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for FsmState&lt;N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Owner&gt; Send for BasicMailbox&lt;Owner&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Owner, Scheduler&gt; Send for Mailbox&lt;Owner, Scheduler&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Scheduler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CheckDoResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, C, Ns, Cs&gt; Send for Router&lt;N, C, Ns, Cs&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Cs: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ns: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Send for BlockBuffer&lt;BlockSize&gt;","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl Send for BStr","synthetic":true,"types":[]},{"text":"impl Send for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Send for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Utf8Error","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;'a&gt; Send for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BytesMut","synthetic":false,"types":[]},{"text":"impl Send for Bytes","synthetic":false,"types":[]}];
implementors["bzip2_sys"] = [{"text":"impl !Send for bz_stream","synthetic":true,"types":[]}];
implementors["c2_chacha"] = [{"text":"impl Send for ChaCha","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for State&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cargo_metadata"] = [{"text":"impl Send for DependencyKind","synthetic":true,"types":[]},{"text":"impl Send for Dependency","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticCode","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticSpanLine","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticSpanMacroExpansion","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticSpan","synthetic":true,"types":[]},{"text":"impl Send for Applicability","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticLevel","synthetic":true,"types":[]},{"text":"impl Send for Diagnostic","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ArtifactProfile","synthetic":true,"types":[]},{"text":"impl Send for Artifact","synthetic":true,"types":[]},{"text":"impl Send for CompilerMessage","synthetic":true,"types":[]},{"text":"impl Send for BuildScript","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for PackageId","synthetic":true,"types":[]},{"text":"impl Send for Metadata","synthetic":true,"types":[]},{"text":"impl Send for Resolve","synthetic":true,"types":[]},{"text":"impl Send for Node","synthetic":true,"types":[]},{"text":"impl Send for NodeDep","synthetic":true,"types":[]},{"text":"impl Send for DepKindInfo","synthetic":true,"types":[]},{"text":"impl Send for Package","synthetic":true,"types":[]},{"text":"impl Send for Source","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl Send for CargoOpt","synthetic":true,"types":[]},{"text":"impl Send for MetadataCommand","synthetic":true,"types":[]}];
implementors["cdc"] = [{"text":"impl Send for DownstreamID","synthetic":true,"types":[]},{"text":"impl Send for DownstreamState","synthetic":true,"types":[]},{"text":"impl Send for Downstream","synthetic":true,"types":[]},{"text":"impl Send for Pending","synthetic":true,"types":[]},{"text":"impl Send for PendingLock","synthetic":true,"types":[]},{"text":"impl Send for Delegate","synthetic":true,"types":[]},{"text":"impl Send for Deregister","synthetic":true,"types":[]},{"text":"impl Send for OldValueCache","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Endpoint&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Initializer","synthetic":true,"types":[]},{"text":"impl Send for CdcTxnExtraScheduler","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for CDC_RESOLVED_TS_GAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for CDC_SCAN_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for CDC_MIN_RESOLVED_TS_REGION","synthetic":true,"types":[]},{"text":"impl Send for CDC_MIN_RESOLVED_TS","synthetic":true,"types":[]},{"text":"impl Send for CDC_PENDING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for CDC_CAPTURED_REGION_COUNT","synthetic":true,"types":[]},{"text":"impl Send for CDC_OLD_VALUE_CACHE_MISS","synthetic":true,"types":[]},{"text":"impl Send for CDC_OLD_VALUE_CACHE_ACCESS","synthetic":true,"types":[]},{"text":"impl Send for CDC_OLD_VALUE_CACHE_BYTES","synthetic":true,"types":[]},{"text":"impl Send for CDC_OLD_VALUE_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl Send for CDC_OLD_VALUE_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for CdcObserver","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for OldValueReader&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for ConnID","synthetic":true,"types":[]},{"text":"impl Send for CdcEvent","synthetic":true,"types":[]},{"text":"impl Send for EventBatcher","synthetic":true,"types":[]},{"text":"impl Send for FeatureGate","synthetic":true,"types":[]},{"text":"impl Send for Conn","synthetic":true,"types":[]},{"text":"impl Send for Service","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Send for FixedOffset","synthetic":true,"types":[]},{"text":"impl Send for Local","synthetic":true,"types":[]},{"text":"impl Send for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NaiveDate","synthetic":true,"types":[]},{"text":"impl Send for IsoWeek","synthetic":true,"types":[]},{"text":"impl Send for NaiveTime","synthetic":true,"types":[]},{"text":"impl Send for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Send for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Send for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Pad","synthetic":true,"types":[]},{"text":"impl Send for Numeric","synthetic":true,"types":[]},{"text":"impl Send for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Send for Fixed","synthetic":true,"types":[]},{"text":"impl Send for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Weekday","synthetic":true,"types":[]},{"text":"impl Send for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["chrono_tz"] = [{"text":"impl Send for Tz","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl Send for AppSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ArgSettings","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Shell","synthetic":true,"types":[]}];
implementors["cmd"] = [{"text":"impl&lt;ER&gt; !Send for TiKVServer&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; Send for TiKVEngines&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; !Send for Servers&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EngineMetricsManager&lt;R&gt;","synthetic":true,"types":[]}];
implementors["codec"] = [{"text":"impl Send for MemComparableByteCodec","synthetic":true,"types":[]},{"text":"impl Send for AscendingMemComparableCodecHelper","synthetic":true,"types":[]},{"text":"impl Send for DescendingMemComparableCodecHelper","synthetic":true,"types":[]},{"text":"impl Send for CompactByteCodec","synthetic":true,"types":[]},{"text":"impl Send for ErrorInner","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for NumberCodec","synthetic":true,"types":[]}];
implementors["concurrency_manager"] = [{"text":"impl Send for KeyHandle","synthetic":true,"types":[]},{"text":"impl Send for KeyHandleGuard","synthetic":true,"types":[]},{"text":"impl Send for LockTable","synthetic":true,"types":[]},{"text":"impl Send for ConcurrencyManager","synthetic":true,"types":[]}];
implementors["configuration"] = [{"text":"impl Send for ConfigValue","synthetic":true,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl Send for LazyBool","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Send for Hasher","synthetic":true,"types":[]}];
implementors["crc64fast"] = [{"text":"impl Send for Digest","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl Send for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TrySelectError","synthetic":true,"types":[]},{"text":"impl Send for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryReadyError","synthetic":true,"types":[]},{"text":"impl Send for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Send for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Worker&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Send for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Send for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Send for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync&gt; Send for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Send for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_skiplist"] = [{"text":"impl&lt;'a, 'g, K, V&gt; !Send for Entry&lt;'a, 'g, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for RefEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, K, V&gt; !Send for Iter&lt;'a, 'g, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for RefIter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'g, Q, R, K, V&gt; !Send for Range&lt;'a, 'g, Q, R, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for SkipMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q:&nbsp;?Sized, R, K, V&gt; Send for Range&lt;'a, Q, R, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SkipSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Q:&nbsp;?Sized, R, T&gt; Send for Range&lt;'a, Q, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send + Sync, V:&nbsp;Send + Sync&gt; Send for SkipList&lt;K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, Q:&nbsp;?Sized, R, K, V&gt; Send for RefRange&lt;'a, Q, R, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Ord + Borrow&lt;Q&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RangeBounds&lt;Q&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Ord,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl Send for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Send for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Send for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Parker","synthetic":false,"types":[]},{"text":"impl Send for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for ScopedJoinHandle&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Send for MacError","synthetic":true,"types":[]},{"text":"impl Send for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for Output&lt;M&gt;","synthetic":true,"types":[]}];
implementors["darling_core"] = [{"text":"impl&lt;V, F&gt; Send for Data&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Fields&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl&lt;T, L, C&gt; Send for GenericParam&lt;T, L, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, W&gt; Send for Generics&lt;P, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for IntoIter","synthetic":true,"types":[]},{"text":"impl Send for Purpose","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl !Send for IdentString","synthetic":true,"types":[]},{"text":"impl Send for Ignored","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Override&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for PathList","synthetic":true,"types":[]},{"text":"impl&lt;T, O&gt; Send for WithOriginal&lt;T, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for SpannedValue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]}];
implementors["dashmap"] = [{"text":"impl&lt;'a, T&gt; !Send for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for ReadOnlyView&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, S&gt; Send for DashSet&lt;K, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, S&gt; Send for RefMulti&lt;'a, K, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for DashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for OwningIter&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Clone + Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'i, K, V, S, M&gt; Send for Iter&lt;'i, K, V, S, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: 'a + Eq + Hash + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: 'a + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: 'a + BuildHasher + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Map&lt;'a, K, V, S&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'i, K, V, S, M&gt; Send for IterMut&lt;'i, K, V, S, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: 'a + Eq + Hash + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: 'a + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: 'a + BuildHasher + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Map&lt;'a, K, V, S&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, S&gt; Send for OwningIter&lt;K, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Clone + Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'i, K, S, M&gt; Send for Iter&lt;'i, K, S, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: 'a + Eq + Hash + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: 'a + BuildHasher + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Map&lt;'a, K, (), S&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for RwLockReadGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for RwLockWriteGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send, V:&nbsp;Send, S:&nbsp;BuildHasher&gt; Send for VacantEntry&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send, V:&nbsp;Send, S:&nbsp;BuildHasher&gt; Send for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send, V:&nbsp;Send, S:&nbsp;BuildHasher&gt; Send for RefMulti&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send, V:&nbsp;Send, S:&nbsp;BuildHasher&gt; Send for RefMutMulti&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send, V:&nbsp;Send, S:&nbsp;BuildHasher&gt; Send for Ref&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send, V:&nbsp;Send, S:&nbsp;BuildHasher&gt; Send for RefMut&lt;'a, K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K:&nbsp;Eq + Hash + Send, S:&nbsp;BuildHasher&gt; Send for Ref&lt;'a, K, S&gt;","synthetic":false,"types":[]}];
implementors["debugid"] = [{"text":"impl Send for ParseDebugIdError","synthetic":true,"types":[]},{"text":"impl Send for DebugId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BreakpadFormat&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseCodeIdError","synthetic":true,"types":[]},{"text":"impl Send for CodeId","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl Send for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Send for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["encoding_rs"] = [{"text":"impl Send for Latin1Bidi","synthetic":true,"types":[]},{"text":"impl Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for CoderResult","synthetic":true,"types":[]},{"text":"impl Send for DecoderResult","synthetic":true,"types":[]},{"text":"impl Send for Decoder","synthetic":true,"types":[]},{"text":"impl Send for EncoderResult","synthetic":true,"types":[]},{"text":"impl Send for Encoder","synthetic":true,"types":[]}];
implementors["encryption"] = [{"text":"impl Send for EncryptionConfig","synthetic":true,"types":[]},{"text":"impl Send for FileConfig","synthetic":true,"types":[]},{"text":"impl Send for KmsConfig","synthetic":true,"types":[]},{"text":"impl Send for MasterKeyConfig","synthetic":true,"types":[]},{"text":"impl Send for Iv","synthetic":true,"types":[]},{"text":"impl Send for AesGcmTag","synthetic":true,"types":[]},{"text":"impl&lt;'k&gt; Send for AesGcmCrypter&lt;'k&gt;","synthetic":true,"types":[]},{"text":"impl Send for PlainKey","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EncryptedFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for LogRecord","synthetic":true,"types":[]},{"text":"impl Send for FileDictionaryFile","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EncrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DecrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CrypterReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for EncrypterWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Dicts","synthetic":true,"types":[]},{"text":"impl Send for DataKeyManager","synthetic":true,"types":[]},{"text":"impl Send for DataKeyManagerArgs","synthetic":true,"types":[]},{"text":"impl Send for LoadDicts","synthetic":true,"types":[]},{"text":"impl Send for MemAesGcmBackend","synthetic":true,"types":[]},{"text":"impl Send for FileBackend","synthetic":true,"types":[]},{"text":"impl Send for KeyId","synthetic":true,"types":[]},{"text":"impl Send for AwsKms","synthetic":true,"types":[]},{"text":"impl Send for KmsClientDebug","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl Send for EncryptedKey","synthetic":true,"types":[]},{"text":"impl Send for DataKeyPair","synthetic":true,"types":[]},{"text":"impl Send for KmsBackend","synthetic":true,"types":[]},{"text":"impl Send for MetadataKey","synthetic":true,"types":[]},{"text":"impl Send for MetadataMethod","synthetic":true,"types":[]},{"text":"impl Send for PlaintextBackend","synthetic":true,"types":[]},{"text":"impl Send for ENCRYPTION_DATA_KEY_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for ENCRYPTION_FILE_NUM_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for ENCRYPTION_INITIALIZED_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for ENCRYPT_DECRPTION_FILE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for ENCRYPTION_FILE_SIZE_GAUGE","synthetic":true,"types":[]}];
implementors["engine_panic"] = [{"text":"impl Send for PanicColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl Send for PanicCompactedEvent","synthetic":true,"types":[]},{"text":"impl Send for PanicDBOptions","synthetic":true,"types":[]},{"text":"impl Send for PanicTitanDBOptions","synthetic":true,"types":[]},{"text":"impl Send for PanicDBVector","synthetic":true,"types":[]},{"text":"impl Send for PanicEngine","synthetic":true,"types":[]},{"text":"impl Send for PanicEngineIterator","synthetic":true,"types":[]},{"text":"impl Send for PanicIngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl Send for PanicSnapshot","synthetic":true,"types":[]},{"text":"impl Send for PanicSnapshotIterator","synthetic":true,"types":[]},{"text":"impl Send for PanicSstReader","synthetic":true,"types":[]},{"text":"impl Send for PanicSstReaderIterator","synthetic":true,"types":[]},{"text":"impl Send for PanicSstWriter","synthetic":true,"types":[]},{"text":"impl Send for PanicSstWriterBuilder","synthetic":true,"types":[]},{"text":"impl Send for PanicExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl Send for PanicExternalSstFileReader","synthetic":true,"types":[]},{"text":"impl Send for PanicTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl Send for PanicTablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl Send for PanicTablePropertiesKey","synthetic":true,"types":[]},{"text":"impl Send for PanicTableProperties","synthetic":true,"types":[]},{"text":"impl Send for PanicUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Send for PanicWriteBatch","synthetic":true,"types":[]},{"text":"impl Send for PanicPerfContext","synthetic":true,"types":[]}];
implementors["engine_rocks"] = [{"text":"impl !Send for RocksColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl !Send for RocksDBOptions","synthetic":true,"types":[]},{"text":"impl !Send for RocksTitanDBOptions","synthetic":true,"types":[]},{"text":"impl !Send for RocksDBVector","synthetic":true,"types":[]},{"text":"impl Send for RocksEngine","synthetic":true,"types":[]},{"text":"impl !Send for RocksIngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl Send for RocksdbLogger","synthetic":true,"types":[]},{"text":"impl Send for RaftDBLogger","synthetic":true,"types":[]},{"text":"impl !Send for RocksSstReader","synthetic":true,"types":[]},{"text":"impl Send for RocksSstWriterBuilder","synthetic":true,"types":[]},{"text":"impl Send for RocksSstWriter","synthetic":true,"types":[]},{"text":"impl !Send for RocksExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RocksSstPartitionerFactory&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for RocksSstPartitioner&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for RocksTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl !Send for RocksTablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl !Send for RocksTablePropertiesKey","synthetic":true,"types":[]},{"text":"impl !Send for RocksTableProperties","synthetic":true,"types":[]},{"text":"impl !Send for RocksUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Send for RocksUserCollectedPropertiesNoRc","synthetic":true,"types":[]},{"text":"impl Send for RocksWriteBatch","synthetic":true,"types":[]},{"text":"impl Send for RocksWriteBatchVec","synthetic":true,"types":[]},{"text":"impl Send for RocksMvccProperties","synthetic":true,"types":[]},{"text":"impl Send for RocksPerfContext","synthetic":true,"types":[]},{"text":"impl Send for PerfContextStatistics","synthetic":true,"types":[]},{"text":"impl Send for PerfContextTimeDurationInner","synthetic":true,"types":[]},{"text":"impl Send for PerfContextTimeDurationDelegator","synthetic":true,"types":[]},{"text":"impl Send for PerfContextTimeDuration","synthetic":true,"types":[]},{"text":"impl Send for PerfContextType","synthetic":true,"types":[]},{"text":"impl Send for APPLY_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for STORE_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for APPLY_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Send for STORE_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Send for RocksEngineIterator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RocksSeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for RocksReadOptions","synthetic":true,"types":[]},{"text":"impl !Send for RocksWriteOptions","synthetic":true,"types":[]},{"text":"impl Send for TsFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RocksCFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FixedSuffixSliceTransform","synthetic":true,"types":[]},{"text":"impl Send for FixedPrefixSliceTransform","synthetic":true,"types":[]},{"text":"impl Send for NoopSliceTransform","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RocksCompactionJobInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RocksCompactedEvent","synthetic":true,"types":[]},{"text":"impl Send for CompactionListener","synthetic":true,"types":[]},{"text":"impl Send for SizeProperties","synthetic":true,"types":[]},{"text":"impl Send for UserProperties","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UserCollectedPropertiesDecoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RangeOffsetKind","synthetic":true,"types":[]},{"text":"impl Send for RangeOffsets","synthetic":true,"types":[]},{"text":"impl Send for RangeProperties","synthetic":true,"types":[]},{"text":"impl Send for RangePropertiesCollector","synthetic":true,"types":[]},{"text":"impl Send for RangePropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl Send for MvccPropertiesCollector","synthetic":true,"types":[]},{"text":"impl Send for MvccPropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl Send for EngineTickerMetricsInner","synthetic":true,"types":[]},{"text":"impl Send for EngineTickerMetricsDelegator","synthetic":true,"types":[]},{"text":"impl Send for EngineTickerMetrics2Inner","synthetic":true,"types":[]},{"text":"impl Send for EngineTickerMetrics2Delegator","synthetic":true,"types":[]},{"text":"impl Send for EngineTickerMetrics","synthetic":true,"types":[]},{"text":"impl Send for SimpleEngineTickerMetricsInner","synthetic":true,"types":[]},{"text":"impl Send for SimpleEngineTickerMetricsDelegator","synthetic":true,"types":[]},{"text":"impl Send for SimpleEngineTickerMetrics","synthetic":true,"types":[]},{"text":"impl Send for TickerName","synthetic":true,"types":[]},{"text":"impl Send for TickerEnum","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_SIZE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOCK_CACHE_USAGE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_CACHE_USAGE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_MEMORY_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_ESTIMATE_NUM_KEYS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_PENDING_COMPACTION_BYTES_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_COMPRESSION_RATIO_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_NUM_FILES_AT_LEVEL_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_NUM_SNAPSHOTS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_OLDEST_SNAPSHOT_DURATION_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_WRITE_STALL_REASON_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_TITANDB_NUM_BLOB_FILES_AT_LEVEL_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_TITANDB_LIVE_BLOB_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_TITANDB_NUM_LIVE_BLOB_FILE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_TITANDB_NUM_OBSOLETE_BLOB_FILE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_TITANDB_LIVE_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_TITANDB_OBSOLETE_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_TITANDB_BLOB_FILE_DISCARDABLE_RATIO_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_CACHE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_CACHE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_MEMTABLE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_MEMTABLE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_GET_SERVED_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_GET_SERVED","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_WRITE_SERVED_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_WRITE_SERVED","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOOM_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOOM_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_FLOW","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_STALL_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_STALL_MICROS","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_COMPACTION_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_COMPACTION_FLOW","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_COMPACTION_DROP_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_COMPACTION_DROP","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_COMPACTION_DURATIONS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_COMPACTION_NUM_CORRUPT_KEYS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_COMPACTION_REASON_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_LOCATE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_LOCATE","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_FILE_STATUS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_FILE_STATUS","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_READ_AMP_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_READ_AMP_FLOW","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_NO_ITERATORS","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_WAL_FILE_SYNCED_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_WAL_FILE_SYNCED","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_EVENT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_NUM_IMMUTABLE_MEM_TABLE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_LOCATE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_LOCATE","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_FLOW","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_GC_FLOW_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_GC_FLOW","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_GC_FILE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_GC_FILE","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_GC_ACTION_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_GC_ACTION","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_FILE_SYNCED_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_FILE_SYNCED","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_CACHE_EFFICIENCY_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_CACHE_EFFICIENCY","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_GET_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_WRITE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_COMPACTION_TIME_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_TABLE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_COMPACTION_OUTFILE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_MANIFEST_FILE_SYNC_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_WAL_FILE_SYNC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_STALL_L0_SLOWDOWN_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_STALL_MEMTABLE_COMPACTION_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_STALL_L0_NUM_FILES_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_HARD_RATE_LIMIT_DELAY_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_SOFT_RATE_LIMIT_DELAY_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_NUM_FILES_IN_SINGLE_COMPACTION_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_SEEK_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_WRITE_STALL_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_SST_READ_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_NUM_SUBCOMPACTION_SCHEDULED_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BYTES_PER_READ_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BYTES_PER_WRITE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BYTES_COMPRESSED_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BYTES_DECOMPRESSED_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_COMPRESSION_TIMES_NANOS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_DECOMPRESSION_TIMES_NANOS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_WRITE_WAL_TIME_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_KEY_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_VALUE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_GET_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_SEEK_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_NEXT_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_PREV_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_FILE_WRITE_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_FILE_READ_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_FILE_SYNC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_BLOB_GC_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_GC_INPUT_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_GC_OUTPUT_BLOB_FILE_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_ENGINE_ITER_TOUCH_BLOB_FILE_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Send for RocksEventListener","synthetic":true,"types":[]},{"text":"impl Send for LogLevel","synthetic":true,"types":[]},{"text":"impl Send for CompressionType","synthetic":true,"types":[]},{"text":"impl Send for BlobRunMode","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WrappedEncryptionKeyManager&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WrappedFileSystemInspector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for RocksSnapshot","synthetic":false,"types":[]},{"text":"impl Send for RocksSstIterator","synthetic":false,"types":[]}];
implementors["engine_test"] = [{"text":"impl Send for CryptoOptions","synthetic":true,"types":[]},{"text":"impl Send for DBOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CFOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ColumnFamilyOptions","synthetic":true,"types":[]}];
implementors["engine_traits"] = [{"text":"impl Send for EngineFileSystemInspector","synthetic":true,"types":[]},{"text":"impl Send for DeleteStrategy","synthetic":true,"types":[]},{"text":"impl Send for SstCompressionType","synthetic":true,"types":[]},{"text":"impl Send for FileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Send for EncryptionMethod","synthetic":true,"types":[]},{"text":"impl Send for IndexHandle","synthetic":true,"types":[]},{"text":"impl Send for IndexHandles","synthetic":true,"types":[]},{"text":"impl Send for MvccProperties","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SstPartitionerRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SstPartitionerResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SstPartitionerContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for PerfLevel","synthetic":true,"types":[]},{"text":"impl Send for PerfContextKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, R&gt; Send for Engines&lt;K, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ReadOptions","synthetic":true,"types":[]},{"text":"impl Send for WriteOptions","synthetic":true,"types":[]},{"text":"impl Send for SeekMode","synthetic":true,"types":[]},{"text":"impl Send for IterOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Range&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CacheStats","synthetic":true,"types":[]}];
implementors["error_code"] = [{"text":"impl Send for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Send for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Send for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Send for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Send for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Send for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Send for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Send for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Send for ALL_ERROR_CODES","synthetic":true,"types":[]},{"text":"impl Send for ErrorCode","synthetic":true,"types":[]}];
implementors["external_storage"] = [{"text":"impl Send for LocalStorage","synthetic":true,"types":[]},{"text":"impl Send for NoopStorage","synthetic":true,"types":[]},{"text":"impl !Send for S3Storage","synthetic":true,"types":[]},{"text":"impl&lt;'client&gt; Send for S3Uploader&lt;'client&gt;","synthetic":true,"types":[]},{"text":"impl Send for GCSStorage","synthetic":true,"types":[]},{"text":"impl Send for RequestError","synthetic":true,"types":[]},{"text":"impl Send for EXT_STORAGE_CREATE_HISTOGRAM","synthetic":true,"types":[]}];
implementors["fail"] = [{"text":"impl&lt;'a&gt; !Send for FailScenario&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl Send for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SyncFailure&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["farmhash"] = [{"text":"impl Send for FarmHasher","synthetic":true,"types":[]}];
implementors["file_system"] = [{"text":"impl Send for File","synthetic":true,"types":[]},{"text":"impl Send for OpenOptions","synthetic":true,"types":[]},{"text":"impl Send for IOLatencyVec","synthetic":true,"types":[]},{"text":"impl Send for IOLatencyVec2","synthetic":true,"types":[]},{"text":"impl Send for IOBytesVec","synthetic":true,"types":[]},{"text":"impl Send for IOBytesVec2","synthetic":true,"types":[]},{"text":"impl Send for IOType","synthetic":true,"types":[]},{"text":"impl Send for IOOp","synthetic":true,"types":[]},{"text":"impl Send for IO_BYTES_VEC","synthetic":true,"types":[]},{"text":"impl Send for IO_LATENCY_MICROS_VEC","synthetic":true,"types":[]},{"text":"impl Send for BytesFetcher","synthetic":true,"types":[]},{"text":"impl Send for MetricsManager","synthetic":true,"types":[]},{"text":"impl Send for IORateLimiterStatistics","synthetic":true,"types":[]},{"text":"impl Send for IORateLimiter","synthetic":true,"types":[]},{"text":"impl Send for IO_RATE_LIMITER","synthetic":true,"types":[]},{"text":"impl Send for WithIORateLimit","synthetic":true,"types":[]},{"text":"impl Send for IOOp","synthetic":true,"types":[]},{"text":"impl Send for IOType","synthetic":true,"types":[]},{"text":"impl Send for WithIOType","synthetic":true,"types":[]},{"text":"impl Send for IOBytes","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Sha256Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl Send for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GzHeader","synthetic":true,"types":[]},{"text":"impl Send for GzBuilder","synthetic":true,"types":[]},{"text":"impl Send for Compress","synthetic":true,"types":[]},{"text":"impl Send for Decompress","synthetic":true,"types":[]},{"text":"impl Send for FlushCompress","synthetic":true,"types":[]},{"text":"impl Send for FlushDecompress","synthetic":true,"types":[]},{"text":"impl Send for DecompressError","synthetic":true,"types":[]},{"text":"impl Send for CompressError","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Compression","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Send for FnvHasher","synthetic":true,"types":[]}];
implementors["foreign_types_shared"] = [{"text":"impl Send for Opaque","synthetic":true,"types":[]}];
implementors["fs2"] = [{"text":"impl Send for FsStats","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Cancellation&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Canceled","synthetic":true,"types":[]}];
implementors["futures_executor"] = [{"text":"impl !Send for LocalPool","synthetic":true,"types":[]},{"text":"impl !Send for LocalSpawner","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for BlockingStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]},{"text":"impl Send for ThreadPoolBuilder","synthetic":true,"types":[]},{"text":"impl Send for Enter","synthetic":true,"types":[]},{"text":"impl Send for EnterError","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl Send for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FutureObj&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["futures_timer"] = [{"text":"impl Send for Delay","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; Send for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RemoteHandle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Remote&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; Send for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; Send for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Send for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Send for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Send for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Send for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Send for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Send for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Send for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Send for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Send for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AbortRegistration","synthetic":true,"types":[]},{"text":"impl Send for AbortHandle","synthetic":true,"types":[]},{"text":"impl Send for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Send for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Send for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; Send for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; Send for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; Send for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for BufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Buffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as Stream&gt;::Item as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for ForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SplitStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; Send for SplitSink&lt;S, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Send for ReuniteError&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; Send for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; Send for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Send for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Send for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryBufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; Send for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FuturesOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for SelectAll&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Close&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; Send for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Flush&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; Send for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; Send for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; Send for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; Send for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; Send for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; Send for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ex&gt; Send for Executor01As03&lt;Ex&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ex: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Compat01As03&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, SinkItem&gt; Send for Compat01As03Sink&lt;S, SinkItem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;SinkItem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Compat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Send for CompatSink&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Close&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Send for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Send for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Flush&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; Send for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for Read&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadVectored&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadExact&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadLine&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToEnd&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToString&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadUntil&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReadHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WriteHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReuniteError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Write&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteVectored&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteAll&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut:&nbsp;Send&gt; Send for FuturesUnordered&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for MutexLockFuture&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send, U:&nbsp;?Sized + Send&gt; Send for MappedMutexGuard&lt;'_, T, U&gt;","synthetic":false,"types":[]}];
implementors["fuzz"] = [{"text":"impl Send for WORKSPACE_ROOT","synthetic":true,"types":[]},{"text":"impl Send for FUZZ_ROOT","synthetic":true,"types":[]},{"text":"impl Send for FUZZ_TARGETS","synthetic":true,"types":[]},{"text":"impl Send for SEED_ROOT","synthetic":true,"types":[]},{"text":"impl Send for Cli","synthetic":true,"types":[]},{"text":"impl Send for Fuzzer","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl Send for FxHasher","synthetic":true,"types":[]},{"text":"impl Send for FxHasher64","synthetic":true,"types":[]},{"text":"impl Send for FxHasher32","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Send for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send, N:&nbsp;ArrayLength&lt;T&gt;&gt; Send for GenericArray&lt;T, N&gt;","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["grpcio"] = [{"text":"impl !Send for AuthContext","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for AuthPropertyIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for AuthProperty&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CallOption","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ClientUnaryReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ClientCStreamReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Req&gt; Send for StreamingCallSink&lt;Req&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Resp&gt; Send for ClientSStreamReceiver&lt;Resp&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Resp&gt; Send for ClientDuplexReceiver&lt;Resp&gt;","synthetic":true,"types":[]},{"text":"impl Send for Deadline","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RequestStream&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnarySinkResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnarySink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClientStreamingSinkResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ClientStreamingSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ServerStreamingSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for ServerStreamingSinkFailure","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DuplexSink&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for DuplexSinkFailure","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RpcContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RpcStatusCode","synthetic":true,"types":[]},{"text":"impl Send for MethodType","synthetic":true,"types":[]},{"text":"impl&lt;Req, Resp&gt; Send for Method&lt;Req, Resp&gt;","synthetic":true,"types":[]},{"text":"impl Send for RpcStatus","synthetic":true,"types":[]},{"text":"impl Send for WriteFlags","synthetic":true,"types":[]},{"text":"impl Send for OptTarget","synthetic":true,"types":[]},{"text":"impl Send for LbPolicy","synthetic":true,"types":[]},{"text":"impl !Send for ChannelBuilder","synthetic":true,"types":[]},{"text":"impl Send for Client","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Marshaller&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for EnvBuilder","synthetic":true,"types":[]},{"text":"impl Send for Environment","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for MetadataBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for MetadataIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for ResourceQuota","synthetic":true,"types":[]},{"text":"impl Send for CertificateRequestType","synthetic":true,"types":[]},{"text":"impl !Send for ServerCredentialsBuilder","synthetic":true,"types":[]},{"text":"impl Send for ChannelCredentialsBuilder","synthetic":true,"types":[]},{"text":"impl !Send for ChannelCredentials","synthetic":true,"types":[]},{"text":"impl Send for ServiceBuilder","synthetic":true,"types":[]},{"text":"impl Send for CheckResult","synthetic":true,"types":[]},{"text":"impl Send for Service","synthetic":true,"types":[]},{"text":"impl !Send for ServerBuilder","synthetic":true,"types":[]},{"text":"impl Send for ShutdownFuture","synthetic":true,"types":[]},{"text":"impl Send for Server","synthetic":true,"types":[]},{"text":"impl Send for GrpcSlice","synthetic":false,"types":[]},{"text":"impl Send for Channel","synthetic":false,"types":[]},{"text":"impl Send for Metadata","synthetic":false,"types":[]},{"text":"impl Send for ServerCredentials","synthetic":false,"types":[]}];
implementors["grpcio_sys"] = [{"text":"impl Send for grpc_compression_algorithm","synthetic":true,"types":[]},{"text":"impl Send for grpc_compression_level","synthetic":true,"types":[]},{"text":"impl Send for grpc_compression_options","synthetic":true,"types":[]},{"text":"impl Send for grpc_compression_options_grpc_compression_options_default_level","synthetic":true,"types":[]},{"text":"impl Send for grpc_compression_options_grpc_compression_options_default_algorithm","synthetic":true,"types":[]},{"text":"impl Send for grpc_slice_refcount","synthetic":true,"types":[]},{"text":"impl !Send for grpc_slice","synthetic":true,"types":[]},{"text":"impl !Send for grpc_slice_grpc_slice_data","synthetic":true,"types":[]},{"text":"impl !Send for grpc_slice_grpc_slice_data_grpc_slice_refcounted","synthetic":true,"types":[]},{"text":"impl Send for grpc_slice_grpc_slice_data_grpc_slice_inlined","synthetic":true,"types":[]},{"text":"impl !Send for grpc_slice_buffer","synthetic":true,"types":[]},{"text":"impl Send for gpr_clock_type","synthetic":true,"types":[]},{"text":"impl Send for gpr_timespec","synthetic":true,"types":[]},{"text":"impl Send for gpr_event","synthetic":true,"types":[]},{"text":"impl Send for gpr_refcount","synthetic":true,"types":[]},{"text":"impl Send for gpr_stats_counter","synthetic":true,"types":[]},{"text":"impl Send for grpc_slice_ref_whom","synthetic":true,"types":[]},{"text":"impl Send for grpc_byte_buffer_type","synthetic":true,"types":[]},{"text":"impl !Send for grpc_byte_buffer","synthetic":true,"types":[]},{"text":"impl !Send for grpc_byte_buffer_grpc_byte_buffer_data","synthetic":true,"types":[]},{"text":"impl !Send for grpc_byte_buffer_grpc_byte_buffer_data__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl !Send for grpc_byte_buffer_grpc_byte_buffer_data_grpc_compressed_buffer","synthetic":true,"types":[]},{"text":"impl Send for grpc_completion_queue","synthetic":true,"types":[]},{"text":"impl Send for grpc_alarm","synthetic":true,"types":[]},{"text":"impl Send for grpc_channel","synthetic":true,"types":[]},{"text":"impl Send for grpc_server","synthetic":true,"types":[]},{"text":"impl Send for grpc_call","synthetic":true,"types":[]},{"text":"impl Send for grpc_socket_mutator","synthetic":true,"types":[]},{"text":"impl Send for grpc_socket_factory","synthetic":true,"types":[]},{"text":"impl Send for grpc_arg_type","synthetic":true,"types":[]},{"text":"impl Send for grpc_arg_pointer_vtable","synthetic":true,"types":[]},{"text":"impl !Send for grpc_arg","synthetic":true,"types":[]},{"text":"impl !Send for grpc_arg_grpc_arg_value","synthetic":true,"types":[]},{"text":"impl !Send for grpc_arg_grpc_arg_value_grpc_arg_pointer","synthetic":true,"types":[]},{"text":"impl !Send for grpc_channel_args","synthetic":true,"types":[]},{"text":"impl Send for grpc_call_error","synthetic":true,"types":[]},{"text":"impl !Send for grpc_metadata","synthetic":true,"types":[]},{"text":"impl !Send for grpc_metadata__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Send for grpc_completion_type","synthetic":true,"types":[]},{"text":"impl !Send for grpc_event","synthetic":true,"types":[]},{"text":"impl !Send for grpc_metadata_array","synthetic":true,"types":[]},{"text":"impl !Send for grpc_call_details","synthetic":true,"types":[]},{"text":"impl Send for grpc_op_type","synthetic":true,"types":[]},{"text":"impl !Send for grpc_op","synthetic":true,"types":[]},{"text":"impl !Send for grpc_op_grpc_op_data","synthetic":true,"types":[]},{"text":"impl !Send for grpc_op_grpc_op_data__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl !Send for grpc_op_grpc_op_data_grpc_op_send_initial_metadata","synthetic":true,"types":[]},{"text":"impl Send for grpc_op_grpc_op_data_grpc_op_send_initial_metadata_grpc_op_send_initial_metadata_maybe_compression_level","synthetic":true,"types":[]},{"text":"impl !Send for grpc_op_grpc_op_data_grpc_op_send_message","synthetic":true,"types":[]},{"text":"impl !Send for grpc_op_grpc_op_data_grpc_op_send_status_from_server","synthetic":true,"types":[]},{"text":"impl !Send for grpc_op_grpc_op_data_grpc_op_recv_initial_metadata","synthetic":true,"types":[]},{"text":"impl !Send for grpc_op_grpc_op_data_grpc_op_recv_message","synthetic":true,"types":[]},{"text":"impl !Send for grpc_op_grpc_op_data_grpc_op_recv_status_on_client","synthetic":true,"types":[]},{"text":"impl !Send for grpc_op_grpc_op_data_grpc_op_recv_close_on_server","synthetic":true,"types":[]},{"text":"impl !Send for grpc_channel_info","synthetic":true,"types":[]},{"text":"impl Send for grpc_resource_quota","synthetic":true,"types":[]},{"text":"impl Send for grpc_cq_polling_type","synthetic":true,"types":[]},{"text":"impl Send for grpc_cq_completion_type","synthetic":true,"types":[]},{"text":"impl !Send for grpc_experimental_completion_queue_functor","synthetic":true,"types":[]},{"text":"impl !Send for grpc_completion_queue_attributes","synthetic":true,"types":[]},{"text":"impl Send for grpc_completion_queue_factory","synthetic":true,"types":[]},{"text":"impl Send for grpc_connectivity_state","synthetic":true,"types":[]},{"text":"impl Send for census_context","synthetic":true,"types":[]},{"text":"impl Send for grpc_server_register_method_payload_handling","synthetic":true,"types":[]},{"text":"impl Send for grpc_ssl_roots_override_result","synthetic":true,"types":[]},{"text":"impl Send for grpc_ssl_certificate_config_reload_status","synthetic":true,"types":[]},{"text":"impl Send for grpc_ssl_client_certificate_request_type","synthetic":true,"types":[]},{"text":"impl Send for grpc_security_level","synthetic":true,"types":[]},{"text":"impl Send for grpc_tls_server_verification_option","synthetic":true,"types":[]},{"text":"impl Send for grpc_local_connect_type","synthetic":true,"types":[]},{"text":"impl Send for grpc_tls_version","synthetic":true,"types":[]},{"text":"impl Send for grpc_auth_context","synthetic":true,"types":[]},{"text":"impl !Send for grpc_auth_property_iterator","synthetic":true,"types":[]},{"text":"impl !Send for grpc_auth_property","synthetic":true,"types":[]},{"text":"impl Send for grpc_ssl_session_cache","synthetic":true,"types":[]},{"text":"impl Send for grpc_call_credentials","synthetic":true,"types":[]},{"text":"impl Send for grpc_channel_credentials","synthetic":true,"types":[]},{"text":"impl !Send for grpc_ssl_pem_key_cert_pair","synthetic":true,"types":[]},{"text":"impl !Send for verify_peer_options","synthetic":true,"types":[]},{"text":"impl !Send for grpc_ssl_verify_peer_options","synthetic":true,"types":[]},{"text":"impl !Send for grpc_sts_credentials_options","synthetic":true,"types":[]},{"text":"impl !Send for grpc_auth_metadata_context","synthetic":true,"types":[]},{"text":"impl !Send for grpc_metadata_credentials_plugin","synthetic":true,"types":[]},{"text":"impl Send for grpc_server_credentials","synthetic":true,"types":[]},{"text":"impl Send for grpc_ssl_server_certificate_config","synthetic":true,"types":[]},{"text":"impl Send for grpc_ssl_server_credentials_options","synthetic":true,"types":[]},{"text":"impl !Send for grpc_auth_metadata_processor","synthetic":true,"types":[]},{"text":"impl Send for grpc_alts_credentials_options","synthetic":true,"types":[]},{"text":"impl Send for grpc_tls_error_details","synthetic":true,"types":[]},{"text":"impl Send for grpc_tls_key_materials_config","synthetic":true,"types":[]},{"text":"impl Send for grpc_tls_credential_reload_config","synthetic":true,"types":[]},{"text":"impl Send for grpc_tls_server_authorization_check_config","synthetic":true,"types":[]},{"text":"impl Send for grpc_tls_credentials_options","synthetic":true,"types":[]},{"text":"impl !Send for grpc_tls_credential_reload_arg","synthetic":true,"types":[]},{"text":"impl !Send for grpc_tls_server_authorization_check_arg","synthetic":true,"types":[]},{"text":"impl Send for gpr_log_severity","synthetic":true,"types":[]},{"text":"impl !Send for gpr_log_func_args","synthetic":true,"types":[]},{"text":"impl !Send for grpc_byte_buffer_reader","synthetic":true,"types":[]},{"text":"impl Send for grpc_byte_buffer_reader_grpc_byte_buffer_reader_current","synthetic":true,"types":[]},{"text":"impl !Send for grpcwrap_batch_context","synthetic":true,"types":[]},{"text":"impl !Send for grpcwrap_batch_context__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl !Send for grpcwrap_batch_context__bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl !Send for grpcwrap_request_call_context","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Reason","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ReadySendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Send for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl Send for PushPromise","synthetic":true,"types":[]},{"text":"impl Send for PushPromises","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendResponse&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendPushedResponse&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendStream&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StreamId","synthetic":true,"types":[]},{"text":"impl Send for RecvStream","synthetic":true,"types":[]},{"text":"impl Send for FlowControl","synthetic":true,"types":[]},{"text":"impl Send for PingPong","synthetic":true,"types":[]},{"text":"impl Send for Ping","synthetic":true,"types":[]},{"text":"impl Send for Pong","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Send for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Send for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl&lt;T&gt; Send for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Values&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ValuesMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for OccupiedEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HeaderName","synthetic":true,"types":[]},{"text":"impl Send for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl Send for HeaderValue","synthetic":true,"types":[]},{"text":"impl Send for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl Send for ToStrError","synthetic":true,"types":[]},{"text":"impl Send for Method","synthetic":true,"types":[]},{"text":"impl Send for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Request&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Response&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for StatusCode","synthetic":true,"types":[]},{"text":"impl Send for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl Send for Authority","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Scheme","synthetic":true,"types":[]},{"text":"impl Send for Uri","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for InvalidUri","synthetic":true,"types":[]},{"text":"impl Send for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Send for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for IterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for ValueIterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for ValueDrain&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for Data&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for Trailers&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Send for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Send for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Header&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl Send for Body","synthetic":true,"types":[]},{"text":"impl Send for Sender","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Name","synthetic":true,"types":[]},{"text":"impl Send for GaiResolver","synthetic":true,"types":[]},{"text":"impl Send for GaiAddrs","synthetic":true,"types":[]},{"text":"impl Send for GaiFuture","synthetic":true,"types":[]},{"text":"impl Send for InvalidNameError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HttpInfo","synthetic":true,"types":[]},{"text":"impl Send for Connected","synthetic":true,"types":[]},{"text":"impl&lt;C, B, T&gt; Send for Connect&lt;C, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; Send for Client&lt;C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for AddrIncoming","synthetic":true,"types":[]},{"text":"impl Send for AddrStream","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Http&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F, E&gt; Send for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S, E&gt; Send for Connection&lt;T, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as HttpService&lt;Body&gt;&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Parts&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, S, E&gt; Send for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for Builder&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Upgraded","synthetic":true,"types":[]},{"text":"impl Send for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_openssl"] = [{"text":"impl&lt;T&gt; Send for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T&gt; Send for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for HttpsConnecting&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ident_case"] = [{"text":"impl Send for RenameRule","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;T, S&gt; Send for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Send for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["inferno"] = [{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Folder","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Folder","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Folder","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Folder","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for Folder","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for FuncFrameAttrsMap","synthetic":true,"types":[]},{"text":"impl Send for PaletteMap","synthetic":true,"types":[]},{"text":"impl Send for BackgroundColor","synthetic":true,"types":[]},{"text":"impl Send for Palette","synthetic":true,"types":[]},{"text":"impl Send for BasicPalette","synthetic":true,"types":[]},{"text":"impl Send for MultiPalette","synthetic":true,"types":[]},{"text":"impl Send for SearchColor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Options&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Direction","synthetic":true,"types":[]},{"text":"impl Send for TextTruncateDirection","synthetic":true,"types":[]}];
implementors["iovec"] = [{"text":"impl Send for IoVec","synthetic":true,"types":[]}];
implementors["ipnet"] = [{"text":"impl Send for IpAddrRange","synthetic":true,"types":[]},{"text":"impl Send for Ipv4AddrRange","synthetic":true,"types":[]},{"text":"impl Send for Ipv6AddrRange","synthetic":true,"types":[]},{"text":"impl Send for IpNet","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Net","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Net","synthetic":true,"types":[]},{"text":"impl Send for PrefixLenError","synthetic":true,"types":[]},{"text":"impl Send for IpSubnets","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Subnets","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Subnets","synthetic":true,"types":[]},{"text":"impl Send for AddrParseError","synthetic":true,"types":[]}];
implementors["ipnetwork"] = [{"text":"impl Send for IpNetworkError","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Network","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Network","synthetic":true,"types":[]},{"text":"impl Send for IpNetwork","synthetic":true,"types":[]},{"text":"impl Send for NetworkSize","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, Pred&gt; Send for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Send for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for IntoChunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; Send for GroupBy&lt;K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Send for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Send for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["keys"] = [{"text":"impl Send for WrongPrefix","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["kvproto"] = [{"text":"impl Send for DebugClient","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for DuplicateRequest","synthetic":true,"types":[]},{"text":"impl Send for Compatibility","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for TxnInfo","synthetic":true,"types":[]},{"text":"impl Send for TxnStatus","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Event_oneof_event","synthetic":true,"types":[]},{"text":"impl Send for EventRow","synthetic":true,"types":[]},{"text":"impl Send for EventRowOpType","synthetic":true,"types":[]},{"text":"impl Send for EventEntries","synthetic":true,"types":[]},{"text":"impl Send for EventAdmin","synthetic":true,"types":[]},{"text":"impl Send for EventLongTxn","synthetic":true,"types":[]},{"text":"impl Send for EventLogType","synthetic":true,"types":[]},{"text":"impl Send for ChangeDataEvent","synthetic":true,"types":[]},{"text":"impl Send for ResolvedTs","synthetic":true,"types":[]},{"text":"impl Send for ChangeDataRequest","synthetic":true,"types":[]},{"text":"impl Send for ChangeDataRequest_oneof_request","synthetic":true,"types":[]},{"text":"impl Send for ChangeDataRequestRegister","synthetic":true,"types":[]},{"text":"impl Send for ChangeDataRequestNotifyTxnStatus","synthetic":true,"types":[]},{"text":"impl Send for ReplicationStatus","synthetic":true,"types":[]},{"text":"impl Send for DrAutoSync","synthetic":true,"types":[]},{"text":"impl Send for RegionReplicationStatus","synthetic":true,"types":[]},{"text":"impl Send for ReplicationMode","synthetic":true,"types":[]},{"text":"impl Send for DrAutoSyncState","synthetic":true,"types":[]},{"text":"impl Send for RegionReplicationState","synthetic":true,"types":[]},{"text":"impl Send for SearchLogRequest","synthetic":true,"types":[]},{"text":"impl Send for SearchLogRequestTarget","synthetic":true,"types":[]},{"text":"impl Send for SearchLogResponse","synthetic":true,"types":[]},{"text":"impl Send for LogMessage","synthetic":true,"types":[]},{"text":"impl Send for ServerInfoRequest","synthetic":true,"types":[]},{"text":"impl Send for ServerInfoPair","synthetic":true,"types":[]},{"text":"impl Send for ServerInfoItem","synthetic":true,"types":[]},{"text":"impl Send for ServerInfoResponse","synthetic":true,"types":[]},{"text":"impl Send for LogLevel","synthetic":true,"types":[]},{"text":"impl Send for ServerInfoType","synthetic":true,"types":[]},{"text":"impl Send for BackupClient","synthetic":true,"types":[]},{"text":"impl Send for EngineClient","synthetic":true,"types":[]},{"text":"impl Send for EncryptionMeta","synthetic":true,"types":[]},{"text":"impl Send for FileInfo","synthetic":true,"types":[]},{"text":"impl Send for FileDictionary","synthetic":true,"types":[]},{"text":"impl Send for DataKey","synthetic":true,"types":[]},{"text":"impl Send for KeyDictionary","synthetic":true,"types":[]},{"text":"impl Send for MasterKey","synthetic":true,"types":[]},{"text":"impl Send for MasterKey_oneof_backend","synthetic":true,"types":[]},{"text":"impl Send for MasterKeyPlaintext","synthetic":true,"types":[]},{"text":"impl Send for MasterKeyFile","synthetic":true,"types":[]},{"text":"impl Send for MasterKeyKms","synthetic":true,"types":[]},{"text":"impl Send for EncryptedContent","synthetic":true,"types":[]},{"text":"impl Send for EncryptionMethod","synthetic":true,"types":[]},{"text":"impl Send for WaitForEntriesRequest","synthetic":true,"types":[]},{"text":"impl Send for WaitForEntriesResponse","synthetic":true,"types":[]},{"text":"impl Send for WaitForEntry","synthetic":true,"types":[]},{"text":"impl Send for DeadlockRequest","synthetic":true,"types":[]},{"text":"impl Send for DeadlockResponse","synthetic":true,"types":[]},{"text":"impl Send for DeadlockRequestType","synthetic":true,"types":[]},{"text":"impl Send for CommandRequestHeader","synthetic":true,"types":[]},{"text":"impl Send for CommandRequest","synthetic":true,"types":[]},{"text":"impl Send for CommandRequestBatch","synthetic":true,"types":[]},{"text":"impl Send for CommandResponseHeader","synthetic":true,"types":[]},{"text":"impl Send for CommandResponse","synthetic":true,"types":[]},{"text":"impl Send for CommandResponseBatch","synthetic":true,"types":[]},{"text":"impl Send for SnapshotState","synthetic":true,"types":[]},{"text":"impl Send for SnapshotData","synthetic":true,"types":[]},{"text":"impl Send for SnapshotRequest","synthetic":true,"types":[]},{"text":"impl Send for SnapshotRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl Send for SnapshotDone","synthetic":true,"types":[]},{"text":"impl Send for Cluster","synthetic":true,"types":[]},{"text":"impl Send for StoreLabel","synthetic":true,"types":[]},{"text":"impl Send for Store","synthetic":true,"types":[]},{"text":"impl Send for RegionEpoch","synthetic":true,"types":[]},{"text":"impl Send for Region","synthetic":true,"types":[]},{"text":"impl Send for Peer","synthetic":true,"types":[]},{"text":"impl Send for StoreState","synthetic":true,"types":[]},{"text":"impl Send for PeerRole","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Local","synthetic":true,"types":[]},{"text":"impl Send for Global","synthetic":true,"types":[]},{"text":"impl Send for ConfigKind","synthetic":true,"types":[]},{"text":"impl Send for ConfigKind_oneof_kind","synthetic":true,"types":[]},{"text":"impl Send for ConfigEntry","synthetic":true,"types":[]},{"text":"impl Send for LocalConfig","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for CreateRequest","synthetic":true,"types":[]},{"text":"impl Send for CreateResponse","synthetic":true,"types":[]},{"text":"impl Send for GetAllRequest","synthetic":true,"types":[]},{"text":"impl Send for GetAllResponse","synthetic":true,"types":[]},{"text":"impl Send for GetRequest","synthetic":true,"types":[]},{"text":"impl Send for GetResponse","synthetic":true,"types":[]},{"text":"impl Send for UpdateRequest","synthetic":true,"types":[]},{"text":"impl Send for UpdateResponse","synthetic":true,"types":[]},{"text":"impl Send for DeleteRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteResponse","synthetic":true,"types":[]},{"text":"impl Send for StatusCode","synthetic":true,"types":[]},{"text":"impl Send for SpanSet","synthetic":true,"types":[]},{"text":"impl Send for Root","synthetic":true,"types":[]},{"text":"impl Send for Parent","synthetic":true,"types":[]},{"text":"impl Send for Continue","synthetic":true,"types":[]},{"text":"impl Send for Link","synthetic":true,"types":[]},{"text":"impl Send for Link_oneof_link","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for GetRequest","synthetic":true,"types":[]},{"text":"impl Send for GetResponse","synthetic":true,"types":[]},{"text":"impl Send for PutRequest","synthetic":true,"types":[]},{"text":"impl Send for PutResponse","synthetic":true,"types":[]},{"text":"impl Send for DeleteRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteResponse","synthetic":true,"types":[]},{"text":"impl Send for DeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl Send for SnapRequest","synthetic":true,"types":[]},{"text":"impl Send for SnapResponse","synthetic":true,"types":[]},{"text":"impl Send for PrewriteRequest","synthetic":true,"types":[]},{"text":"impl Send for PrewriteResponse","synthetic":true,"types":[]},{"text":"impl Send for IngestSstRequest","synthetic":true,"types":[]},{"text":"impl Send for IngestSstResponse","synthetic":true,"types":[]},{"text":"impl Send for ReadIndexRequest","synthetic":true,"types":[]},{"text":"impl Send for ReadIndexResponse","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]},{"text":"impl Send for ChangePeerRequest","synthetic":true,"types":[]},{"text":"impl Send for ChangePeerResponse","synthetic":true,"types":[]},{"text":"impl Send for ChangePeerV2Request","synthetic":true,"types":[]},{"text":"impl Send for ChangePeerV2Response","synthetic":true,"types":[]},{"text":"impl Send for SplitRequest","synthetic":true,"types":[]},{"text":"impl Send for SplitResponse","synthetic":true,"types":[]},{"text":"impl Send for BatchSplitRequest","synthetic":true,"types":[]},{"text":"impl Send for BatchSplitResponse","synthetic":true,"types":[]},{"text":"impl Send for CompactLogRequest","synthetic":true,"types":[]},{"text":"impl Send for CompactLogResponse","synthetic":true,"types":[]},{"text":"impl Send for TransferLeaderRequest","synthetic":true,"types":[]},{"text":"impl Send for TransferLeaderResponse","synthetic":true,"types":[]},{"text":"impl Send for ComputeHashRequest","synthetic":true,"types":[]},{"text":"impl Send for VerifyHashRequest","synthetic":true,"types":[]},{"text":"impl Send for VerifyHashResponse","synthetic":true,"types":[]},{"text":"impl Send for PrepareMergeRequest","synthetic":true,"types":[]},{"text":"impl Send for PrepareMergeResponse","synthetic":true,"types":[]},{"text":"impl Send for CommitMergeRequest","synthetic":true,"types":[]},{"text":"impl Send for CommitMergeResponse","synthetic":true,"types":[]},{"text":"impl Send for RollbackMergeRequest","synthetic":true,"types":[]},{"text":"impl Send for RollbackMergeResponse","synthetic":true,"types":[]},{"text":"impl Send for AdminRequest","synthetic":true,"types":[]},{"text":"impl Send for AdminResponse","synthetic":true,"types":[]},{"text":"impl Send for RegionLeaderRequest","synthetic":true,"types":[]},{"text":"impl Send for RegionLeaderResponse","synthetic":true,"types":[]},{"text":"impl Send for RegionDetailRequest","synthetic":true,"types":[]},{"text":"impl Send for RegionDetailResponse","synthetic":true,"types":[]},{"text":"impl Send for StatusRequest","synthetic":true,"types":[]},{"text":"impl Send for StatusResponse","synthetic":true,"types":[]},{"text":"impl Send for RaftRequestHeader","synthetic":true,"types":[]},{"text":"impl Send for RaftResponseHeader","synthetic":true,"types":[]},{"text":"impl Send for RaftCmdRequest","synthetic":true,"types":[]},{"text":"impl Send for RaftCmdResponse","synthetic":true,"types":[]},{"text":"impl Send for CmdType","synthetic":true,"types":[]},{"text":"impl Send for AdminCmdType","synthetic":true,"types":[]},{"text":"impl Send for StatusCmdType","synthetic":true,"types":[]},{"text":"impl Send for TaskMeta","synthetic":true,"types":[]},{"text":"impl Send for DispatchTaskRequest","synthetic":true,"types":[]},{"text":"impl Send for DispatchTaskResponse","synthetic":true,"types":[]},{"text":"impl Send for CancelTaskRequest","synthetic":true,"types":[]},{"text":"impl Send for CancelTaskResponse","synthetic":true,"types":[]},{"text":"impl Send for EstablishMppConnectionRequest","synthetic":true,"types":[]},{"text":"impl Send for MppDataPacket","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for SwitchModeRequest","synthetic":true,"types":[]},{"text":"impl Send for SwitchModeResponse","synthetic":true,"types":[]},{"text":"impl Send for Range","synthetic":true,"types":[]},{"text":"impl Send for SstMeta","synthetic":true,"types":[]},{"text":"impl Send for RewriteRule","synthetic":true,"types":[]},{"text":"impl Send for UploadRequest","synthetic":true,"types":[]},{"text":"impl Send for UploadRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl Send for UploadResponse","synthetic":true,"types":[]},{"text":"impl Send for IngestRequest","synthetic":true,"types":[]},{"text":"impl Send for IngestResponse","synthetic":true,"types":[]},{"text":"impl Send for CompactRequest","synthetic":true,"types":[]},{"text":"impl Send for CompactResponse","synthetic":true,"types":[]},{"text":"impl Send for DownloadRequest","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for DownloadResponse","synthetic":true,"types":[]},{"text":"impl Send for SetDownloadSpeedLimitRequest","synthetic":true,"types":[]},{"text":"impl Send for SetDownloadSpeedLimitResponse","synthetic":true,"types":[]},{"text":"impl Send for Pair","synthetic":true,"types":[]},{"text":"impl Send for PairOp","synthetic":true,"types":[]},{"text":"impl Send for WriteBatch","synthetic":true,"types":[]},{"text":"impl Send for WriteRequest","synthetic":true,"types":[]},{"text":"impl Send for WriteRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl Send for WriteResponse","synthetic":true,"types":[]},{"text":"impl Send for SwitchMode","synthetic":true,"types":[]},{"text":"impl Send for TikvClient","synthetic":true,"types":[]},{"text":"impl Send for GetRequest","synthetic":true,"types":[]},{"text":"impl Send for GetResponse","synthetic":true,"types":[]},{"text":"impl Send for RaftLogRequest","synthetic":true,"types":[]},{"text":"impl Send for RaftLogResponse","synthetic":true,"types":[]},{"text":"impl Send for RegionInfoRequest","synthetic":true,"types":[]},{"text":"impl Send for RegionInfoResponse","synthetic":true,"types":[]},{"text":"impl Send for RegionSizeRequest","synthetic":true,"types":[]},{"text":"impl Send for RegionSizeResponse","synthetic":true,"types":[]},{"text":"impl Send for RegionSizeResponseEntry","synthetic":true,"types":[]},{"text":"impl Send for ScanMvccRequest","synthetic":true,"types":[]},{"text":"impl Send for ScanMvccResponse","synthetic":true,"types":[]},{"text":"impl Send for CompactRequest","synthetic":true,"types":[]},{"text":"impl Send for CompactResponse","synthetic":true,"types":[]},{"text":"impl Send for InjectFailPointRequest","synthetic":true,"types":[]},{"text":"impl Send for InjectFailPointResponse","synthetic":true,"types":[]},{"text":"impl Send for RecoverFailPointRequest","synthetic":true,"types":[]},{"text":"impl Send for RecoverFailPointResponse","synthetic":true,"types":[]},{"text":"impl Send for ListFailPointsRequest","synthetic":true,"types":[]},{"text":"impl Send for ListFailPointsResponse","synthetic":true,"types":[]},{"text":"impl Send for ListFailPointsResponseEntry","synthetic":true,"types":[]},{"text":"impl Send for GetMetricsRequest","synthetic":true,"types":[]},{"text":"impl Send for GetMetricsResponse","synthetic":true,"types":[]},{"text":"impl Send for RegionConsistencyCheckRequest","synthetic":true,"types":[]},{"text":"impl Send for RegionConsistencyCheckResponse","synthetic":true,"types":[]},{"text":"impl Send for ModifyTikvConfigRequest","synthetic":true,"types":[]},{"text":"impl Send for ModifyTikvConfigResponse","synthetic":true,"types":[]},{"text":"impl Send for Property","synthetic":true,"types":[]},{"text":"impl Send for GetRegionPropertiesRequest","synthetic":true,"types":[]},{"text":"impl Send for GetRegionPropertiesResponse","synthetic":true,"types":[]},{"text":"impl Send for GetStoreInfoRequest","synthetic":true,"types":[]},{"text":"impl Send for GetStoreInfoResponse","synthetic":true,"types":[]},{"text":"impl Send for GetClusterInfoRequest","synthetic":true,"types":[]},{"text":"impl Send for GetClusterInfoResponse","synthetic":true,"types":[]},{"text":"impl Send for Db","synthetic":true,"types":[]},{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl Send for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl Send for ImportSstClient","synthetic":true,"types":[]},{"text":"impl Send for ConfigClient","synthetic":true,"types":[]},{"text":"impl Send for DeadlockClient","synthetic":true,"types":[]},{"text":"impl Send for ChangeDataClient","synthetic":true,"types":[]},{"text":"impl Send for GetRequest","synthetic":true,"types":[]},{"text":"impl Send for GetResponse","synthetic":true,"types":[]},{"text":"impl Send for ScanRequest","synthetic":true,"types":[]},{"text":"impl Send for ScanResponse","synthetic":true,"types":[]},{"text":"impl Send for PrewriteRequest","synthetic":true,"types":[]},{"text":"impl Send for PrewriteResponse","synthetic":true,"types":[]},{"text":"impl Send for PessimisticLockRequest","synthetic":true,"types":[]},{"text":"impl Send for PessimisticLockResponse","synthetic":true,"types":[]},{"text":"impl Send for PessimisticRollbackRequest","synthetic":true,"types":[]},{"text":"impl Send for PessimisticRollbackResponse","synthetic":true,"types":[]},{"text":"impl Send for TxnHeartBeatRequest","synthetic":true,"types":[]},{"text":"impl Send for TxnHeartBeatResponse","synthetic":true,"types":[]},{"text":"impl Send for CheckTxnStatusRequest","synthetic":true,"types":[]},{"text":"impl Send for CheckTxnStatusResponse","synthetic":true,"types":[]},{"text":"impl Send for CheckSecondaryLocksRequest","synthetic":true,"types":[]},{"text":"impl Send for CheckSecondaryLocksResponse","synthetic":true,"types":[]},{"text":"impl Send for CommitRequest","synthetic":true,"types":[]},{"text":"impl Send for CommitResponse","synthetic":true,"types":[]},{"text":"impl Send for ImportRequest","synthetic":true,"types":[]},{"text":"impl Send for ImportResponse","synthetic":true,"types":[]},{"text":"impl Send for CleanupRequest","synthetic":true,"types":[]},{"text":"impl Send for CleanupResponse","synthetic":true,"types":[]},{"text":"impl Send for BatchGetRequest","synthetic":true,"types":[]},{"text":"impl Send for BatchGetResponse","synthetic":true,"types":[]},{"text":"impl Send for BatchRollbackRequest","synthetic":true,"types":[]},{"text":"impl Send for BatchRollbackResponse","synthetic":true,"types":[]},{"text":"impl Send for ScanLockRequest","synthetic":true,"types":[]},{"text":"impl Send for ScanLockResponse","synthetic":true,"types":[]},{"text":"impl Send for ResolveLockRequest","synthetic":true,"types":[]},{"text":"impl Send for ResolveLockResponse","synthetic":true,"types":[]},{"text":"impl Send for GcRequest","synthetic":true,"types":[]},{"text":"impl Send for GcResponse","synthetic":true,"types":[]},{"text":"impl Send for DeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl Send for RawGetRequest","synthetic":true,"types":[]},{"text":"impl Send for RawGetResponse","synthetic":true,"types":[]},{"text":"impl Send for RawBatchGetRequest","synthetic":true,"types":[]},{"text":"impl Send for RawBatchGetResponse","synthetic":true,"types":[]},{"text":"impl Send for RawPutRequest","synthetic":true,"types":[]},{"text":"impl Send for RawPutResponse","synthetic":true,"types":[]},{"text":"impl Send for RawBatchPutRequest","synthetic":true,"types":[]},{"text":"impl Send for RawBatchPutResponse","synthetic":true,"types":[]},{"text":"impl Send for RawDeleteRequest","synthetic":true,"types":[]},{"text":"impl Send for RawDeleteResponse","synthetic":true,"types":[]},{"text":"impl Send for RawBatchDeleteRequest","synthetic":true,"types":[]},{"text":"impl Send for RawBatchDeleteResponse","synthetic":true,"types":[]},{"text":"impl Send for RawScanRequest","synthetic":true,"types":[]},{"text":"impl Send for RawScanResponse","synthetic":true,"types":[]},{"text":"impl Send for RawDeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl Send for RawDeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl Send for RawBatchScanRequest","synthetic":true,"types":[]},{"text":"impl Send for RawBatchScanResponse","synthetic":true,"types":[]},{"text":"impl Send for UnsafeDestroyRangeRequest","synthetic":true,"types":[]},{"text":"impl Send for UnsafeDestroyRangeResponse","synthetic":true,"types":[]},{"text":"impl Send for RegisterLockObserverRequest","synthetic":true,"types":[]},{"text":"impl Send for RegisterLockObserverResponse","synthetic":true,"types":[]},{"text":"impl Send for CheckLockObserverRequest","synthetic":true,"types":[]},{"text":"impl Send for CheckLockObserverResponse","synthetic":true,"types":[]},{"text":"impl Send for RemoveLockObserverRequest","synthetic":true,"types":[]},{"text":"impl Send for RemoveLockObserverResponse","synthetic":true,"types":[]},{"text":"impl Send for PhysicalScanLockRequest","synthetic":true,"types":[]},{"text":"impl Send for PhysicalScanLockResponse","synthetic":true,"types":[]},{"text":"impl Send for SplitRegionRequest","synthetic":true,"types":[]},{"text":"impl Send for SplitRegionResponse","synthetic":true,"types":[]},{"text":"impl Send for ReadIndexRequest","synthetic":true,"types":[]},{"text":"impl Send for ReadIndexResponse","synthetic":true,"types":[]},{"text":"impl Send for VerMutation","synthetic":true,"types":[]},{"text":"impl Send for VerValue","synthetic":true,"types":[]},{"text":"impl Send for VerError","synthetic":true,"types":[]},{"text":"impl Send for VerKvPair","synthetic":true,"types":[]},{"text":"impl Send for VerGetRequest","synthetic":true,"types":[]},{"text":"impl Send for VerGetResponse","synthetic":true,"types":[]},{"text":"impl Send for VerBatchGetRequest","synthetic":true,"types":[]},{"text":"impl Send for VerBatchGetResponse","synthetic":true,"types":[]},{"text":"impl Send for VerMutRequest","synthetic":true,"types":[]},{"text":"impl Send for VerMutResponse","synthetic":true,"types":[]},{"text":"impl Send for VerBatchMutRequest","synthetic":true,"types":[]},{"text":"impl Send for VerBatchMutResponse","synthetic":true,"types":[]},{"text":"impl Send for VerScanRequest","synthetic":true,"types":[]},{"text":"impl Send for VerScanResponse","synthetic":true,"types":[]},{"text":"impl Send for VerDeleteRangeRequest","synthetic":true,"types":[]},{"text":"impl Send for VerDeleteRangeResponse","synthetic":true,"types":[]},{"text":"impl Send for MvccGetByKeyRequest","synthetic":true,"types":[]},{"text":"impl Send for MvccGetByKeyResponse","synthetic":true,"types":[]},{"text":"impl Send for MvccGetByStartTsRequest","synthetic":true,"types":[]},{"text":"impl Send for MvccGetByStartTsResponse","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for LockInfo","synthetic":true,"types":[]},{"text":"impl Send for KeyError","synthetic":true,"types":[]},{"text":"impl Send for WriteConflict","synthetic":true,"types":[]},{"text":"impl Send for AlreadyExist","synthetic":true,"types":[]},{"text":"impl Send for Deadlock","synthetic":true,"types":[]},{"text":"impl Send for CommitTsExpired","synthetic":true,"types":[]},{"text":"impl Send for TxnNotFound","synthetic":true,"types":[]},{"text":"impl Send for CommitTsTooLarge","synthetic":true,"types":[]},{"text":"impl Send for TimeDetail","synthetic":true,"types":[]},{"text":"impl Send for ScanInfo","synthetic":true,"types":[]},{"text":"impl Send for ScanDetail","synthetic":true,"types":[]},{"text":"impl Send for ScanDetailV2","synthetic":true,"types":[]},{"text":"impl Send for ExecDetails","synthetic":true,"types":[]},{"text":"impl Send for ExecDetailsV2","synthetic":true,"types":[]},{"text":"impl Send for KvPair","synthetic":true,"types":[]},{"text":"impl Send for Mutation","synthetic":true,"types":[]},{"text":"impl Send for MvccWrite","synthetic":true,"types":[]},{"text":"impl Send for MvccValue","synthetic":true,"types":[]},{"text":"impl Send for MvccLock","synthetic":true,"types":[]},{"text":"impl Send for MvccInfo","synthetic":true,"types":[]},{"text":"impl Send for TxnInfo","synthetic":true,"types":[]},{"text":"impl Send for KeyRange","synthetic":true,"types":[]},{"text":"impl Send for LeaderInfo","synthetic":true,"types":[]},{"text":"impl Send for CheckLeaderRequest","synthetic":true,"types":[]},{"text":"impl Send for CheckLeaderResponse","synthetic":true,"types":[]},{"text":"impl Send for VerOp","synthetic":true,"types":[]},{"text":"impl Send for CommandPri","synthetic":true,"types":[]},{"text":"impl Send for IsolationLevel","synthetic":true,"types":[]},{"text":"impl Send for Op","synthetic":true,"types":[]},{"text":"impl Send for Assertion","synthetic":true,"types":[]},{"text":"impl Send for Action","synthetic":true,"types":[]},{"text":"impl Send for ExtraOp","synthetic":true,"types":[]},{"text":"impl Send for RaftMessage","synthetic":true,"types":[]},{"text":"impl Send for RaftTruncatedState","synthetic":true,"types":[]},{"text":"impl Send for SnapshotCfFile","synthetic":true,"types":[]},{"text":"impl Send for SnapshotMeta","synthetic":true,"types":[]},{"text":"impl Send for SnapshotChunk","synthetic":true,"types":[]},{"text":"impl Send for Done","synthetic":true,"types":[]},{"text":"impl Send for KeyValue","synthetic":true,"types":[]},{"text":"impl Send for RaftSnapshotData","synthetic":true,"types":[]},{"text":"impl Send for StoreIdent","synthetic":true,"types":[]},{"text":"impl Send for RaftLocalState","synthetic":true,"types":[]},{"text":"impl Send for RaftApplyState","synthetic":true,"types":[]},{"text":"impl Send for MergeState","synthetic":true,"types":[]},{"text":"impl Send for RegionLocalState","synthetic":true,"types":[]},{"text":"impl Send for ExtraMessage","synthetic":true,"types":[]},{"text":"impl Send for PeerState","synthetic":true,"types":[]},{"text":"impl Send for ExtraMessageType","synthetic":true,"types":[]},{"text":"impl Send for SwitchModeRequest","synthetic":true,"types":[]},{"text":"impl Send for SwitchModeResponse","synthetic":true,"types":[]},{"text":"impl Send for OpenEngineRequest","synthetic":true,"types":[]},{"text":"impl Send for OpenEngineResponse","synthetic":true,"types":[]},{"text":"impl Send for WriteHead","synthetic":true,"types":[]},{"text":"impl Send for Mutation","synthetic":true,"types":[]},{"text":"impl Send for MutationOp","synthetic":true,"types":[]},{"text":"impl Send for WriteBatch","synthetic":true,"types":[]},{"text":"impl Send for WriteEngineRequest","synthetic":true,"types":[]},{"text":"impl Send for WriteEngineRequest_oneof_chunk","synthetic":true,"types":[]},{"text":"impl Send for KvPair","synthetic":true,"types":[]},{"text":"impl Send for WriteEngineV3Request","synthetic":true,"types":[]},{"text":"impl Send for WriteEngineResponse","synthetic":true,"types":[]},{"text":"impl Send for CloseEngineRequest","synthetic":true,"types":[]},{"text":"impl Send for CloseEngineResponse","synthetic":true,"types":[]},{"text":"impl Send for ImportEngineRequest","synthetic":true,"types":[]},{"text":"impl Send for ImportEngineResponse","synthetic":true,"types":[]},{"text":"impl Send for CleanupEngineRequest","synthetic":true,"types":[]},{"text":"impl Send for CleanupEngineResponse","synthetic":true,"types":[]},{"text":"impl Send for CompactClusterRequest","synthetic":true,"types":[]},{"text":"impl Send for CompactClusterResponse","synthetic":true,"types":[]},{"text":"impl Send for GetVersionRequest","synthetic":true,"types":[]},{"text":"impl Send for GetVersionResponse","synthetic":true,"types":[]},{"text":"impl Send for GetMetricsRequest","synthetic":true,"types":[]},{"text":"impl Send for GetMetricsResponse","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorEngineNotFound","synthetic":true,"types":[]},{"text":"impl Send for BackupMeta","synthetic":true,"types":[]},{"text":"impl Send for File","synthetic":true,"types":[]},{"text":"impl Send for Schema","synthetic":true,"types":[]},{"text":"impl Send for RawRange","synthetic":true,"types":[]},{"text":"impl Send for ClusterIdError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Error_oneof_detail","synthetic":true,"types":[]},{"text":"impl Send for BackupRequest","synthetic":true,"types":[]},{"text":"impl Send for StorageBackend","synthetic":true,"types":[]},{"text":"impl Send for StorageBackend_oneof_backend","synthetic":true,"types":[]},{"text":"impl Send for Noop","synthetic":true,"types":[]},{"text":"impl Send for Local","synthetic":true,"types":[]},{"text":"impl Send for S3","synthetic":true,"types":[]},{"text":"impl Send for Gcs","synthetic":true,"types":[]},{"text":"impl Send for BackupResponse","synthetic":true,"types":[]},{"text":"impl Send for CompressionType","synthetic":true,"types":[]},{"text":"impl Send for ImportKvClient","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticsClient","synthetic":true,"types":[]},{"text":"impl Send for PdClient","synthetic":true,"types":[]},{"text":"impl Send for BatchCommandsRequest","synthetic":true,"types":[]},{"text":"impl Send for BatchCommandsRequestRequest","synthetic":true,"types":[]},{"text":"impl Send for BatchCommandsRequest_Request_oneof_cmd","synthetic":true,"types":[]},{"text":"impl Send for BatchCommandsResponse","synthetic":true,"types":[]},{"text":"impl Send for BatchCommandsResponseResponse","synthetic":true,"types":[]},{"text":"impl Send for BatchCommandsResponse_Response_oneof_cmd","synthetic":true,"types":[]},{"text":"impl Send for BatchRaftMessage","synthetic":true,"types":[]},{"text":"impl Send for BatchCommandsEmptyRequest","synthetic":true,"types":[]},{"text":"impl Send for BatchCommandsEmptyResponse","synthetic":true,"types":[]},{"text":"impl Send for NotLeader","synthetic":true,"types":[]},{"text":"impl Send for StoreNotMatch","synthetic":true,"types":[]},{"text":"impl Send for RegionNotFound","synthetic":true,"types":[]},{"text":"impl Send for KeyNotInRegion","synthetic":true,"types":[]},{"text":"impl Send for EpochNotMatch","synthetic":true,"types":[]},{"text":"impl Send for ServerIsBusy","synthetic":true,"types":[]},{"text":"impl Send for StaleCommand","synthetic":true,"types":[]},{"text":"impl Send for RaftEntryTooLarge","synthetic":true,"types":[]},{"text":"impl Send for MaxTimestampNotSynced","synthetic":true,"types":[]},{"text":"impl Send for ReadIndexNotReady","synthetic":true,"types":[]},{"text":"impl Send for ProposalInMergingMode","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RequestHeader","synthetic":true,"types":[]},{"text":"impl Send for ResponseHeader","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for TsoRequest","synthetic":true,"types":[]},{"text":"impl Send for Timestamp","synthetic":true,"types":[]},{"text":"impl Send for TsoResponse","synthetic":true,"types":[]},{"text":"impl Send for BootstrapRequest","synthetic":true,"types":[]},{"text":"impl Send for BootstrapResponse","synthetic":true,"types":[]},{"text":"impl Send for IsBootstrappedRequest","synthetic":true,"types":[]},{"text":"impl Send for IsBootstrappedResponse","synthetic":true,"types":[]},{"text":"impl Send for AllocIdRequest","synthetic":true,"types":[]},{"text":"impl Send for AllocIdResponse","synthetic":true,"types":[]},{"text":"impl Send for GetStoreRequest","synthetic":true,"types":[]},{"text":"impl Send for GetStoreResponse","synthetic":true,"types":[]},{"text":"impl Send for PutStoreRequest","synthetic":true,"types":[]},{"text":"impl Send for PutStoreResponse","synthetic":true,"types":[]},{"text":"impl Send for GetAllStoresRequest","synthetic":true,"types":[]},{"text":"impl Send for GetAllStoresResponse","synthetic":true,"types":[]},{"text":"impl Send for GetRegionRequest","synthetic":true,"types":[]},{"text":"impl Send for GetRegionResponse","synthetic":true,"types":[]},{"text":"impl Send for GetRegionByIdRequest","synthetic":true,"types":[]},{"text":"impl Send for ScanRegionsRequest","synthetic":true,"types":[]},{"text":"impl Send for Region","synthetic":true,"types":[]},{"text":"impl Send for ScanRegionsResponse","synthetic":true,"types":[]},{"text":"impl Send for GetClusterConfigRequest","synthetic":true,"types":[]},{"text":"impl Send for GetClusterConfigResponse","synthetic":true,"types":[]},{"text":"impl Send for PutClusterConfigRequest","synthetic":true,"types":[]},{"text":"impl Send for PutClusterConfigResponse","synthetic":true,"types":[]},{"text":"impl Send for Member","synthetic":true,"types":[]},{"text":"impl Send for GetMembersRequest","synthetic":true,"types":[]},{"text":"impl Send for GetMembersResponse","synthetic":true,"types":[]},{"text":"impl Send for PeerStats","synthetic":true,"types":[]},{"text":"impl Send for RegionHeartbeatRequest","synthetic":true,"types":[]},{"text":"impl Send for ChangePeer","synthetic":true,"types":[]},{"text":"impl Send for ChangePeerV2","synthetic":true,"types":[]},{"text":"impl Send for TransferLeader","synthetic":true,"types":[]},{"text":"impl Send for Merge","synthetic":true,"types":[]},{"text":"impl Send for SplitRegion","synthetic":true,"types":[]},{"text":"impl Send for RegionHeartbeatResponse","synthetic":true,"types":[]},{"text":"impl Send for AskSplitRequest","synthetic":true,"types":[]},{"text":"impl Send for AskSplitResponse","synthetic":true,"types":[]},{"text":"impl Send for ReportSplitRequest","synthetic":true,"types":[]},{"text":"impl Send for ReportSplitResponse","synthetic":true,"types":[]},{"text":"impl Send for AskBatchSplitRequest","synthetic":true,"types":[]},{"text":"impl Send for SplitId","synthetic":true,"types":[]},{"text":"impl Send for AskBatchSplitResponse","synthetic":true,"types":[]},{"text":"impl Send for ReportBatchSplitRequest","synthetic":true,"types":[]},{"text":"impl Send for ReportBatchSplitResponse","synthetic":true,"types":[]},{"text":"impl Send for TimeInterval","synthetic":true,"types":[]},{"text":"impl Send for RecordPair","synthetic":true,"types":[]},{"text":"impl Send for StoreStats","synthetic":true,"types":[]},{"text":"impl Send for StoreHeartbeatRequest","synthetic":true,"types":[]},{"text":"impl Send for StoreHeartbeatResponse","synthetic":true,"types":[]},{"text":"impl Send for ScatterRegionRequest","synthetic":true,"types":[]},{"text":"impl Send for ScatterRegionResponse","synthetic":true,"types":[]},{"text":"impl Send for GetGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl Send for GetGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl Send for UpdateGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl Send for UpdateGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl Send for UpdateServiceGcSafePointRequest","synthetic":true,"types":[]},{"text":"impl Send for UpdateServiceGcSafePointResponse","synthetic":true,"types":[]},{"text":"impl Send for RegionStat","synthetic":true,"types":[]},{"text":"impl Send for SyncRegionRequest","synthetic":true,"types":[]},{"text":"impl Send for SyncRegionResponse","synthetic":true,"types":[]},{"text":"impl Send for GetOperatorRequest","synthetic":true,"types":[]},{"text":"impl Send for GetOperatorResponse","synthetic":true,"types":[]},{"text":"impl Send for SyncMaxTsRequest","synthetic":true,"types":[]},{"text":"impl Send for SyncMaxTsResponse","synthetic":true,"types":[]},{"text":"impl Send for SplitRegionsRequest","synthetic":true,"types":[]},{"text":"impl Send for SplitRegionsResponse","synthetic":true,"types":[]},{"text":"impl Send for GetDcLocationInfoRequest","synthetic":true,"types":[]},{"text":"impl Send for GetDcLocationInfoResponse","synthetic":true,"types":[]},{"text":"impl Send for ErrorType","synthetic":true,"types":[]},{"text":"impl Send for CheckPolicy","synthetic":true,"types":[]},{"text":"impl Send for OperatorStatus","synthetic":true,"types":[]},{"text":"impl Send for KeyRange","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]},{"text":"impl Send for RegionInfo","synthetic":true,"types":[]},{"text":"impl Send for BatchRequest","synthetic":true,"types":[]},{"text":"impl Send for BatchResponse","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl Send for flock64","synthetic":true,"types":[]},{"text":"impl Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for stat64","synthetic":true,"types":[]},{"text":"impl Send for statfs64","synthetic":true,"types":[]},{"text":"impl Send for statvfs64","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Send for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Send for user","synthetic":true,"types":[]},{"text":"impl !Send for mcontext_t","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for termios2","synthetic":true,"types":[]},{"text":"impl Send for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Send for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for sigset_t","synthetic":true,"types":[]},{"text":"impl Send for sysinfo","synthetic":true,"types":[]},{"text":"impl Send for msqid_ds","synthetic":true,"types":[]},{"text":"impl Send for sem_t","synthetic":true,"types":[]},{"text":"impl Send for statx","synthetic":true,"types":[]},{"text":"impl Send for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl Send for __exit_status","synthetic":true,"types":[]},{"text":"impl Send for __timeval","synthetic":true,"types":[]},{"text":"impl !Send for glob64_t","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for mallinfo","synthetic":true,"types":[]},{"text":"impl Send for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Send for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Send for nlattr","synthetic":true,"types":[]},{"text":"impl !Send for rtentry","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl Send for fpos64_t","synthetic":true,"types":[]},{"text":"impl Send for rlimit64","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for spwd","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Send for itimerspec","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl Send for packet_mreq","synthetic":true,"types":[]},{"text":"impl Send for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl Send for msginfo","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for input_event","synthetic":true,"types":[]},{"text":"impl Send for input_id","synthetic":true,"types":[]},{"text":"impl Send for input_absinfo","synthetic":true,"types":[]},{"text":"impl Send for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Send for input_mask","synthetic":true,"types":[]},{"text":"impl Send for ff_replay","synthetic":true,"types":[]},{"text":"impl Send for ff_trigger","synthetic":true,"types":[]},{"text":"impl Send for ff_envelope","synthetic":true,"types":[]},{"text":"impl Send for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Send for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_effect","synthetic":true,"types":[]},{"text":"impl !Send for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Send for ucred","synthetic":true,"types":[]},{"text":"impl !Send for mntent","synthetic":true,"types":[]},{"text":"impl !Send for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Send for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Send for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for arpd_request","synthetic":true,"types":[]},{"text":"impl Send for inotify_event","synthetic":true,"types":[]},{"text":"impl Send for fanotify_response","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for dirent64","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Send for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Send for mq_attr","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl Send for sched_param","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Send for arpreq","synthetic":true,"types":[]},{"text":"impl Send for arpreq_old","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl !Send for mmsghdr","synthetic":true,"types":[]},{"text":"impl Send for epoll_event","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]}];
implementors["libflate"] = [{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; Send for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Finish&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AutoFinish&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AutoFinishUnchecked&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Send for HeaderBuilder","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for ExtraField","synthetic":true,"types":[]},{"text":"impl Send for ExtraSubField","synthetic":true,"types":[]},{"text":"impl Send for Os","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; Send for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MultiDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Send for Lz77WindowSize","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EncodeOptions&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, E&gt; Send for Encoder&lt;W, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["libflate_lz77"] = [{"text":"impl Send for DefaultLz77Encoder","synthetic":true,"types":[]},{"text":"impl Send for DefaultLz77EncoderBuilder","synthetic":true,"types":[]},{"text":"impl Send for Code","synthetic":true,"types":[]},{"text":"impl Send for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Send for NoCompressionLz77Encoder","synthetic":true,"types":[]}];
implementors["librocksdb_sys"] = [{"text":"impl Send for DBStatisticsTickerType","synthetic":true,"types":[]},{"text":"impl Send for DBStatisticsHistogramType","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for CloudEnvOptions","synthetic":true,"types":[]},{"text":"impl Send for ColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl Send for DBInstance","synthetic":true,"types":[]},{"text":"impl Send for DBWriteOptions","synthetic":true,"types":[]},{"text":"impl Send for DBReadOptions","synthetic":true,"types":[]},{"text":"impl Send for DBMergeOperator","synthetic":true,"types":[]},{"text":"impl Send for DBBlockBasedTableOptions","synthetic":true,"types":[]},{"text":"impl Send for DBMemoryAllocator","synthetic":true,"types":[]},{"text":"impl Send for DBLRUCacheOptions","synthetic":true,"types":[]},{"text":"impl Send for DBCache","synthetic":true,"types":[]},{"text":"impl Send for DBFilterPolicy","synthetic":true,"types":[]},{"text":"impl Send for DBSnapshot","synthetic":true,"types":[]},{"text":"impl Send for DBIterator","synthetic":true,"types":[]},{"text":"impl Send for DBCFHandle","synthetic":true,"types":[]},{"text":"impl Send for DBWriteBatch","synthetic":true,"types":[]},{"text":"impl Send for DBComparator","synthetic":true,"types":[]},{"text":"impl Send for DBFlushOptions","synthetic":true,"types":[]},{"text":"impl Send for DBCompactionFilter","synthetic":true,"types":[]},{"text":"impl Send for DBCompactionFilterFactory","synthetic":true,"types":[]},{"text":"impl Send for DBCompactionFilterContext","synthetic":true,"types":[]},{"text":"impl Send for EnvOptions","synthetic":true,"types":[]},{"text":"impl Send for SstFileReader","synthetic":true,"types":[]},{"text":"impl Send for SstFileWriter","synthetic":true,"types":[]},{"text":"impl Send for ExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl Send for IngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl Send for DBBackupEngine","synthetic":true,"types":[]},{"text":"impl Send for DBRestoreOptions","synthetic":true,"types":[]},{"text":"impl Send for DBSliceTransform","synthetic":true,"types":[]},{"text":"impl Send for DBRateLimiter","synthetic":true,"types":[]},{"text":"impl Send for DBLogger","synthetic":true,"types":[]},{"text":"impl Send for DBCompactOptions","synthetic":true,"types":[]},{"text":"impl Send for DBFifoCompactionOptions","synthetic":true,"types":[]},{"text":"impl Send for DBPinnableSlice","synthetic":true,"types":[]},{"text":"impl Send for DBUserCollectedProperties","synthetic":true,"types":[]},{"text":"impl Send for DBUserCollectedPropertiesIterator","synthetic":true,"types":[]},{"text":"impl Send for DBTableProperties","synthetic":true,"types":[]},{"text":"impl Send for DBTablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl Send for DBTablePropertiesCollectionIterator","synthetic":true,"types":[]},{"text":"impl Send for DBTablePropertiesCollector","synthetic":true,"types":[]},{"text":"impl Send for DBTablePropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl Send for DBFlushJobInfo","synthetic":true,"types":[]},{"text":"impl Send for DBCompactionJobInfo","synthetic":true,"types":[]},{"text":"impl Send for DBSubcompactionJobInfo","synthetic":true,"types":[]},{"text":"impl Send for DBIngestionInfo","synthetic":true,"types":[]},{"text":"impl Send for DBEventListener","synthetic":true,"types":[]},{"text":"impl Send for DBKeyVersions","synthetic":true,"types":[]},{"text":"impl Send for DBEnv","synthetic":true,"types":[]},{"text":"impl Send for DBSequentialFile","synthetic":true,"types":[]},{"text":"impl Send for DBColumnFamilyMetaData","synthetic":true,"types":[]},{"text":"impl Send for DBLevelMetaData","synthetic":true,"types":[]},{"text":"impl Send for DBSstFileMetaData","synthetic":true,"types":[]},{"text":"impl Send for DBCompactionOptions","synthetic":true,"types":[]},{"text":"impl Send for DBPerfContext","synthetic":true,"types":[]},{"text":"impl Send for DBIOStatsContext","synthetic":true,"types":[]},{"text":"impl Send for DBWriteStallInfo","synthetic":true,"types":[]},{"text":"impl Send for DBStatusPtr","synthetic":true,"types":[]},{"text":"impl Send for DBMapProperty","synthetic":true,"types":[]},{"text":"impl Send for DBFileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Send for DBEncryptionKeyManagerInstance","synthetic":true,"types":[]},{"text":"impl Send for DBSstPartitioner","synthetic":true,"types":[]},{"text":"impl Send for DBSstPartitionerRequest","synthetic":true,"types":[]},{"text":"impl Send for DBSstPartitionerContext","synthetic":true,"types":[]},{"text":"impl Send for DBSstPartitionerFactory","synthetic":true,"types":[]},{"text":"impl Send for DBWriteBatchIterator","synthetic":true,"types":[]},{"text":"impl Send for DBFileSystemInspectorInstance","synthetic":true,"types":[]},{"text":"impl Send for WriteStallCondition","synthetic":true,"types":[]},{"text":"impl Send for DBTitanDBOptions","synthetic":true,"types":[]},{"text":"impl Send for DBTitanReadOptions","synthetic":true,"types":[]},{"text":"impl Send for DBTitanBlobIndex","synthetic":true,"types":[]},{"text":"impl Send for DBEntryType","synthetic":true,"types":[]},{"text":"impl Send for DBCompressionType","synthetic":true,"types":[]},{"text":"impl Send for DBCompactionStyle","synthetic":true,"types":[]},{"text":"impl Send for DBUniversalCompactionStyle","synthetic":true,"types":[]},{"text":"impl Send for DBRecoveryMode","synthetic":true,"types":[]},{"text":"impl Send for CompactionPriority","synthetic":true,"types":[]},{"text":"impl Send for CompactionReason","synthetic":true,"types":[]},{"text":"impl Send for DBInfoLogLevel","synthetic":true,"types":[]},{"text":"impl Send for DBTableProperty","synthetic":true,"types":[]},{"text":"impl Send for DBBottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl Send for DBRateLimiterMode","synthetic":true,"types":[]},{"text":"impl Send for DBTitanDBBlobRunMode","synthetic":true,"types":[]},{"text":"impl Send for IndexType","synthetic":true,"types":[]},{"text":"impl Send for DBBackgroundErrorReason","synthetic":true,"types":[]},{"text":"impl Send for DBEncryptionMethod","synthetic":true,"types":[]},{"text":"impl Send for DBValueType","synthetic":true,"types":[]},{"text":"impl Send for DBSstPartitionerResult","synthetic":true,"types":[]},{"text":"impl Send for CompactionFilterValueType","synthetic":true,"types":[]},{"text":"impl Send for CompactionFilterDecision","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl Send for gzFile_s","synthetic":true,"types":[]},{"text":"impl Send for internal_state","synthetic":true,"types":[]},{"text":"impl !Send for gz_header","synthetic":true,"types":[]},{"text":"impl !Send for z_stream","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send, S:&nbsp;Send&gt; Send for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["linked_hash_set"] = [{"text":"impl&lt;T, S&gt; Send for LinkedHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawMutex&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockUpgradableReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GuardSend","synthetic":true,"types":[]},{"text":"impl !Send for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedMutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, G:&nbsp;GetThreadId + Send&gt; Send for RawReentrantMutex&lt;R, G&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, G:&nbsp;GetThreadId + Send, T:&nbsp;?Sized + Send&gt; Send for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Send, T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]}];
implementors["log_wrappers"] = [{"text":"impl Send for SyncLoggerBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Value&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["lz4_sys"] = [{"text":"impl Send for BlockSize","synthetic":true,"types":[]},{"text":"impl Send for BlockMode","synthetic":true,"types":[]},{"text":"impl Send for ContentChecksum","synthetic":true,"types":[]},{"text":"impl Send for LZ4FFrameInfo","synthetic":true,"types":[]},{"text":"impl Send for LZ4FPreferences","synthetic":true,"types":[]},{"text":"impl Send for LZ4FCompressOptions","synthetic":true,"types":[]},{"text":"impl Send for LZ4FDecompressOptions","synthetic":true,"types":[]},{"text":"impl Send for LZ4StreamEncode","synthetic":true,"types":[]},{"text":"impl Send for LZ4StreamDecode","synthetic":true,"types":[]},{"text":"impl Send for LZ4FCompressionContext","synthetic":false,"types":[]},{"text":"impl Send for LZ4FDecompressionContext","synthetic":false,"types":[]}];
implementors["match_template"] = [{"text":"impl !Send for MatchTemplate","synthetic":true,"types":[]},{"text":"impl !Send for Substitution","synthetic":true,"types":[]}];
implementors["md5"] = [{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Send for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl Send for MmapOptions","synthetic":true,"types":[]},{"text":"impl Send for Mmap","synthetic":true,"types":[]},{"text":"impl Send for MmapMut","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl Send for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime_guess"] = [{"text":"impl Send for MimeGuess","synthetic":true,"types":[]},{"text":"impl Send for Iter","synthetic":true,"types":[]},{"text":"impl Send for IterRaw","synthetic":true,"types":[]}];
implementors["minitrace"] = [{"text":"impl Send for Collector","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TraceSpawned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TraceWrapped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MayTraceRootFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TraceRootFuture&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CrossthreadTrace","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for Link","synthetic":true,"types":[]},{"text":"impl Send for SpanSet","synthetic":true,"types":[]},{"text":"impl !Send for SpanGuard","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Send for PollOpt","synthetic":true,"types":[]},{"text":"impl Send for Ready","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Poll","synthetic":true,"types":[]},{"text":"impl Send for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EventedFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnixReady","synthetic":true,"types":[]},{"text":"impl Send for Token","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]},{"text":"impl Send for Registration","synthetic":false,"types":[]},{"text":"impl Send for SetReadiness","synthetic":false,"types":[]}];
implementors["mio_uds"] = [{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]},{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl Send for UnixStream","synthetic":true,"types":[]}];
implementors["native_tls"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Identity","synthetic":true,"types":[]},{"text":"impl Send for Certificate","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for MidHandshakeTlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]},{"text":"impl Send for TlsConnectorBuilder","synthetic":true,"types":[]},{"text":"impl Send for TlsConnector","synthetic":true,"types":[]},{"text":"impl Send for TlsAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl Send for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["net2"] = [{"text":"impl Send for TcpBuilder","synthetic":true,"types":[]},{"text":"impl Send for UdpBuilder","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl&lt;'d&gt; Send for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Errno","synthetic":true,"types":[]},{"text":"impl Send for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl Send for AtFlags","synthetic":true,"types":[]},{"text":"impl Send for OFlag","synthetic":true,"types":[]},{"text":"impl Send for SealFlag","synthetic":true,"types":[]},{"text":"impl Send for FdFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FlockArg","synthetic":true,"types":[]},{"text":"impl Send for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl Send for FallocateFlags","synthetic":true,"types":[]},{"text":"impl Send for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl !Send for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl Send for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl Send for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl Send for MsFlags","synthetic":true,"types":[]},{"text":"impl Send for MntFlags","synthetic":true,"types":[]},{"text":"impl Send for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl Send for FdFlag","synthetic":true,"types":[]},{"text":"impl Send for MqAttr","synthetic":true,"types":[]},{"text":"impl Send for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl Send for PollFd","synthetic":true,"types":[]},{"text":"impl Send for PollFlags","synthetic":true,"types":[]},{"text":"impl Send for OpenptyResult","synthetic":true,"types":[]},{"text":"impl Send for ForkptyResult","synthetic":true,"types":[]},{"text":"impl Send for PtyMaster","synthetic":true,"types":[]},{"text":"impl Send for CloneFlags","synthetic":true,"types":[]},{"text":"impl Send for CpuSet","synthetic":true,"types":[]},{"text":"impl Send for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl Send for LioOpcode","synthetic":true,"types":[]},{"text":"impl Send for LioMode","synthetic":true,"types":[]},{"text":"impl Send for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for EpollFlags","synthetic":true,"types":[]},{"text":"impl Send for EpollOp","synthetic":true,"types":[]},{"text":"impl Send for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl Send for EpollEvent","synthetic":true,"types":[]},{"text":"impl Send for EfdFlags","synthetic":true,"types":[]},{"text":"impl Send for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl Send for ProtFlags","synthetic":true,"types":[]},{"text":"impl Send for MapFlags","synthetic":true,"types":[]},{"text":"impl Send for MmapAdvise","synthetic":true,"types":[]},{"text":"impl Send for MsFlags","synthetic":true,"types":[]},{"text":"impl Send for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for QuotaType","synthetic":true,"types":[]},{"text":"impl Send for QuotaFmt","synthetic":true,"types":[]},{"text":"impl Send for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl Send for Dqblk","synthetic":true,"types":[]},{"text":"impl Send for RebootMode","synthetic":true,"types":[]},{"text":"impl Send for FdSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Fds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for SigEvent","synthetic":true,"types":[]},{"text":"impl Send for Signal","synthetic":true,"types":[]},{"text":"impl Send for SignalIterator","synthetic":true,"types":[]},{"text":"impl Send for SaFlags","synthetic":true,"types":[]},{"text":"impl Send for SigmaskHow","synthetic":true,"types":[]},{"text":"impl Send for SigSet","synthetic":true,"types":[]},{"text":"impl Send for SigHandler","synthetic":true,"types":[]},{"text":"impl Send for SigAction","synthetic":true,"types":[]},{"text":"impl Send for SigevNotify","synthetic":true,"types":[]},{"text":"impl Send for SfdFlags","synthetic":true,"types":[]},{"text":"impl Send for SignalFd","synthetic":true,"types":[]},{"text":"impl Send for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl Send for AlgAddr","synthetic":true,"types":[]},{"text":"impl Send for LinkAddr","synthetic":true,"types":[]},{"text":"impl Send for VsockAddr","synthetic":true,"types":[]},{"text":"impl Send for AddressFamily","synthetic":true,"types":[]},{"text":"impl Send for InetAddr","synthetic":true,"types":[]},{"text":"impl Send for IpAddr","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Send for UnixAddr","synthetic":true,"types":[]},{"text":"impl Send for SockAddr","synthetic":true,"types":[]},{"text":"impl Send for ReuseAddr","synthetic":true,"types":[]},{"text":"impl Send for ReusePort","synthetic":true,"types":[]},{"text":"impl Send for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl Send for Linger","synthetic":true,"types":[]},{"text":"impl Send for IpAddMembership","synthetic":true,"types":[]},{"text":"impl Send for IpDropMembership","synthetic":true,"types":[]},{"text":"impl Send for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl Send for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl Send for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl Send for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl Send for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl Send for SendTimeout","synthetic":true,"types":[]},{"text":"impl Send for Broadcast","synthetic":true,"types":[]},{"text":"impl Send for OobInline","synthetic":true,"types":[]},{"text":"impl Send for SocketError","synthetic":true,"types":[]},{"text":"impl Send for KeepAlive","synthetic":true,"types":[]},{"text":"impl Send for PeerCredentials","synthetic":true,"types":[]},{"text":"impl Send for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl Send for TcpKeepCount","synthetic":true,"types":[]},{"text":"impl Send for TcpKeepInterval","synthetic":true,"types":[]},{"text":"impl Send for RcvBuf","synthetic":true,"types":[]},{"text":"impl Send for SndBuf","synthetic":true,"types":[]},{"text":"impl Send for RcvBufForce","synthetic":true,"types":[]},{"text":"impl Send for SndBufForce","synthetic":true,"types":[]},{"text":"impl Send for SockType","synthetic":true,"types":[]},{"text":"impl Send for AcceptConn","synthetic":true,"types":[]},{"text":"impl Send for BindToDevice","synthetic":true,"types":[]},{"text":"impl Send for OriginalDst","synthetic":true,"types":[]},{"text":"impl Send for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl Send for IpTransparent","synthetic":true,"types":[]},{"text":"impl Send for Mark","synthetic":true,"types":[]},{"text":"impl Send for PassCred","synthetic":true,"types":[]},{"text":"impl Send for TcpCongestion","synthetic":true,"types":[]},{"text":"impl Send for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl Send for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl Send for UdpGsoSegment","synthetic":true,"types":[]},{"text":"impl Send for UdpGroSegment","synthetic":true,"types":[]},{"text":"impl Send for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SockType","synthetic":true,"types":[]},{"text":"impl Send for SockProtocol","synthetic":true,"types":[]},{"text":"impl Send for SockFlag","synthetic":true,"types":[]},{"text":"impl Send for MsgFlags","synthetic":true,"types":[]},{"text":"impl Send for UnixCredentials","synthetic":true,"types":[]},{"text":"impl Send for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl Send for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, C&gt; Send for SendMmsgData&lt;'a, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for RecvMmsgData&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SockLevel","synthetic":true,"types":[]},{"text":"impl Send for Shutdown","synthetic":true,"types":[]},{"text":"impl Send for SFlag","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl Send for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl Send for Statfs","synthetic":true,"types":[]},{"text":"impl Send for FsType","synthetic":true,"types":[]},{"text":"impl Send for FsFlags","synthetic":true,"types":[]},{"text":"impl Send for Statvfs","synthetic":true,"types":[]},{"text":"impl Send for SysInfo","synthetic":true,"types":[]},{"text":"impl Send for Termios","synthetic":true,"types":[]},{"text":"impl Send for BaudRate","synthetic":true,"types":[]},{"text":"impl Send for SetArg","synthetic":true,"types":[]},{"text":"impl Send for FlushArg","synthetic":true,"types":[]},{"text":"impl Send for FlowArg","synthetic":true,"types":[]},{"text":"impl Send for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl Send for InputFlags","synthetic":true,"types":[]},{"text":"impl Send for OutputFlags","synthetic":true,"types":[]},{"text":"impl Send for ControlFlags","synthetic":true,"types":[]},{"text":"impl Send for LocalFlags","synthetic":true,"types":[]},{"text":"impl Send for TimeSpec","synthetic":true,"types":[]},{"text":"impl Send for TimeVal","synthetic":true,"types":[]},{"text":"impl Send for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IoVec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for UtsName","synthetic":true,"types":[]},{"text":"impl Send for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl Send for WaitStatus","synthetic":true,"types":[]},{"text":"impl Send for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl Send for InitFlags","synthetic":true,"types":[]},{"text":"impl Send for Inotify","synthetic":true,"types":[]},{"text":"impl Send for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl Send for InotifyEvent","synthetic":true,"types":[]},{"text":"impl Send for TimerFd","synthetic":true,"types":[]},{"text":"impl Send for ClockId","synthetic":true,"types":[]},{"text":"impl Send for TimerFlags","synthetic":true,"types":[]},{"text":"impl Send for TimerSetTimeFlags","synthetic":true,"types":[]},{"text":"impl Send for Expiration","synthetic":true,"types":[]},{"text":"impl Send for ClockId","synthetic":true,"types":[]},{"text":"impl !Send for UContext","synthetic":true,"types":[]},{"text":"impl Send for Uid","synthetic":true,"types":[]},{"text":"impl Send for Gid","synthetic":true,"types":[]},{"text":"impl Send for Pid","synthetic":true,"types":[]},{"text":"impl Send for ForkResult","synthetic":true,"types":[]},{"text":"impl Send for FchownatFlags","synthetic":true,"types":[]},{"text":"impl Send for Whence","synthetic":true,"types":[]},{"text":"impl Send for LinkatFlags","synthetic":true,"types":[]},{"text":"impl Send for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl Send for PathconfVar","synthetic":true,"types":[]},{"text":"impl Send for SysconfVar","synthetic":true,"types":[]},{"text":"impl Send for AccessFlags","synthetic":true,"types":[]},{"text":"impl Send for User","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Dir","synthetic":false,"types":[]}];
implementors["nodrop"] = [{"text":"impl&lt;T&gt; Send for NoDrop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Send for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_format"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]},{"text":"impl Send for CustomFormat","synthetic":true,"types":[]},{"text":"impl Send for CustomFormatBuilder","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Grouping","synthetic":true,"types":[]},{"text":"impl Send for Locale","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DecimalStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InfinityStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MinusSignStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NanStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PlusSignStr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SeparatorStr&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Send for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Send for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Send for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Send for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl Send for ParseFloatError","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["openssl"] = [{"text":"impl Send for KeyError","synthetic":true,"types":[]},{"text":"impl Send for AesKey","synthetic":true,"types":[]},{"text":"impl Send for TimeDiff","synthetic":true,"types":[]},{"text":"impl Send for MsbOption","synthetic":true,"types":[]},{"text":"impl Send for CMSOptions","synthetic":true,"types":[]},{"text":"impl !Send for ConfMethod","synthetic":true,"types":[]},{"text":"impl Send for PointConversionForm","synthetic":true,"types":[]},{"text":"impl Send for Asn1Flag","synthetic":true,"types":[]},{"text":"impl !Send for Seal","synthetic":true,"types":[]},{"text":"impl !Send for Open","synthetic":true,"types":[]},{"text":"impl Send for ErrorStack","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DigestBytes","synthetic":true,"types":[]},{"text":"impl Send for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl Send for Nid","synthetic":true,"types":[]},{"text":"impl Send for OcspFlag","synthetic":true,"types":[]},{"text":"impl Send for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl Send for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl Send for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl Send for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl Send for KeyIvPair","synthetic":true,"types":[]},{"text":"impl Send for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl Send for Params","synthetic":true,"types":[]},{"text":"impl Send for Public","synthetic":true,"types":[]},{"text":"impl Send for Private","synthetic":true,"types":[]},{"text":"impl Send for Id","synthetic":true,"types":[]},{"text":"impl Send for Padding","synthetic":true,"types":[]},{"text":"impl Send for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl Send for Sha1","synthetic":true,"types":[]},{"text":"impl Send for Sha224","synthetic":true,"types":[]},{"text":"impl Send for Sha256","synthetic":true,"types":[]},{"text":"impl Send for Sha384","synthetic":true,"types":[]},{"text":"impl Send for Sha512","synthetic":true,"types":[]},{"text":"impl Send for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl Send for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl Send for SslConnector","synthetic":true,"types":[]},{"text":"impl Send for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl Send for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl Send for SslAcceptor","synthetic":true,"types":[]},{"text":"impl Send for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SslOptions","synthetic":true,"types":[]},{"text":"impl Send for SslMode","synthetic":true,"types":[]},{"text":"impl Send for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl Send for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl Send for ExtensionContext","synthetic":true,"types":[]},{"text":"impl Send for SslFiletype","synthetic":true,"types":[]},{"text":"impl Send for StatusType","synthetic":true,"types":[]},{"text":"impl Send for NameType","synthetic":true,"types":[]},{"text":"impl Send for SniError","synthetic":true,"types":[]},{"text":"impl Send for SslAlert","synthetic":true,"types":[]},{"text":"impl Send for AlpnError","synthetic":true,"types":[]},{"text":"impl Send for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl Send for SslVersion","synthetic":true,"types":[]},{"text":"impl Send for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl Send for CipherBits","synthetic":true,"types":[]},{"text":"impl !Send for SslCipher","synthetic":true,"types":[]},{"text":"impl Send for SslCipherRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for MidHandshakeSslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ShutdownResult","synthetic":true,"types":[]},{"text":"impl Send for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl Send for BasicConstraints","synthetic":true,"types":[]},{"text":"impl Send for KeyUsage","synthetic":true,"types":[]},{"text":"impl Send for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl Send for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Send for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Send for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl Send for X509Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl Send for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl Send for Asn1GeneralizedTime","synthetic":false,"types":[]},{"text":"impl Send for Asn1GeneralizedTimeRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1Time","synthetic":false,"types":[]},{"text":"impl Send for Asn1TimeRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1String","synthetic":false,"types":[]},{"text":"impl Send for Asn1StringRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1Integer","synthetic":false,"types":[]},{"text":"impl Send for Asn1IntegerRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1BitString","synthetic":false,"types":[]},{"text":"impl Send for Asn1BitStringRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1Object","synthetic":false,"types":[]},{"text":"impl Send for Asn1ObjectRef","synthetic":false,"types":[]},{"text":"impl Send for BigNumContext","synthetic":false,"types":[]},{"text":"impl Send for BigNumContextRef","synthetic":false,"types":[]},{"text":"impl Send for BigNum","synthetic":false,"types":[]},{"text":"impl Send for BigNumRef","synthetic":false,"types":[]},{"text":"impl Send for CmsContentInfo","synthetic":false,"types":[]},{"text":"impl Send for CmsContentInfoRef","synthetic":false,"types":[]},{"text":"impl Send for Conf","synthetic":false,"types":[]},{"text":"impl Send for ConfRef","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Deriver&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Dh&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for DhRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Dsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for DsaRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for EcGroup","synthetic":false,"types":[]},{"text":"impl Send for EcGroupRef","synthetic":false,"types":[]},{"text":"impl Send for EcPoint","synthetic":false,"types":[]},{"text":"impl Send for EcPointRef","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for EcKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for EcKeyRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for EcdsaSig","synthetic":false,"types":[]},{"text":"impl Send for EcdsaSigRef","synthetic":false,"types":[]},{"text":"impl Send for Error","synthetic":false,"types":[]},{"text":"impl Send for MessageDigest","synthetic":false,"types":[]},{"text":"impl Send for Hasher","synthetic":false,"types":[]},{"text":"impl Send for OcspBasicResponse","synthetic":false,"types":[]},{"text":"impl Send for OcspBasicResponseRef","synthetic":false,"types":[]},{"text":"impl Send for OcspCertId","synthetic":false,"types":[]},{"text":"impl Send for OcspCertIdRef","synthetic":false,"types":[]},{"text":"impl Send for OcspResponse","synthetic":false,"types":[]},{"text":"impl Send for OcspResponseRef","synthetic":false,"types":[]},{"text":"impl Send for OcspRequest","synthetic":false,"types":[]},{"text":"impl Send for OcspRequestRef","synthetic":false,"types":[]},{"text":"impl Send for OcspOneReq","synthetic":false,"types":[]},{"text":"impl Send for OcspOneReqRef","synthetic":false,"types":[]},{"text":"impl Send for Pkcs12","synthetic":false,"types":[]},{"text":"impl Send for Pkcs12Ref","synthetic":false,"types":[]},{"text":"impl Send for Pkcs7","synthetic":false,"types":[]},{"text":"impl Send for Pkcs7Ref","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for PKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for PKeyRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Rsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for RsaRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Signer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Verifier&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Send for SrtpProtectionProfile","synthetic":false,"types":[]},{"text":"impl Send for SrtpProtectionProfileRef","synthetic":false,"types":[]},{"text":"impl Send for SslMethod","synthetic":false,"types":[]},{"text":"impl Send for SslContext","synthetic":false,"types":[]},{"text":"impl Send for SslContextRef","synthetic":false,"types":[]},{"text":"impl Send for SslSession","synthetic":false,"types":[]},{"text":"impl Send for SslSessionRef","synthetic":false,"types":[]},{"text":"impl Send for Ssl","synthetic":false,"types":[]},{"text":"impl Send for SslRef","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Stackable + Send&gt; Send for Stack&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Stackable + Send&gt; Send for StackRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for OpensslString","synthetic":false,"types":[]},{"text":"impl Send for OpensslStringRef","synthetic":false,"types":[]},{"text":"impl Send for Cipher","synthetic":false,"types":[]},{"text":"impl Send for Crypter","synthetic":false,"types":[]},{"text":"impl Send for X509VerifyParam","synthetic":false,"types":[]},{"text":"impl Send for X509VerifyParamRef","synthetic":false,"types":[]},{"text":"impl Send for X509StoreBuilder","synthetic":false,"types":[]},{"text":"impl Send for X509StoreBuilderRef","synthetic":false,"types":[]},{"text":"impl Send for X509Store","synthetic":false,"types":[]},{"text":"impl Send for X509StoreRef","synthetic":false,"types":[]},{"text":"impl Send for X509StoreContext","synthetic":false,"types":[]},{"text":"impl Send for X509StoreContextRef","synthetic":false,"types":[]},{"text":"impl Send for X509","synthetic":false,"types":[]},{"text":"impl Send for X509Ref","synthetic":false,"types":[]},{"text":"impl Send for X509Extension","synthetic":false,"types":[]},{"text":"impl Send for X509ExtensionRef","synthetic":false,"types":[]},{"text":"impl Send for X509Name","synthetic":false,"types":[]},{"text":"impl Send for X509NameRef","synthetic":false,"types":[]},{"text":"impl Send for X509NameEntry","synthetic":false,"types":[]},{"text":"impl Send for X509NameEntryRef","synthetic":false,"types":[]},{"text":"impl Send for X509Req","synthetic":false,"types":[]},{"text":"impl Send for X509ReqRef","synthetic":false,"types":[]},{"text":"impl Send for GeneralName","synthetic":false,"types":[]},{"text":"impl Send for GeneralNameRef","synthetic":false,"types":[]},{"text":"impl Send for X509Algorithm","synthetic":false,"types":[]},{"text":"impl Send for X509AlgorithmRef","synthetic":false,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl Send for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl Send for AES_KEY","synthetic":true,"types":[]},{"text":"impl !Send for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl Send for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl Send for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl Send for stack_st_void","synthetic":true,"types":[]},{"text":"impl Send for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl Send for EC_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EC_GROUP","synthetic":true,"types":[]},{"text":"impl Send for EC_POINT","synthetic":true,"types":[]},{"text":"impl Send for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl !Send for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl Send for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl Send for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl Send for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl Send for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl Send for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl Send for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl Send for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl Send for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl Send for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl Send for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl Send for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl Send for bio_st","synthetic":true,"types":[]},{"text":"impl Send for BIO","synthetic":true,"types":[]},{"text":"impl Send for BIGNUM","synthetic":true,"types":[]},{"text":"impl Send for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl Send for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl Send for BN_CTX","synthetic":true,"types":[]},{"text":"impl Send for BN_GENCB","synthetic":true,"types":[]},{"text":"impl Send for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl Send for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl Send for EVP_MD","synthetic":true,"types":[]},{"text":"impl Send for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl Send for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl Send for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl Send for DH","synthetic":true,"types":[]},{"text":"impl Send for DH_METHOD","synthetic":true,"types":[]},{"text":"impl Send for DSA","synthetic":true,"types":[]},{"text":"impl Send for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl Send for RSA","synthetic":true,"types":[]},{"text":"impl Send for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EC_KEY","synthetic":true,"types":[]},{"text":"impl Send for X509","synthetic":true,"types":[]},{"text":"impl Send for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl Send for X509_CRL","synthetic":true,"types":[]},{"text":"impl Send for X509_NAME","synthetic":true,"types":[]},{"text":"impl Send for X509_STORE","synthetic":true,"types":[]},{"text":"impl Send for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl Send for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl !Send for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl Send for CONF","synthetic":true,"types":[]},{"text":"impl Send for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl Send for ENGINE","synthetic":true,"types":[]},{"text":"impl Send for SSL","synthetic":true,"types":[]},{"text":"impl Send for SSL_CTX","synthetic":true,"types":[]},{"text":"impl Send for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl Send for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl Send for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl Send for PKCS12","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl Send for PKCS7","synthetic":true,"types":[]},{"text":"impl Send for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl Send for SHA_CTX","synthetic":true,"types":[]},{"text":"impl Send for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl Send for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl Send for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl Send for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Send for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl !Send for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl Send for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl Send for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl !Send for X509_VAL","synthetic":true,"types":[]},{"text":"impl Send for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl Send for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl Send for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl Send for X509_REQ","synthetic":true,"types":[]},{"text":"impl Send for X509_CINF","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509","synthetic":true,"types":[]},{"text":"impl Send for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl !Send for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl Send for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; Send for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Send for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Send for Condvar","synthetic":true,"types":[]},{"text":"impl Send for OnceState","synthetic":true,"types":[]},{"text":"impl Send for Once","synthetic":true,"types":[]},{"text":"impl Send for RawFairMutex","synthetic":true,"types":[]},{"text":"impl Send for RawMutex","synthetic":true,"types":[]},{"text":"impl Send for RawRwLock","synthetic":true,"types":[]},{"text":"impl Send for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Send for ParkResult","synthetic":true,"types":[]},{"text":"impl Send for UnparkResult","synthetic":true,"types":[]},{"text":"impl Send for RequeueOp","synthetic":true,"types":[]},{"text":"impl Send for FilterOp","synthetic":true,"types":[]},{"text":"impl Send for UnparkToken","synthetic":true,"types":[]},{"text":"impl Send for ParkToken","synthetic":true,"types":[]},{"text":"impl Send for SpinWait","synthetic":true,"types":[]}];
implementors["pd_client"] = [{"text":"impl Send for RpcClient","synthetic":true,"types":[]},{"text":"impl Send for DummyPdClient","synthetic":true,"types":[]},{"text":"impl Send for FeatureGate","synthetic":true,"types":[]},{"text":"impl Send for Feature","synthetic":true,"types":[]},{"text":"impl Send for PD_REQUEST_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for PD_HEARTBEAT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for PD_VALIDATE_PEER_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_SIZE_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for REGION_READ_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for REGION_READ_BYTES_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for REGION_WRITTEN_BYTES_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for REGION_WRITTEN_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for Inner","synthetic":true,"types":[]},{"text":"impl Send for HeartbeatReceiver","synthetic":true,"types":[]},{"text":"impl Send for LeaderClient","synthetic":true,"types":[]},{"text":"impl&lt;Req, F&gt; Send for Request&lt;Req, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Req: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RegionStat","synthetic":true,"types":[]},{"text":"impl Send for RegionInfo","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Send for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["pnet_base"] = [{"text":"impl Send for MacAddr","synthetic":true,"types":[]},{"text":"impl Send for ParseMacAddrErr","synthetic":true,"types":[]}];
implementors["pnet_datalink"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for ChannelType","synthetic":true,"types":[]},{"text":"impl Send for Channel","synthetic":true,"types":[]},{"text":"impl Send for FanoutType","synthetic":true,"types":[]},{"text":"impl Send for FanoutOption","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for NetworkInterface","synthetic":true,"types":[]}];
implementors["pnet_sys"] = [{"text":"impl Send for FileDesc","synthetic":true,"types":[]}];
implementors["pprof"] = [{"text":"impl&lt;T&gt; Send for StackHashCounter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Collector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Frames","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ProfilerGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Report","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ReportBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Profile","synthetic":true,"types":[]},{"text":"impl Send for ValueType","synthetic":true,"types":[]},{"text":"impl Send for Sample","synthetic":true,"types":[]},{"text":"impl Send for Label","synthetic":true,"types":[]},{"text":"impl Send for Mapping","synthetic":true,"types":[]},{"text":"impl Send for Location","synthetic":true,"types":[]},{"text":"impl Send for Line","synthetic":true,"types":[]},{"text":"impl Send for Function","synthetic":true,"types":[]},{"text":"impl Send for Symbol","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Send for YesS3","synthetic":true,"types":[]},{"text":"impl Send for NoS3","synthetic":true,"types":[]},{"text":"impl Send for YesS4","synthetic":true,"types":[]},{"text":"impl Send for NoS4","synthetic":true,"types":[]},{"text":"impl Send for YesA1","synthetic":true,"types":[]},{"text":"impl Send for NoA1","synthetic":true,"types":[]},{"text":"impl Send for YesA2","synthetic":true,"types":[]},{"text":"impl Send for NoA2","synthetic":true,"types":[]},{"text":"impl Send for YesNI","synthetic":true,"types":[]},{"text":"impl Send for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Send for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Send for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for vec128_storage","synthetic":true,"types":[]},{"text":"impl Send for vec256_storage","synthetic":true,"types":[]},{"text":"impl Send for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl !Send for Diagnostic","synthetic":true,"types":[]}];
implementors["procfs"] = [{"text":"impl Send for Limits","synthetic":true,"types":[]},{"text":"impl Send for Limit","synthetic":true,"types":[]},{"text":"impl Send for LimitValue","synthetic":true,"types":[]},{"text":"impl Send for Stat","synthetic":true,"types":[]},{"text":"impl Send for NFSServerCaps","synthetic":true,"types":[]},{"text":"impl Send for MountInfo","synthetic":true,"types":[]},{"text":"impl Send for MountOptFields","synthetic":true,"types":[]},{"text":"impl Send for MountStat","synthetic":true,"types":[]},{"text":"impl Send for MountNFSStatistics","synthetic":true,"types":[]},{"text":"impl Send for NFSEventCounter","synthetic":true,"types":[]},{"text":"impl Send for NFSByteCounter","synthetic":true,"types":[]},{"text":"impl Send for NFSOperationStat","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for StatFlags","synthetic":true,"types":[]},{"text":"impl Send for CoredumpFlags","synthetic":true,"types":[]},{"text":"impl Send for FDPermissions","synthetic":true,"types":[]},{"text":"impl Send for ProcState","synthetic":true,"types":[]},{"text":"impl Send for Io","synthetic":true,"types":[]},{"text":"impl Send for MMapPath","synthetic":true,"types":[]},{"text":"impl Send for MemoryMap","synthetic":true,"types":[]},{"text":"impl Send for FDTarget","synthetic":true,"types":[]},{"text":"impl Send for FDInfo","synthetic":true,"types":[]},{"text":"impl Send for Process","synthetic":true,"types":[]},{"text":"impl Send for StatM","synthetic":true,"types":[]},{"text":"impl Send for Meminfo","synthetic":true,"types":[]},{"text":"impl Send for TcpState","synthetic":true,"types":[]},{"text":"impl Send for UdpState","synthetic":true,"types":[]},{"text":"impl Send for UnixState","synthetic":true,"types":[]},{"text":"impl Send for TcpNetEntry","synthetic":true,"types":[]},{"text":"impl Send for UdpNetEntry","synthetic":true,"types":[]},{"text":"impl Send for UnixNetEntry","synthetic":true,"types":[]},{"text":"impl Send for DeviceStatus","synthetic":true,"types":[]},{"text":"impl Send for CpuInfo","synthetic":true,"types":[]},{"text":"impl Send for CGroupController","synthetic":true,"types":[]},{"text":"impl Send for ProcessCgroup","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for DropCache","synthetic":true,"types":[]},{"text":"impl Send for PressureRecord","synthetic":true,"types":[]},{"text":"impl Send for CpuPressure","synthetic":true,"types":[]},{"text":"impl Send for MemoryPressure","synthetic":true,"types":[]},{"text":"impl Send for IoPressure","synthetic":true,"types":[]},{"text":"impl Send for DiskStat","synthetic":true,"types":[]},{"text":"impl Send for ProcError","synthetic":true,"types":[]},{"text":"impl Send for InternalError","synthetic":true,"types":[]},{"text":"impl Send for LoadAverage","synthetic":true,"types":[]},{"text":"impl Send for ConfigSetting","synthetic":true,"types":[]},{"text":"impl Send for CpuTime","synthetic":true,"types":[]},{"text":"impl Send for KernelStats","synthetic":true,"types":[]},{"text":"impl Send for KernelModule","synthetic":true,"types":[]}];
implementors["procinfo"] = [{"text":"impl Send for LoadAvg","synthetic":true,"types":[]},{"text":"impl Send for Io","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Limits","synthetic":true,"types":[]},{"text":"impl Send for Mountinfo","synthetic":true,"types":[]},{"text":"impl Send for Stat","synthetic":true,"types":[]},{"text":"impl Send for Statm","synthetic":true,"types":[]},{"text":"impl Send for SeccompMode","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for Cpu","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl Send for DeviceStatus","synthetic":true,"types":[]}];
implementors["prometheus"] = [{"text":"impl Send for LabelPair","synthetic":true,"types":[]},{"text":"impl Send for Gauge","synthetic":true,"types":[]},{"text":"impl Send for Counter","synthetic":true,"types":[]},{"text":"impl Send for Quantile","synthetic":true,"types":[]},{"text":"impl Send for Summary","synthetic":true,"types":[]},{"text":"impl Send for Untyped","synthetic":true,"types":[]},{"text":"impl Send for Histogram","synthetic":true,"types":[]},{"text":"impl Send for Bucket","synthetic":true,"types":[]},{"text":"impl Send for Metric","synthetic":true,"types":[]},{"text":"impl Send for MetricFamily","synthetic":true,"types":[]},{"text":"impl Send for MetricType","synthetic":true,"types":[]},{"text":"impl Send for AtomicF64","synthetic":true,"types":[]},{"text":"impl Send for AtomicI64","synthetic":true,"types":[]},{"text":"impl Send for AtomicU64","synthetic":true,"types":[]},{"text":"impl&lt;T, V, D&gt; Send for AFLocalCounter&lt;T, V, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Send for AFLocalHistogram&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for GenericCounter&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for GenericLocalCounter&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for GenericLocalCounterVec&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Send for Desc","synthetic":true,"types":[]},{"text":"impl Send for ProtobufEncoder","synthetic":true,"types":[]},{"text":"impl Send for TextEncoder","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for GenericGauge&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Send for HistogramOpts","synthetic":true,"types":[]},{"text":"impl Send for HistogramTimer","synthetic":true,"types":[]},{"text":"impl Send for Histogram","synthetic":true,"types":[]},{"text":"impl Send for LocalHistogram","synthetic":true,"types":[]},{"text":"impl Send for LocalHistogramTimer","synthetic":true,"types":[]},{"text":"impl Send for LocalHistogramVec","synthetic":true,"types":[]},{"text":"impl Send for Opts","synthetic":true,"types":[]},{"text":"impl Send for BasicAuthentication","synthetic":true,"types":[]},{"text":"impl Send for Registry","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MetricVec&lt;T&gt;","synthetic":true,"types":[]}];
implementors["prost"] = [{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for EncodeError","synthetic":true,"types":[]}];
implementors["protobuf"] = [{"text":"impl Send for WireType","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for FileDescriptorSet","synthetic":true,"types":[]},{"text":"impl Send for FileDescriptorProto","synthetic":true,"types":[]},{"text":"impl Send for DescriptorProto","synthetic":true,"types":[]},{"text":"impl Send for DescriptorProto_ExtensionRange","synthetic":true,"types":[]},{"text":"impl Send for DescriptorProto_ReservedRange","synthetic":true,"types":[]},{"text":"impl Send for FieldDescriptorProto","synthetic":true,"types":[]},{"text":"impl Send for FieldDescriptorProto_Type","synthetic":true,"types":[]},{"text":"impl Send for FieldDescriptorProto_Label","synthetic":true,"types":[]},{"text":"impl Send for OneofDescriptorProto","synthetic":true,"types":[]},{"text":"impl Send for EnumDescriptorProto","synthetic":true,"types":[]},{"text":"impl Send for EnumValueDescriptorProto","synthetic":true,"types":[]},{"text":"impl Send for ServiceDescriptorProto","synthetic":true,"types":[]},{"text":"impl Send for MethodDescriptorProto","synthetic":true,"types":[]},{"text":"impl Send for FileOptions","synthetic":true,"types":[]},{"text":"impl Send for FileOptions_OptimizeMode","synthetic":true,"types":[]},{"text":"impl Send for MessageOptions","synthetic":true,"types":[]},{"text":"impl Send for FieldOptions","synthetic":true,"types":[]},{"text":"impl Send for FieldOptions_CType","synthetic":true,"types":[]},{"text":"impl Send for FieldOptions_JSType","synthetic":true,"types":[]},{"text":"impl Send for OneofOptions","synthetic":true,"types":[]},{"text":"impl Send for EnumOptions","synthetic":true,"types":[]},{"text":"impl Send for EnumValueOptions","synthetic":true,"types":[]},{"text":"impl Send for ServiceOptions","synthetic":true,"types":[]},{"text":"impl Send for MethodOptions","synthetic":true,"types":[]},{"text":"impl Send for UninterpretedOption","synthetic":true,"types":[]},{"text":"impl Send for UninterpretedOption_NamePart","synthetic":true,"types":[]},{"text":"impl Send for SourceCodeInfo","synthetic":true,"types":[]},{"text":"impl Send for SourceCodeInfo_Location","synthetic":true,"types":[]},{"text":"impl Send for GeneratedCodeInfo","synthetic":true,"types":[]},{"text":"impl Send for GeneratedCodeInfo_Annotation","synthetic":true,"types":[]},{"text":"impl Send for CodeGeneratorRequest","synthetic":true,"types":[]},{"text":"impl Send for CodeGeneratorResponse","synthetic":true,"types":[]},{"text":"impl Send for CodeGeneratorResponse_File","synthetic":true,"types":[]},{"text":"impl Send for WireError","synthetic":true,"types":[]},{"text":"impl Send for ProtobufError","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; Send for ExtFieldOptional&lt;M, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; Send for ExtFieldRepeated&lt;M, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Lazy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ProtobufValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for FieldDescriptor","synthetic":true,"types":[]},{"text":"impl !Send for MessageDescriptor","synthetic":true,"types":[]},{"text":"impl Send for EnumValueDescriptor","synthetic":true,"types":[]},{"text":"impl Send for EnumDescriptor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ReflectFieldRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RepeatedField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SingularField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SingularPtrField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CodedInputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CodedOutputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeFloat","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeDouble","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeInt32","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeInt64","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeUint32","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeUint64","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeSint32","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeSint64","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeFixed32","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeFixed64","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeSfixed32","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeSfixed64","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeBool","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeString","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeBytes","synthetic":true,"types":[]},{"text":"impl Send for ProtobufTypeChars","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ProtobufTypeEnum&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for ProtobufTypeMessage&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for Api","synthetic":true,"types":[]},{"text":"impl Send for Method","synthetic":true,"types":[]},{"text":"impl Send for Mixin","synthetic":true,"types":[]},{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl Send for FieldMask","synthetic":true,"types":[]},{"text":"impl Send for SourceContext","synthetic":true,"types":[]},{"text":"impl Send for Struct","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Value_oneof_kind","synthetic":true,"types":[]},{"text":"impl Send for ListValue","synthetic":true,"types":[]},{"text":"impl Send for NullValue","synthetic":true,"types":[]},{"text":"impl Send for Timestamp","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Field","synthetic":true,"types":[]},{"text":"impl Send for Field_Kind","synthetic":true,"types":[]},{"text":"impl Send for Field_Cardinality","synthetic":true,"types":[]},{"text":"impl Send for Enum","synthetic":true,"types":[]},{"text":"impl Send for EnumValue","synthetic":true,"types":[]},{"text":"impl Send for Option","synthetic":true,"types":[]},{"text":"impl Send for Syntax","synthetic":true,"types":[]},{"text":"impl Send for DoubleValue","synthetic":true,"types":[]},{"text":"impl Send for FloatValue","synthetic":true,"types":[]},{"text":"impl Send for Int64Value","synthetic":true,"types":[]},{"text":"impl Send for UInt64Value","synthetic":true,"types":[]},{"text":"impl Send for Int32Value","synthetic":true,"types":[]},{"text":"impl Send for UInt32Value","synthetic":true,"types":[]},{"text":"impl Send for BoolValue","synthetic":true,"types":[]},{"text":"impl Send for StringValue","synthetic":true,"types":[]},{"text":"impl Send for BytesValue","synthetic":true,"types":[]},{"text":"impl Send for CachedSize","synthetic":true,"types":[]},{"text":"impl Send for UnknownValue","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; Send for UnknownValueRef&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnknownValues","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; Send for UnknownValuesIter&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnknownFields","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; Send for UnknownFieldsIter&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; Send for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quick_xml"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesStart&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesDecl&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesEnd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["raft"] = [{"text":"impl&lt;'a&gt; Send for Changer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for StorageError","synthetic":true,"types":[]},{"text":"impl Send for Unstable","synthetic":true,"types":[]},{"text":"impl Send for Configuration","synthetic":true,"types":[]},{"text":"impl Send for Configuration","synthetic":true,"types":[]},{"text":"impl Send for StateRole","synthetic":true,"types":[]},{"text":"impl Send for SoftState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Raft&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RaftLog&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Peer","synthetic":true,"types":[]},{"text":"impl Send for SnapshotStatus","synthetic":true,"types":[]},{"text":"impl Send for Ready","synthetic":true,"types":[]},{"text":"impl Send for LightReady","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RawNode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReadOnlyOption","synthetic":true,"types":[]},{"text":"impl Send for ReadState","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Status&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RaftState","synthetic":true,"types":[]},{"text":"impl Send for MemStorageCore","synthetic":true,"types":[]},{"text":"impl Send for MemStorage","synthetic":true,"types":[]},{"text":"impl Send for Inflights","synthetic":true,"types":[]},{"text":"impl Send for Progress","synthetic":true,"types":[]},{"text":"impl Send for ProgressState","synthetic":true,"types":[]},{"text":"impl Send for ProgressTracker","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Union&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["raft_engine"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RecoveryMode","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E, W&gt; Send for LogBatch&lt;E, W&gt;","synthetic":true,"types":[]},{"text":"impl Send for CacheStats","synthetic":true,"types":[]},{"text":"impl Send for GlobalStats","synthetic":true,"types":[]}];
implementors["raft_log_engine"] = [{"text":"impl Send for EntryExtTyped","synthetic":true,"types":[]},{"text":"impl Send for RaftLogEngine","synthetic":true,"types":[]},{"text":"impl Send for RaftLogBatch","synthetic":true,"types":[]}];
implementors["raft_proto"] = [{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for SnapshotMetadata","synthetic":true,"types":[]},{"text":"impl Send for Snapshot","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for HardState","synthetic":true,"types":[]},{"text":"impl Send for ConfState","synthetic":true,"types":[]},{"text":"impl Send for ConfChange","synthetic":true,"types":[]},{"text":"impl Send for ConfChangeSingle","synthetic":true,"types":[]},{"text":"impl Send for ConfChangeV2","synthetic":true,"types":[]},{"text":"impl Send for EntryType","synthetic":true,"types":[]},{"text":"impl Send for MessageType","synthetic":true,"types":[]},{"text":"impl Send for ConfChangeTransition","synthetic":true,"types":[]},{"text":"impl Send for ConfChangeType","synthetic":true,"types":[]}];
implementors["raftstore"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for ConsistencyCheckMethod","synthetic":true,"types":[]},{"text":"impl Send for SplitCheckConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Raw&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Entry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BoxAdminObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WrappedAdminObserver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for BoxQueryObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WrappedQueryObserver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for BoxApplySnapshotObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WrappedApplySnapshotObserver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoxSplitCheckObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; Send for WrappedSplitCheckObserver&lt;E, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for BoxRoleObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WrappedRoleObserver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for BoxRegionChangeObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WrappedRegionChangeObserver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for BoxReadIndexObserver","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WrappedReadIndexObserver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoxCmdObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; Send for WrappedCmdObserver&lt;E, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoxConsistencyCheckObserver&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, T&gt; Send for WrappedConsistencyCheckObserver&lt;E, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Registry&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CoprocessorHost&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for REGION_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for REGION_KEYS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for REGION_COUNT_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for RaftStoreEvent","synthetic":true,"types":[]},{"text":"impl Send for RegionInfo","synthetic":true,"types":[]},{"text":"impl Send for RegionInfoQuery","synthetic":true,"types":[]},{"text":"impl Send for RegionEventListener","synthetic":true,"types":[]},{"text":"impl Send for RegionCollector","synthetic":true,"types":[]},{"text":"impl Send for RegionInfoAccessor","synthetic":true,"types":[]},{"text":"impl Send for MockRegionInfoProvider","synthetic":true,"types":[]},{"text":"impl Send for Checker","synthetic":true,"types":[]},{"text":"impl Send for HalfCheckObserver","synthetic":true,"types":[]},{"text":"impl Send for Checker","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Send for KeysCheckObserver&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Checker","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Send for SizeCheckObserver&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Checker","synthetic":true,"types":[]},{"text":"impl Send for TableCheckObserver","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; !Send for Host&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl Send for SplitObserver","synthetic":true,"types":[]},{"text":"impl Send for KeyEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ObserverContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegionChangeEvent","synthetic":true,"types":[]},{"text":"impl Send for Cmd","synthetic":true,"types":[]},{"text":"impl Send for CmdBatch","synthetic":true,"types":[]},{"text":"impl Send for DiscardReason","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RaftStoreBlackHole","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; Send for ServerRaftStoreRouter&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Send for CONFIG_RAFTSTORE_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for RaftstoreConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PendingCmd&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PendingCmdQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for ChangePeer","synthetic":true,"types":[]},{"text":"impl Send for Range","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ExecResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ApplyResult&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ExecContext","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for ApplyCallback&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; Send for ApplyContext&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl Send for WaitSourceMergeState","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for YieldState&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Send for NewSplitPeer","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for ApplyDelegate&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Apply&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for Registration","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Proposal&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for Destroy","synthetic":true,"types":[]},{"text":"impl Send for CatchUpLogs","synthetic":true,"types":[]},{"text":"impl Send for GenSnapTask","synthetic":true,"types":[]},{"text":"impl Send for ObserveID","synthetic":true,"types":[]},{"text":"impl Send for ObserveCmd","synthetic":true,"types":[]},{"text":"impl Send for ChangeCmd","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for Msg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Send for ApplyMetrics","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ApplyRes&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for TaskRes&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for ApplyFsm&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Send for ControlMsg","synthetic":true,"types":[]},{"text":"impl Send for ControlFsm","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; Send for ApplyPoller&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, W&gt; Send for Builder&lt;EK, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for ApplyRouter&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for ApplyBatchSystem&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Send for APPLY_PROPOSAL","synthetic":true,"types":[]},{"text":"impl Send for StoreStat","synthetic":true,"types":[]},{"text":"impl Send for GlobalStoreStat","synthetic":true,"types":[]},{"text":"impl Send for LocalStoreStat","synthetic":true,"types":[]},{"text":"impl Send for DestroyPeerJob","synthetic":true,"types":[]},{"text":"impl Send for CollectedReady","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; Send for PeerFsm&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BatchRaftCmdRequestBuilder&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, EK, ER, T&gt; Send for PeerFsmDelegate&lt;'a, EK, ER, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StoreInfo&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StoreMeta","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; Send for RaftRouter&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Send for PeerTickBatch","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; Send for PollContext&lt;EK, ER, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Store","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for StoreFsm&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, EK, ER, T&gt; Send for StoreFsmDelegate&lt;'a, EK, ER, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; Send for RaftPoller&lt;EK, ER, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; Send for RaftPollerBuilder&lt;EK, ER, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for Workers&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; Send for RaftBatchSystem&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Send for CheckMsgStatus","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ReadResponse&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for WriteResponse","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Callback&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for PeerTicks","synthetic":true,"types":[]},{"text":"impl Send for StoreTick","synthetic":true,"types":[]},{"text":"impl Send for MergeResultKind","synthetic":true,"types":[]},{"text":"impl&lt;SK&gt; Send for SignificantMsg&lt;SK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for CasualMessage&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for RaftCommand&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for PeerMsg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for StoreMsg&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Send for AdminCmdEpochState","synthetic":true,"types":[]},{"text":"impl Send for ADMIN_CMD_EPOCH_MAP","synthetic":true,"types":[]},{"text":"impl Send for Lease","synthetic":true,"types":[]},{"text":"impl Send for LeaseState","synthetic":true,"types":[]},{"text":"impl Send for RemoteLease","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for KeysInfoFormatter&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConfChangeKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MsgType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for COMPACTION_GUARD","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for CompactionGuardGeneratorFactory&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for CompactionGuardGenerator&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Send for GroupState","synthetic":true,"types":[]},{"text":"impl Send for LeaderState","synthetic":true,"types":[]},{"text":"impl Send for HibernateState","synthetic":true,"types":[]},{"text":"impl Send for RaftReadyMetrics","synthetic":true,"types":[]},{"text":"impl Send for RaftMessageMetrics","synthetic":true,"types":[]},{"text":"impl Send for RaftMessageDropMetrics","synthetic":true,"types":[]},{"text":"impl Send for RaftProposeMetrics","synthetic":true,"types":[]},{"text":"impl Send for RaftInvalidProposeMetrics","synthetic":true,"types":[]},{"text":"impl Send for RaftMetrics","synthetic":true,"types":[]},{"text":"impl Send for RaftEventDurationInner","synthetic":true,"types":[]},{"text":"impl Send for RaftEventDurationDelegator","synthetic":true,"types":[]},{"text":"impl Send for RaftEventDuration","synthetic":true,"types":[]},{"text":"impl Send for RaftInvalidProposalCountInner","synthetic":true,"types":[]},{"text":"impl Send for RaftInvalidProposalCountDelegator","synthetic":true,"types":[]},{"text":"impl Send for RaftInvalidProposalCount","synthetic":true,"types":[]},{"text":"impl Send for RaftEntryFetchesInner","synthetic":true,"types":[]},{"text":"impl Send for RaftEntryFetchesDelegator","synthetic":true,"types":[]},{"text":"impl Send for RaftEntryFetches","synthetic":true,"types":[]},{"text":"impl Send for SnapCfInner","synthetic":true,"types":[]},{"text":"impl Send for SnapCfDelegator","synthetic":true,"types":[]},{"text":"impl Send for SnapCf","synthetic":true,"types":[]},{"text":"impl Send for SnapCfSizeInner","synthetic":true,"types":[]},{"text":"impl Send for SnapCfSizeDelegator","synthetic":true,"types":[]},{"text":"impl Send for SnapCfSize","synthetic":true,"types":[]},{"text":"impl Send for RegionHashCounterInner","synthetic":true,"types":[]},{"text":"impl Send for RegionHashCounterDelegator","synthetic":true,"types":[]},{"text":"impl Send for RegionHashCounter2Inner","synthetic":true,"types":[]},{"text":"impl Send for RegionHashCounter2Delegator","synthetic":true,"types":[]},{"text":"impl Send for RegionHashCounter","synthetic":true,"types":[]},{"text":"impl Send for ProposalVecInner","synthetic":true,"types":[]},{"text":"impl Send for ProposalVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for ProposalVec","synthetic":true,"types":[]},{"text":"impl Send for AdminCmdVecInner","synthetic":true,"types":[]},{"text":"impl Send for AdminCmdVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for AdminCmdVec2Inner","synthetic":true,"types":[]},{"text":"impl Send for AdminCmdVec2Delegator","synthetic":true,"types":[]},{"text":"impl Send for AdminCmdVec","synthetic":true,"types":[]},{"text":"impl Send for RaftReadyVecInner","synthetic":true,"types":[]},{"text":"impl Send for RaftReadyVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for RaftReadyVec","synthetic":true,"types":[]},{"text":"impl Send for MessageCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for MessageCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for MessageCounterVec","synthetic":true,"types":[]},{"text":"impl Send for RaftDropedVecInner","synthetic":true,"types":[]},{"text":"impl Send for RaftDropedVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for RaftDropedVec","synthetic":true,"types":[]},{"text":"impl Send for SnapValidVecInner","synthetic":true,"types":[]},{"text":"impl Send for SnapValidVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for SnapValidVec","synthetic":true,"types":[]},{"text":"impl Send for PerfContextTimeDurationInner","synthetic":true,"types":[]},{"text":"impl Send for PerfContextTimeDurationDelegator","synthetic":true,"types":[]},{"text":"impl Send for PerfContextTimeDuration","synthetic":true,"types":[]},{"text":"impl Send for CompactionGuardActionVecInner","synthetic":true,"types":[]},{"text":"impl Send for CompactionGuardActionVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for CompactionGuardActionVec2Inner","synthetic":true,"types":[]},{"text":"impl Send for CompactionGuardActionVec2Delegator","synthetic":true,"types":[]},{"text":"impl Send for CompactionGuardActionVec","synthetic":true,"types":[]},{"text":"impl Send for PerfContextType","synthetic":true,"types":[]},{"text":"impl Send for ProposalType","synthetic":true,"types":[]},{"text":"impl Send for AdminCmdType","synthetic":true,"types":[]},{"text":"impl Send for AdminCmdStatus","synthetic":true,"types":[]},{"text":"impl Send for RaftReadyType","synthetic":true,"types":[]},{"text":"impl Send for MessageCounterType","synthetic":true,"types":[]},{"text":"impl Send for RaftDroppedMessage","synthetic":true,"types":[]},{"text":"impl Send for SnapValidationType","synthetic":true,"types":[]},{"text":"impl Send for RegionHashType","synthetic":true,"types":[]},{"text":"impl Send for RegionHashResult","synthetic":true,"types":[]},{"text":"impl Send for CfNames","synthetic":true,"types":[]},{"text":"impl Send for RaftEntryType","synthetic":true,"types":[]},{"text":"impl Send for RaftInvalidProposal","synthetic":true,"types":[]},{"text":"impl Send for RaftEventDurationType","synthetic":true,"types":[]},{"text":"impl Send for CompactionGuardAction","synthetic":true,"types":[]},{"text":"impl Send for PEER_PROPOSAL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for PEER_PROPOSAL_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for PEER_ADMIN_CMD_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for PEER_ADMIN_CMD_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for PEER_APPEND_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for PEER_COMMIT_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for STORE_APPLY_LOG_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for APPLY_TASK_WAIT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for STORE_RAFT_READY_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_RAFT_READY_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for STORE_RAFT_SENT_MESSAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_RAFT_SENT_MESSAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for STORE_RAFT_DROPPED_MESSAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_RAFT_DROPPED_MESSAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for STORE_SNAPSHOT_TRAFFIC_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_SNAPSHOT_VALIDATION_FAILURE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for STORE_SNAPSHOT_VALIDATION_FAILURE_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for PEER_RAFT_PROCESS_DURATION","synthetic":true,"types":[]},{"text":"impl Send for PEER_PROPOSE_LOG_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for REGION_HASH_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for REGION_HASH_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for REGION_MAX_LOG_LAG","synthetic":true,"types":[]},{"text":"impl Send for REQUEST_WAIT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for PEER_GC_RAFT_LOG_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for UPDATE_REGION_SIZE_BY_COMPACTION_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for COMPACTION_RELATED_REGION_COUNT","synthetic":true,"types":[]},{"text":"impl Send for COMPACTION_DECLINED_BYTES","synthetic":true,"types":[]},{"text":"impl Send for SNAPSHOT_CF_KV_COUNT_VEC","synthetic":true,"types":[]},{"text":"impl Send for SNAPSHOT_CF_KV_COUNT","synthetic":true,"types":[]},{"text":"impl Send for SNAPSHOT_CF_SIZE_VEC","synthetic":true,"types":[]},{"text":"impl Send for SNAPSHOT_CF_SIZE","synthetic":true,"types":[]},{"text":"impl Send for SNAPSHOT_BUILD_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for SNAPSHOT_KV_COUNT_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for SNAPSHOT_SIZE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for RAFT_ENTRY_FETCHES_VEC","synthetic":true,"types":[]},{"text":"impl Send for RAFT_ENTRY_FETCHES","synthetic":true,"types":[]},{"text":"impl Send for LEADER_MISSING","synthetic":true,"types":[]},{"text":"impl Send for INGEST_SST_DURATION_SECONDS","synthetic":true,"types":[]},{"text":"impl Send for RAFT_INVALID_PROPOSAL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for RAFT_INVALID_PROPOSAL_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for RAFT_EVENT_DURATION_VEC","synthetic":true,"types":[]},{"text":"impl Send for RAFT_EVENT_DURATION","synthetic":true,"types":[]},{"text":"impl Send for RAFT_READ_INDEX_PENDING_DURATION","synthetic":true,"types":[]},{"text":"impl Send for RAFT_READ_INDEX_PENDING_COUNT","synthetic":true,"types":[]},{"text":"impl Send for APPLY_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for STORE_PERF_CONTEXT_TIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for APPLY_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Send for STORE_PERF_CONTEXT_TIME_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Send for READ_QPS_TOPN","synthetic":true,"types":[]},{"text":"impl Send for RAFT_ENTRIES_CACHES_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for APPLY_PENDING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for APPLY_PENDING_ENTRIES_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for COMPACTION_GUARD_ACTION_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for COMPACTION_GUARD_ACTION_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for StaleState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ProposalQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for ProposalContext","synthetic":true,"types":[]},{"text":"impl Send for ConsistencyState","synthetic":true,"types":[]},{"text":"impl Send for PeerStat","synthetic":true,"types":[]},{"text":"impl Send for CheckTickResult","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ProposedAdminCmd&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for CmdEpochChecker&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; Send for Peer&lt;EK, ER&gt;","synthetic":true,"types":[]},{"text":"impl Send for RequestPolicy","synthetic":true,"types":[]},{"text":"impl Send for CheckApplyingSnapStatus","synthetic":true,"types":[]},{"text":"impl Send for SnapState","synthetic":true,"types":[]},{"text":"impl Send for EntryCache","synthetic":true,"types":[]},{"text":"impl Send for ApplySnapResult","synthetic":true,"types":[]},{"text":"impl Send for InvokeContext","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER&gt; Send for PeerStorage&lt;EK, ER&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ER: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ReadIndexRequest&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ReadIndexQueue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReadIndexContext","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for RegionSnapshot&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for RegionIterator&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for StoreGroup","synthetic":true,"types":[]},{"text":"impl Send for GlobalReplicationState","synthetic":true,"types":[]},{"text":"impl Send for BuildStatistics","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for SnapKey","synthetic":true,"types":[]},{"text":"impl Send for SnapshotStatistics","synthetic":true,"types":[]},{"text":"impl&lt;EK&gt; Send for ApplyOptions&lt;EK&gt;","synthetic":true,"types":[]},{"text":"impl Send for CfFileForRecving","synthetic":true,"types":[]},{"text":"impl Send for CfFile","synthetic":true,"types":[]},{"text":"impl Send for MetaFile","synthetic":true,"types":[]},{"text":"impl Send for Snap","synthetic":true,"types":[]},{"text":"impl Send for ApplyAbortChecker","synthetic":true,"types":[]},{"text":"impl Send for SnapEntry","synthetic":true,"types":[]},{"text":"impl Send for SnapStats","synthetic":true,"types":[]},{"text":"impl Send for SnapManagerCore","synthetic":true,"types":[]},{"text":"impl Send for SnapManager","synthetic":true,"types":[]},{"text":"impl Send for SnapManagerBuilder","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl&lt;E, C, S&gt; Send for Runner&lt;E, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl&lt;EK, C, S&gt; Send for Runner&lt;EK, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Runner&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Task&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;EK, C&gt; Send for Runner&lt;EK, C&gt;","synthetic":true,"types":[]},{"text":"impl Send for SnapCounterInner","synthetic":true,"types":[]},{"text":"impl Send for SnapCounterDelegator","synthetic":true,"types":[]},{"text":"impl Send for SnapCounter2Inner","synthetic":true,"types":[]},{"text":"impl Send for SnapCounter2Delegator","synthetic":true,"types":[]},{"text":"impl Send for SnapCounter","synthetic":true,"types":[]},{"text":"impl Send for CheckSplitCounterInner","synthetic":true,"types":[]},{"text":"impl Send for CheckSplitCounterDelegator","synthetic":true,"types":[]},{"text":"impl Send for CheckSplitCounter","synthetic":true,"types":[]},{"text":"impl Send for SnapHistogramInner","synthetic":true,"types":[]},{"text":"impl Send for SnapHistogramDelegator","synthetic":true,"types":[]},{"text":"impl Send for SnapHistogram","synthetic":true,"types":[]},{"text":"impl Send for ReadRejectCounter","synthetic":true,"types":[]},{"text":"impl Send for SnapType","synthetic":true,"types":[]},{"text":"impl Send for SnapStatus","synthetic":true,"types":[]},{"text":"impl Send for RejectReason","synthetic":true,"types":[]},{"text":"impl Send for SNAP_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for SNAP_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for CHECK_SPILT_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for CHECK_SPILT_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for SNAP_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for SNAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for CHECK_SPILT_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for COMPACT_RANGE_CF","synthetic":true,"types":[]},{"text":"impl Send for REGION_HASH_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for STALE_PEER_PENDING_DELETE_RANGE_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for LOCAL_READ_REJECT_VEC","synthetic":true,"types":[]},{"text":"impl Send for LOCAL_READ_REJECT","synthetic":true,"types":[]},{"text":"impl Send for LOCAL_READ_EXECUTED_REQUESTS","synthetic":true,"types":[]},{"text":"impl Send for LOCAL_READ_EXECUTED_CACHE_REQUESTS","synthetic":true,"types":[]},{"text":"impl Send for FlowStatistics","synthetic":true,"types":[]},{"text":"impl Send for HeartbeatTask","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Task&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Send for StoreStat","synthetic":true,"types":[]},{"text":"impl Send for PeerStat","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StatsMonitor&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, T&gt; Send for Runner&lt;EK, ER, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;EK, ER, R&gt; Send for Runner&lt;EK, ER, R&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReadDelegate","synthetic":true,"types":[]},{"text":"impl Send for TrackVer","synthetic":true,"types":[]},{"text":"impl Send for Progress","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Send for LocalReader&lt;C, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 'm&gt; Send for Inspector&lt;'r, 'm&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReadMetrics","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Task&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StalePeerInfo","synthetic":true,"types":[]},{"text":"impl Send for PendingDeleteRanges","synthetic":true,"types":[]},{"text":"impl&lt;EK, R&gt; Send for SnapContext&lt;EK, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;EK, R&gt; Send for Runner&lt;EK, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MergedIterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl&lt;E, S&gt; Send for Runner&lt;E, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SplitConfig","synthetic":true,"types":[]},{"text":"impl Send for SplitConfigManager","synthetic":true,"types":[]},{"text":"impl Send for SplitInfo","synthetic":true,"types":[]},{"text":"impl Send for Sample","synthetic":true,"types":[]},{"text":"impl Send for RegionInfo","synthetic":true,"types":[]},{"text":"impl Send for Recorder","synthetic":true,"types":[]},{"text":"impl Send for ReadStats","synthetic":true,"types":[]},{"text":"impl Send for AutoSplitController","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Send for Bernoulli","synthetic":true,"types":[]},{"text":"impl Send for BernoulliError","synthetic":true,"types":[]},{"text":"impl Send for Binomial","synthetic":true,"types":[]},{"text":"impl Send for Cauchy","synthetic":true,"types":[]},{"text":"impl Send for Dirichlet","synthetic":true,"types":[]},{"text":"impl Send for Exp1","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for Gamma","synthetic":true,"types":[]},{"text":"impl Send for ChiSquared","synthetic":true,"types":[]},{"text":"impl Send for FisherF","synthetic":true,"types":[]},{"text":"impl Send for StudentT","synthetic":true,"types":[]},{"text":"impl Send for Beta","synthetic":true,"types":[]},{"text":"impl Send for StandardNormal","synthetic":true,"types":[]},{"text":"impl Send for Normal","synthetic":true,"types":[]},{"text":"impl Send for LogNormal","synthetic":true,"types":[]},{"text":"impl Send for Pareto","synthetic":true,"types":[]},{"text":"impl Send for Poisson","synthetic":true,"types":[]},{"text":"impl Send for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UniformDuration","synthetic":true,"types":[]},{"text":"impl Send for UnitCircle","synthetic":true,"types":[]},{"text":"impl Send for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Send for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WeightedError","synthetic":true,"types":[]},{"text":"impl Send for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Send for Open01","synthetic":true,"types":[]},{"text":"impl Send for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Send for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Send for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EntropyRng","synthetic":true,"types":[]},{"text":"impl Send for StepRng","synthetic":true,"types":[]},{"text":"impl Send for StdRng","synthetic":true,"types":[]},{"text":"impl !Send for ThreadRng","synthetic":true,"types":[]},{"text":"impl Send for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Send for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Send for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OsRng","synthetic":true,"types":[]}];
implementors["rand_isaac"] = [{"text":"impl Send for IsaacRng","synthetic":true,"types":[]},{"text":"impl Send for IsaacCore","synthetic":true,"types":[]},{"text":"impl Send for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl Send for Isaac64Core","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Chain&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Chunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Enumerate&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Flatten&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Send for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Send for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Send for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Send for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Send for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Zip&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for ZipEq&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Intersperse&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Rev&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MinLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MaxLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Cloned&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Copied&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PanicFuse&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RepeatN&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Once&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Split&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for SplitTerminator&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Matches&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for MatchIndices&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Send for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]},{"text":"impl Send for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !Send for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Configuration","synthetic":true,"types":[]},{"text":"impl !Send for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;T, S&gt; Send for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for WithComments","synthetic":true,"types":[]},{"text":"impl Send for Comment","synthetic":true,"types":[]},{"text":"impl Send for Ast","synthetic":true,"types":[]},{"text":"impl Send for Alternation","synthetic":true,"types":[]},{"text":"impl Send for Concat","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for LiteralKind","synthetic":true,"types":[]},{"text":"impl Send for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassPerl","synthetic":true,"types":[]},{"text":"impl Send for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Send for ClassAscii","synthetic":true,"types":[]},{"text":"impl Send for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Send for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Send for ClassSet","synthetic":true,"types":[]},{"text":"impl Send for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Send for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Send for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Send for Assertion","synthetic":true,"types":[]},{"text":"impl Send for AssertionKind","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for CaptureName","synthetic":true,"types":[]},{"text":"impl Send for SetFlags","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for FlagsItem","synthetic":true,"types":[]},{"text":"impl Send for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Literals","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl Send for Translator","synthetic":true,"types":[]},{"text":"impl Send for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Hir","synthetic":true,"types":[]},{"text":"impl Send for HirKind","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Send for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for WordBoundary","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl Send for Utf8Range","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequences","synthetic":true,"types":[]}];
implementors["reqwest"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Form","synthetic":true,"types":[]},{"text":"impl Send for Part","synthetic":true,"types":[]},{"text":"impl Send for Body","synthetic":true,"types":[]},{"text":"impl Send for Client","synthetic":true,"types":[]},{"text":"impl Send for ClientBuilder","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for RequestBuilder","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]},{"text":"impl Send for Body","synthetic":true,"types":[]},{"text":"impl Send for Client","synthetic":true,"types":[]},{"text":"impl Send for ClientBuilder","synthetic":true,"types":[]},{"text":"impl Send for Form","synthetic":true,"types":[]},{"text":"impl Send for Part","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for RequestBuilder","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]},{"text":"impl Send for Proxy","synthetic":true,"types":[]},{"text":"impl Send for Policy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Attempt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Action","synthetic":true,"types":[]},{"text":"impl Send for Certificate","synthetic":true,"types":[]},{"text":"impl Send for Identity","synthetic":true,"types":[]}];
implementors["resolved_ts"] = [{"text":"impl Send for Resolver","synthetic":true,"types":[]},{"text":"impl Send for ChangeRow","synthetic":true,"types":[]},{"text":"impl Send for ChangeLog","synthetic":true,"types":[]},{"text":"impl Send for KeyOp","synthetic":true,"types":[]},{"text":"impl Send for RowChange","synthetic":true,"types":[]}];
implementors["rev_lines"] = [{"text":"impl&lt;R&gt; Send for RevLines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rgb"] = [{"text":"impl&lt;ComponentType&gt; Send for BGR&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Send for BGRA&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType&gt; Send for Gray&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Send for GrayAlpha&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType&gt; Send for RGB&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Send for RGBA&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl Send for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SealingKey","synthetic":true,"types":[]},{"text":"impl Send for OpeningKey","synthetic":true,"types":[]},{"text":"impl Send for Nonce","synthetic":true,"types":[]},{"text":"impl Send for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnboundKey","synthetic":true,"types":[]},{"text":"impl Send for LessSafeKey","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl Send for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl Send for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl Send for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for Unspecified","synthetic":true,"types":[]},{"text":"impl Send for KeyRejected","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Salt","synthetic":true,"types":[]},{"text":"impl Send for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Send for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SystemRandom","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl Send for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl Send for RsaParameters","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rocksdb"] = [{"text":"impl Send for CompactionFilterDecision","synthetic":true,"types":[]},{"text":"impl !Send for CompactionFilterHandle","synthetic":true,"types":[]},{"text":"impl Send for CompactionFilterContext","synthetic":true,"types":[]},{"text":"impl !Send for CompactionFilterFactoryHandle","synthetic":true,"types":[]},{"text":"impl Send for ComparatorCallback","synthetic":true,"types":[]},{"text":"impl Send for FileEncryptionInfo","synthetic":true,"types":[]},{"text":"impl Send for FlushJobInfo","synthetic":true,"types":[]},{"text":"impl Send for CompactionJobInfo","synthetic":true,"types":[]},{"text":"impl Send for SubcompactionJobInfo","synthetic":true,"types":[]},{"text":"impl Send for IngestionInfo","synthetic":true,"types":[]},{"text":"impl Send for WriteStallInfo","synthetic":true,"types":[]},{"text":"impl Send for MergeOperatorCallback","synthetic":true,"types":[]},{"text":"impl !Send for MergeOperands","synthetic":true,"types":[]},{"text":"impl !Send for ColumnFamilyMetaData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for LevelMetaData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SstFileMetaData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for PerfLevel","synthetic":true,"types":[]},{"text":"impl !Send for PerfContext","synthetic":true,"types":[]},{"text":"impl !Send for IOStatsContext","synthetic":true,"types":[]},{"text":"impl !Send for CFHandle","synthetic":true,"types":[]},{"text":"impl !Send for MapProperty","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SeekKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Range&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for KeyVersion","synthetic":true,"types":[]},{"text":"impl !Send for DBVector","synthetic":true,"types":[]},{"text":"impl !Send for BackupEngine","synthetic":true,"types":[]},{"text":"impl !Send for ExternalSstFileInfo","synthetic":true,"types":[]},{"text":"impl !Send for Cache","synthetic":true,"types":[]},{"text":"impl !Send for MemoryAllocator","synthetic":true,"types":[]},{"text":"impl Send for HistogramData","synthetic":true,"types":[]},{"text":"impl !Send for BlockBasedOptions","synthetic":true,"types":[]},{"text":"impl !Send for UnsafeSnap","synthetic":true,"types":[]},{"text":"impl !Send for ReadOptions","synthetic":true,"types":[]},{"text":"impl !Send for WriteOptions","synthetic":true,"types":[]},{"text":"impl !Send for CompactOptions","synthetic":true,"types":[]},{"text":"impl !Send for CompactionOptions","synthetic":true,"types":[]},{"text":"impl !Send for DBOptions","synthetic":true,"types":[]},{"text":"impl !Send for ColumnFamilyOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ColumnFamilyDescriptor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for CColumnFamilyDescriptor","synthetic":true,"types":[]},{"text":"impl !Send for FlushOptions","synthetic":true,"types":[]},{"text":"impl !Send for IngestExternalFileOptions","synthetic":true,"types":[]},{"text":"impl !Send for EnvOptions","synthetic":true,"types":[]},{"text":"impl !Send for RestoreOptions","synthetic":true,"types":[]},{"text":"impl !Send for FifoCompactionOptions","synthetic":true,"types":[]},{"text":"impl !Send for LRUCacheOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SstPartitionerRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SstPartitionerContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for TablePropertiesCollectionView","synthetic":true,"types":[]},{"text":"impl !Send for TablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl Send for TableProperties","synthetic":true,"types":[]},{"text":"impl Send for UserCollectedProperties","synthetic":true,"types":[]},{"text":"impl !Send for TablePropertiesCollection","synthetic":true,"types":[]},{"text":"impl !Send for TablePropertiesCollectionIter","synthetic":true,"types":[]},{"text":"impl !Send for TablePropertiesKey","synthetic":true,"types":[]},{"text":"impl !Send for TableProperties","synthetic":true,"types":[]},{"text":"impl !Send for UserCollectedProperties","synthetic":true,"types":[]},{"text":"impl !Send for TitanDBOptions","synthetic":true,"types":[]},{"text":"impl Send for TitanBlobIndex","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for WriteBatchIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WriteBatchRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DB","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Send&gt; Send for DBIterator&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Deref&lt;Target = DB&gt; + Send + Sync&gt; Send for Snapshot&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl Send for SstFileReader","synthetic":false,"types":[]},{"text":"impl Send for SstFileWriter","synthetic":false,"types":[]},{"text":"impl Send for Env","synthetic":false,"types":[]},{"text":"impl Send for SequentialFile","synthetic":false,"types":[]},{"text":"impl Send for RateLimiter","synthetic":false,"types":[]},{"text":"impl Send for WriteBatch","synthetic":false,"types":[]}];
implementors["rusoto_core"] = [{"text":"impl&lt;E&gt; Send for RusotoError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for EventStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HttpResponse","synthetic":true,"types":[]},{"text":"impl Send for BufferedHttpResponse","synthetic":true,"types":[]},{"text":"impl Send for HttpDispatchError","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for HttpClient&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HttpConfig","synthetic":true,"types":[]},{"text":"impl Send for TlsError","synthetic":true,"types":[]}];
implementors["rusoto_credential"] = [{"text":"impl Send for ContainerProvider","synthetic":true,"types":[]},{"text":"impl Send for EnvironmentProvider","synthetic":true,"types":[]},{"text":"impl Send for InstanceMetadataProvider","synthetic":true,"types":[]},{"text":"impl Send for ProfileProvider","synthetic":true,"types":[]},{"text":"impl Send for Secret","synthetic":true,"types":[]},{"text":"impl Send for StaticProvider","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for Variable&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AwsCredentials","synthetic":true,"types":[]},{"text":"impl Send for CredentialsError","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for AutoRefreshingProvider&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DefaultCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Send for ChainProvider","synthetic":true,"types":[]}];
implementors["rusoto_kms"] = [{"text":"impl Send for AliasListEntry","synthetic":true,"types":[]},{"text":"impl Send for CancelKeyDeletionRequest","synthetic":true,"types":[]},{"text":"impl Send for CancelKeyDeletionResponse","synthetic":true,"types":[]},{"text":"impl Send for ConnectCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Send for ConnectCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Send for CreateAliasRequest","synthetic":true,"types":[]},{"text":"impl Send for CreateCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Send for CreateCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Send for CreateGrantRequest","synthetic":true,"types":[]},{"text":"impl Send for CreateGrantResponse","synthetic":true,"types":[]},{"text":"impl Send for CreateKeyRequest","synthetic":true,"types":[]},{"text":"impl Send for CreateKeyResponse","synthetic":true,"types":[]},{"text":"impl Send for CustomKeyStoresListEntry","synthetic":true,"types":[]},{"text":"impl Send for DecryptRequest","synthetic":true,"types":[]},{"text":"impl Send for DecryptResponse","synthetic":true,"types":[]},{"text":"impl Send for DeleteAliasRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Send for DeleteImportedKeyMaterialRequest","synthetic":true,"types":[]},{"text":"impl Send for DescribeCustomKeyStoresRequest","synthetic":true,"types":[]},{"text":"impl Send for DescribeCustomKeyStoresResponse","synthetic":true,"types":[]},{"text":"impl Send for DescribeKeyRequest","synthetic":true,"types":[]},{"text":"impl Send for DescribeKeyResponse","synthetic":true,"types":[]},{"text":"impl Send for DisableKeyRequest","synthetic":true,"types":[]},{"text":"impl Send for DisableKeyRotationRequest","synthetic":true,"types":[]},{"text":"impl Send for DisconnectCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Send for DisconnectCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Send for EnableKeyRequest","synthetic":true,"types":[]},{"text":"impl Send for EnableKeyRotationRequest","synthetic":true,"types":[]},{"text":"impl Send for EncryptRequest","synthetic":true,"types":[]},{"text":"impl Send for EncryptResponse","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyPairRequest","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyPairResponse","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyPairWithoutPlaintextRequest","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyPairWithoutPlaintextResponse","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyRequest","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyResponse","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyWithoutPlaintextRequest","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyWithoutPlaintextResponse","synthetic":true,"types":[]},{"text":"impl Send for GenerateRandomRequest","synthetic":true,"types":[]},{"text":"impl Send for GenerateRandomResponse","synthetic":true,"types":[]},{"text":"impl Send for GetKeyPolicyRequest","synthetic":true,"types":[]},{"text":"impl Send for GetKeyPolicyResponse","synthetic":true,"types":[]},{"text":"impl Send for GetKeyRotationStatusRequest","synthetic":true,"types":[]},{"text":"impl Send for GetKeyRotationStatusResponse","synthetic":true,"types":[]},{"text":"impl Send for GetParametersForImportRequest","synthetic":true,"types":[]},{"text":"impl Send for GetParametersForImportResponse","synthetic":true,"types":[]},{"text":"impl Send for GetPublicKeyRequest","synthetic":true,"types":[]},{"text":"impl Send for GetPublicKeyResponse","synthetic":true,"types":[]},{"text":"impl Send for GrantConstraints","synthetic":true,"types":[]},{"text":"impl Send for GrantListEntry","synthetic":true,"types":[]},{"text":"impl Send for ImportKeyMaterialRequest","synthetic":true,"types":[]},{"text":"impl Send for ImportKeyMaterialResponse","synthetic":true,"types":[]},{"text":"impl Send for KeyListEntry","synthetic":true,"types":[]},{"text":"impl Send for KeyMetadata","synthetic":true,"types":[]},{"text":"impl Send for ListAliasesRequest","synthetic":true,"types":[]},{"text":"impl Send for ListAliasesResponse","synthetic":true,"types":[]},{"text":"impl Send for ListGrantsRequest","synthetic":true,"types":[]},{"text":"impl Send for ListGrantsResponse","synthetic":true,"types":[]},{"text":"impl Send for ListKeyPoliciesRequest","synthetic":true,"types":[]},{"text":"impl Send for ListKeyPoliciesResponse","synthetic":true,"types":[]},{"text":"impl Send for ListKeysRequest","synthetic":true,"types":[]},{"text":"impl Send for ListKeysResponse","synthetic":true,"types":[]},{"text":"impl Send for ListResourceTagsRequest","synthetic":true,"types":[]},{"text":"impl Send for ListResourceTagsResponse","synthetic":true,"types":[]},{"text":"impl Send for ListRetirableGrantsRequest","synthetic":true,"types":[]},{"text":"impl Send for PutKeyPolicyRequest","synthetic":true,"types":[]},{"text":"impl Send for ReEncryptRequest","synthetic":true,"types":[]},{"text":"impl Send for ReEncryptResponse","synthetic":true,"types":[]},{"text":"impl Send for RetireGrantRequest","synthetic":true,"types":[]},{"text":"impl Send for RevokeGrantRequest","synthetic":true,"types":[]},{"text":"impl Send for ScheduleKeyDeletionRequest","synthetic":true,"types":[]},{"text":"impl Send for ScheduleKeyDeletionResponse","synthetic":true,"types":[]},{"text":"impl Send for SignRequest","synthetic":true,"types":[]},{"text":"impl Send for SignResponse","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for TagResourceRequest","synthetic":true,"types":[]},{"text":"impl Send for UntagResourceRequest","synthetic":true,"types":[]},{"text":"impl Send for UpdateAliasRequest","synthetic":true,"types":[]},{"text":"impl Send for UpdateCustomKeyStoreRequest","synthetic":true,"types":[]},{"text":"impl Send for UpdateCustomKeyStoreResponse","synthetic":true,"types":[]},{"text":"impl Send for UpdateKeyDescriptionRequest","synthetic":true,"types":[]},{"text":"impl Send for VerifyRequest","synthetic":true,"types":[]},{"text":"impl Send for VerifyResponse","synthetic":true,"types":[]},{"text":"impl Send for CancelKeyDeletionError","synthetic":true,"types":[]},{"text":"impl Send for ConnectCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Send for CreateAliasError","synthetic":true,"types":[]},{"text":"impl Send for CreateCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Send for CreateGrantError","synthetic":true,"types":[]},{"text":"impl Send for CreateKeyError","synthetic":true,"types":[]},{"text":"impl Send for DecryptError","synthetic":true,"types":[]},{"text":"impl Send for DeleteAliasError","synthetic":true,"types":[]},{"text":"impl Send for DeleteCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Send for DeleteImportedKeyMaterialError","synthetic":true,"types":[]},{"text":"impl Send for DescribeCustomKeyStoresError","synthetic":true,"types":[]},{"text":"impl Send for DescribeKeyError","synthetic":true,"types":[]},{"text":"impl Send for DisableKeyError","synthetic":true,"types":[]},{"text":"impl Send for DisableKeyRotationError","synthetic":true,"types":[]},{"text":"impl Send for DisconnectCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Send for EnableKeyError","synthetic":true,"types":[]},{"text":"impl Send for EnableKeyRotationError","synthetic":true,"types":[]},{"text":"impl Send for EncryptError","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyError","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyPairError","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyPairWithoutPlaintextError","synthetic":true,"types":[]},{"text":"impl Send for GenerateDataKeyWithoutPlaintextError","synthetic":true,"types":[]},{"text":"impl Send for GenerateRandomError","synthetic":true,"types":[]},{"text":"impl Send for GetKeyPolicyError","synthetic":true,"types":[]},{"text":"impl Send for GetKeyRotationStatusError","synthetic":true,"types":[]},{"text":"impl Send for GetParametersForImportError","synthetic":true,"types":[]},{"text":"impl Send for GetPublicKeyError","synthetic":true,"types":[]},{"text":"impl Send for ImportKeyMaterialError","synthetic":true,"types":[]},{"text":"impl Send for ListAliasesError","synthetic":true,"types":[]},{"text":"impl Send for ListGrantsError","synthetic":true,"types":[]},{"text":"impl Send for ListKeyPoliciesError","synthetic":true,"types":[]},{"text":"impl Send for ListKeysError","synthetic":true,"types":[]},{"text":"impl Send for ListResourceTagsError","synthetic":true,"types":[]},{"text":"impl Send for ListRetirableGrantsError","synthetic":true,"types":[]},{"text":"impl Send for PutKeyPolicyError","synthetic":true,"types":[]},{"text":"impl Send for ReEncryptError","synthetic":true,"types":[]},{"text":"impl Send for RetireGrantError","synthetic":true,"types":[]},{"text":"impl Send for RevokeGrantError","synthetic":true,"types":[]},{"text":"impl Send for ScheduleKeyDeletionError","synthetic":true,"types":[]},{"text":"impl Send for SignError","synthetic":true,"types":[]},{"text":"impl Send for TagResourceError","synthetic":true,"types":[]},{"text":"impl Send for UntagResourceError","synthetic":true,"types":[]},{"text":"impl Send for UpdateAliasError","synthetic":true,"types":[]},{"text":"impl Send for UpdateCustomKeyStoreError","synthetic":true,"types":[]},{"text":"impl Send for UpdateKeyDescriptionError","synthetic":true,"types":[]},{"text":"impl Send for VerifyError","synthetic":true,"types":[]},{"text":"impl Send for KmsClient","synthetic":true,"types":[]}];
implementors["rusoto_s3"] = [{"text":"impl Send for PreSignedRequestOption","synthetic":true,"types":[]},{"text":"impl Send for AbortIncompleteMultipartUpload","synthetic":true,"types":[]},{"text":"impl Send for AbortIncompleteMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl Send for AbortMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Send for AbortMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Send for AccelerateConfiguration","synthetic":true,"types":[]},{"text":"impl Send for AccelerateConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for AccessControlPolicy","synthetic":true,"types":[]},{"text":"impl Send for AccessControlPolicySerializer","synthetic":true,"types":[]},{"text":"impl Send for AccessControlTranslation","synthetic":true,"types":[]},{"text":"impl Send for AccessControlTranslationSerializer","synthetic":true,"types":[]},{"text":"impl Send for AccountIdSerializer","synthetic":true,"types":[]},{"text":"impl Send for AllowQuotedRecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Send for AllowedHeaderSerializer","synthetic":true,"types":[]},{"text":"impl Send for AllowedHeadersSerializer","synthetic":true,"types":[]},{"text":"impl Send for AllowedMethodSerializer","synthetic":true,"types":[]},{"text":"impl Send for AllowedMethodsSerializer","synthetic":true,"types":[]},{"text":"impl Send for AllowedOriginSerializer","synthetic":true,"types":[]},{"text":"impl Send for AllowedOriginsSerializer","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsAndOperator","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsConfiguration","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsExportDestination","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsExportDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsFilter","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsFilterSerializer","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsIdSerializer","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsS3BucketDestination","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Send for AnalyticsS3ExportFileFormatSerializer","synthetic":true,"types":[]},{"text":"impl Send for BodySerializer","synthetic":true,"types":[]},{"text":"impl Send for Bucket","synthetic":true,"types":[]},{"text":"impl Send for BucketAccelerateStatusSerializer","synthetic":true,"types":[]},{"text":"impl Send for BucketLifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl Send for BucketLifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for BucketLocationConstraintSerializer","synthetic":true,"types":[]},{"text":"impl Send for BucketLoggingStatus","synthetic":true,"types":[]},{"text":"impl Send for BucketLoggingStatusSerializer","synthetic":true,"types":[]},{"text":"impl Send for BucketLogsPermissionSerializer","synthetic":true,"types":[]},{"text":"impl Send for BucketNameSerializer","synthetic":true,"types":[]},{"text":"impl Send for BucketVersioningStatusSerializer","synthetic":true,"types":[]},{"text":"impl Send for CORSConfiguration","synthetic":true,"types":[]},{"text":"impl Send for CORSConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for CORSRule","synthetic":true,"types":[]},{"text":"impl Send for CORSRuleSerializer","synthetic":true,"types":[]},{"text":"impl Send for CORSRulesSerializer","synthetic":true,"types":[]},{"text":"impl Send for CSVInput","synthetic":true,"types":[]},{"text":"impl Send for CSVInputSerializer","synthetic":true,"types":[]},{"text":"impl Send for CSVOutput","synthetic":true,"types":[]},{"text":"impl Send for CSVOutputSerializer","synthetic":true,"types":[]},{"text":"impl Send for CloudFunctionSerializer","synthetic":true,"types":[]},{"text":"impl Send for CloudFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl Send for CloudFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for CloudFunctionInvocationRoleSerializer","synthetic":true,"types":[]},{"text":"impl Send for CommentsSerializer","synthetic":true,"types":[]},{"text":"impl Send for CommonPrefix","synthetic":true,"types":[]},{"text":"impl Send for CompleteMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Send for CompleteMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Send for CompletedMultipartUpload","synthetic":true,"types":[]},{"text":"impl Send for CompletedMultipartUploadSerializer","synthetic":true,"types":[]},{"text":"impl Send for CompletedPart","synthetic":true,"types":[]},{"text":"impl Send for CompletedPartSerializer","synthetic":true,"types":[]},{"text":"impl Send for CompletedPartListSerializer","synthetic":true,"types":[]},{"text":"impl Send for CompressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl Send for Condition","synthetic":true,"types":[]},{"text":"impl Send for ConditionSerializer","synthetic":true,"types":[]},{"text":"impl Send for ContinuationEvent","synthetic":true,"types":[]},{"text":"impl Send for CopyObjectOutput","synthetic":true,"types":[]},{"text":"impl Send for CopyObjectRequest","synthetic":true,"types":[]},{"text":"impl Send for CopyObjectResult","synthetic":true,"types":[]},{"text":"impl Send for CopyPartResult","synthetic":true,"types":[]},{"text":"impl Send for CreateBucketConfiguration","synthetic":true,"types":[]},{"text":"impl Send for CreateBucketConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for CreateBucketOutput","synthetic":true,"types":[]},{"text":"impl Send for CreateBucketRequest","synthetic":true,"types":[]},{"text":"impl Send for CreateMultipartUploadOutput","synthetic":true,"types":[]},{"text":"impl Send for CreateMultipartUploadRequest","synthetic":true,"types":[]},{"text":"impl Send for DateSerializer","synthetic":true,"types":[]},{"text":"impl Send for DaysSerializer","synthetic":true,"types":[]},{"text":"impl Send for DaysAfterInitiationSerializer","synthetic":true,"types":[]},{"text":"impl Send for DefaultRetention","synthetic":true,"types":[]},{"text":"impl Send for DefaultRetentionSerializer","synthetic":true,"types":[]},{"text":"impl Send for Delete","synthetic":true,"types":[]},{"text":"impl Send for DeleteSerializer","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteMarkerEntry","synthetic":true,"types":[]},{"text":"impl Send for DeleteMarkerReplication","synthetic":true,"types":[]},{"text":"impl Send for DeleteMarkerReplicationSerializer","synthetic":true,"types":[]},{"text":"impl Send for DeleteMarkerReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Send for DeleteObjectOutput","synthetic":true,"types":[]},{"text":"impl Send for DeleteObjectRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Send for DeleteObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Send for DeleteObjectsOutput","synthetic":true,"types":[]},{"text":"impl Send for DeleteObjectsRequest","synthetic":true,"types":[]},{"text":"impl Send for DeletePublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Send for DeletedObject","synthetic":true,"types":[]},{"text":"impl Send for DelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Send for DescriptionSerializer","synthetic":true,"types":[]},{"text":"impl Send for Destination","synthetic":true,"types":[]},{"text":"impl Send for DestinationSerializer","synthetic":true,"types":[]},{"text":"impl Send for DisplayNameSerializer","synthetic":true,"types":[]},{"text":"impl Send for ETagSerializer","synthetic":true,"types":[]},{"text":"impl Send for EmailAddressSerializer","synthetic":true,"types":[]},{"text":"impl Send for EnableRequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl Send for EncodingTypeSerializer","synthetic":true,"types":[]},{"text":"impl Send for Encryption","synthetic":true,"types":[]},{"text":"impl Send for EncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Send for EncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl Send for EncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for EndSerializer","synthetic":true,"types":[]},{"text":"impl Send for EndEvent","synthetic":true,"types":[]},{"text":"impl Send for S3Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorDocument","synthetic":true,"types":[]},{"text":"impl Send for ErrorDocumentSerializer","synthetic":true,"types":[]},{"text":"impl Send for EventSerializer","synthetic":true,"types":[]},{"text":"impl Send for EventListSerializer","synthetic":true,"types":[]},{"text":"impl Send for ExistingObjectReplication","synthetic":true,"types":[]},{"text":"impl Send for ExistingObjectReplicationSerializer","synthetic":true,"types":[]},{"text":"impl Send for ExistingObjectReplicationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Send for ExpirationStatusSerializer","synthetic":true,"types":[]},{"text":"impl Send for ExpiredObjectDeleteMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Send for ExposeHeaderSerializer","synthetic":true,"types":[]},{"text":"impl Send for ExposeHeadersSerializer","synthetic":true,"types":[]},{"text":"impl Send for ExpressionSerializer","synthetic":true,"types":[]},{"text":"impl Send for ExpressionTypeSerializer","synthetic":true,"types":[]},{"text":"impl Send for FetchOwnerSerializer","synthetic":true,"types":[]},{"text":"impl Send for FieldDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Send for FileHeaderInfoSerializer","synthetic":true,"types":[]},{"text":"impl Send for FilterRule","synthetic":true,"types":[]},{"text":"impl Send for FilterRuleSerializer","synthetic":true,"types":[]},{"text":"impl Send for FilterRuleListSerializer","synthetic":true,"types":[]},{"text":"impl Send for FilterRuleNameSerializer","synthetic":true,"types":[]},{"text":"impl Send for FilterRuleValueSerializer","synthetic":true,"types":[]},{"text":"impl Send for GetBucketAccelerateConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketAclOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketAclRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketAnalyticsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketCorsOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketEncryptionOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketInventoryConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLifecycleConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLifecycleOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLocationOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLocationRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLoggingOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketMetricsConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketPolicyOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketPolicyStatusOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketPolicyStatusRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketReplicationOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketRequestPaymentOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketTaggingOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketVersioningOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl Send for GetBucketWebsiteOutput","synthetic":true,"types":[]},{"text":"impl Send for GetBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Send for GetObjectAclOutput","synthetic":true,"types":[]},{"text":"impl Send for GetObjectAclRequest","synthetic":true,"types":[]},{"text":"impl Send for GetObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl Send for GetObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl Send for GetObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Send for GetObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for GetObjectOutput","synthetic":true,"types":[]},{"text":"impl Send for GetObjectRequest","synthetic":true,"types":[]},{"text":"impl Send for GetObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl Send for GetObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl Send for GetObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Send for GetObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Send for GetObjectTorrentOutput","synthetic":true,"types":[]},{"text":"impl Send for GetObjectTorrentRequest","synthetic":true,"types":[]},{"text":"impl Send for GetPublicAccessBlockOutput","synthetic":true,"types":[]},{"text":"impl Send for GetPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Send for GlacierJobParameters","synthetic":true,"types":[]},{"text":"impl Send for GlacierJobParametersSerializer","synthetic":true,"types":[]},{"text":"impl Send for Grant","synthetic":true,"types":[]},{"text":"impl Send for GrantSerializer","synthetic":true,"types":[]},{"text":"impl Send for Grantee","synthetic":true,"types":[]},{"text":"impl Send for GranteeSerializer","synthetic":true,"types":[]},{"text":"impl Send for GrantsSerializer","synthetic":true,"types":[]},{"text":"impl Send for HeadBucketRequest","synthetic":true,"types":[]},{"text":"impl Send for HeadObjectOutput","synthetic":true,"types":[]},{"text":"impl Send for HeadObjectRequest","synthetic":true,"types":[]},{"text":"impl Send for HostNameSerializer","synthetic":true,"types":[]},{"text":"impl Send for HttpErrorCodeReturnedEqualsSerializer","synthetic":true,"types":[]},{"text":"impl Send for HttpRedirectCodeSerializer","synthetic":true,"types":[]},{"text":"impl Send for IDSerializer","synthetic":true,"types":[]},{"text":"impl Send for IndexDocument","synthetic":true,"types":[]},{"text":"impl Send for IndexDocumentSerializer","synthetic":true,"types":[]},{"text":"impl Send for Initiator","synthetic":true,"types":[]},{"text":"impl Send for InputSerialization","synthetic":true,"types":[]},{"text":"impl Send for InputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl Send for InventoryConfiguration","synthetic":true,"types":[]},{"text":"impl Send for InventoryConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for InventoryDestination","synthetic":true,"types":[]},{"text":"impl Send for InventoryDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Send for InventoryEncryption","synthetic":true,"types":[]},{"text":"impl Send for InventoryEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Send for InventoryFilter","synthetic":true,"types":[]},{"text":"impl Send for InventoryFilterSerializer","synthetic":true,"types":[]},{"text":"impl Send for InventoryFormatSerializer","synthetic":true,"types":[]},{"text":"impl Send for InventoryFrequencySerializer","synthetic":true,"types":[]},{"text":"impl Send for InventoryIdSerializer","synthetic":true,"types":[]},{"text":"impl Send for InventoryIncludedObjectVersionsSerializer","synthetic":true,"types":[]},{"text":"impl Send for InventoryOptionalFieldSerializer","synthetic":true,"types":[]},{"text":"impl Send for InventoryOptionalFieldsSerializer","synthetic":true,"types":[]},{"text":"impl Send for InventoryS3BucketDestination","synthetic":true,"types":[]},{"text":"impl Send for InventoryS3BucketDestinationSerializer","synthetic":true,"types":[]},{"text":"impl Send for InventorySchedule","synthetic":true,"types":[]},{"text":"impl Send for InventoryScheduleSerializer","synthetic":true,"types":[]},{"text":"impl Send for IsEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Send for JSONInput","synthetic":true,"types":[]},{"text":"impl Send for JSONInputSerializer","synthetic":true,"types":[]},{"text":"impl Send for JSONOutput","synthetic":true,"types":[]},{"text":"impl Send for JSONOutputSerializer","synthetic":true,"types":[]},{"text":"impl Send for JSONTypeSerializer","synthetic":true,"types":[]},{"text":"impl Send for KMSContextSerializer","synthetic":true,"types":[]},{"text":"impl Send for KeyMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Send for KeyPrefixEqualsSerializer","synthetic":true,"types":[]},{"text":"impl Send for LambdaFunctionArnSerializer","synthetic":true,"types":[]},{"text":"impl Send for LambdaFunctionConfiguration","synthetic":true,"types":[]},{"text":"impl Send for LambdaFunctionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for LambdaFunctionConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Send for LifecycleConfiguration","synthetic":true,"types":[]},{"text":"impl Send for LifecycleConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for LifecycleExpiration","synthetic":true,"types":[]},{"text":"impl Send for LifecycleExpirationSerializer","synthetic":true,"types":[]},{"text":"impl Send for LifecycleRule","synthetic":true,"types":[]},{"text":"impl Send for LifecycleRuleSerializer","synthetic":true,"types":[]},{"text":"impl Send for LifecycleRuleAndOperator","synthetic":true,"types":[]},{"text":"impl Send for LifecycleRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Send for LifecycleRuleFilter","synthetic":true,"types":[]},{"text":"impl Send for LifecycleRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl Send for LifecycleRulesSerializer","synthetic":true,"types":[]},{"text":"impl Send for ListBucketAnalyticsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Send for ListBucketAnalyticsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Send for ListBucketInventoryConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Send for ListBucketInventoryConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Send for ListBucketMetricsConfigurationsOutput","synthetic":true,"types":[]},{"text":"impl Send for ListBucketMetricsConfigurationsRequest","synthetic":true,"types":[]},{"text":"impl Send for ListBucketsOutput","synthetic":true,"types":[]},{"text":"impl Send for ListMultipartUploadsOutput","synthetic":true,"types":[]},{"text":"impl Send for ListMultipartUploadsRequest","synthetic":true,"types":[]},{"text":"impl Send for ListObjectVersionsOutput","synthetic":true,"types":[]},{"text":"impl Send for ListObjectVersionsRequest","synthetic":true,"types":[]},{"text":"impl Send for ListObjectsOutput","synthetic":true,"types":[]},{"text":"impl Send for ListObjectsRequest","synthetic":true,"types":[]},{"text":"impl Send for ListObjectsV2Output","synthetic":true,"types":[]},{"text":"impl Send for ListObjectsV2Request","synthetic":true,"types":[]},{"text":"impl Send for ListPartsOutput","synthetic":true,"types":[]},{"text":"impl Send for ListPartsRequest","synthetic":true,"types":[]},{"text":"impl Send for LocationPrefixSerializer","synthetic":true,"types":[]},{"text":"impl Send for LoggingEnabled","synthetic":true,"types":[]},{"text":"impl Send for LoggingEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Send for MFADeleteSerializer","synthetic":true,"types":[]},{"text":"impl Send for MarkerSerializer","synthetic":true,"types":[]},{"text":"impl Send for MaxAgeSecondsSerializer","synthetic":true,"types":[]},{"text":"impl Send for MaxKeysSerializer","synthetic":true,"types":[]},{"text":"impl Send for MaxPartsSerializer","synthetic":true,"types":[]},{"text":"impl Send for MaxUploadsSerializer","synthetic":true,"types":[]},{"text":"impl Send for MetadataEntry","synthetic":true,"types":[]},{"text":"impl Send for MetadataEntrySerializer","synthetic":true,"types":[]},{"text":"impl Send for MetadataKeySerializer","synthetic":true,"types":[]},{"text":"impl Send for MetadataValueSerializer","synthetic":true,"types":[]},{"text":"impl Send for Metrics","synthetic":true,"types":[]},{"text":"impl Send for MetricsSerializer","synthetic":true,"types":[]},{"text":"impl Send for MetricsAndOperator","synthetic":true,"types":[]},{"text":"impl Send for MetricsAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Send for MetricsConfiguration","synthetic":true,"types":[]},{"text":"impl Send for MetricsConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for MetricsFilter","synthetic":true,"types":[]},{"text":"impl Send for MetricsFilterSerializer","synthetic":true,"types":[]},{"text":"impl Send for MetricsIdSerializer","synthetic":true,"types":[]},{"text":"impl Send for MetricsStatusSerializer","synthetic":true,"types":[]},{"text":"impl Send for MinutesSerializer","synthetic":true,"types":[]},{"text":"impl Send for MultipartUpload","synthetic":true,"types":[]},{"text":"impl Send for MultipartUploadIdSerializer","synthetic":true,"types":[]},{"text":"impl Send for NoncurrentVersionExpiration","synthetic":true,"types":[]},{"text":"impl Send for NoncurrentVersionExpirationSerializer","synthetic":true,"types":[]},{"text":"impl Send for NoncurrentVersionTransition","synthetic":true,"types":[]},{"text":"impl Send for NoncurrentVersionTransitionSerializer","synthetic":true,"types":[]},{"text":"impl Send for NoncurrentVersionTransitionListSerializer","synthetic":true,"types":[]},{"text":"impl Send for NotificationConfiguration","synthetic":true,"types":[]},{"text":"impl Send for NotificationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for NotificationConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Send for NotificationConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Send for NotificationConfigurationFilter","synthetic":true,"types":[]},{"text":"impl Send for NotificationConfigurationFilterSerializer","synthetic":true,"types":[]},{"text":"impl Send for NotificationIdSerializer","synthetic":true,"types":[]},{"text":"impl Send for Object","synthetic":true,"types":[]},{"text":"impl Send for ObjectCannedACLSerializer","synthetic":true,"types":[]},{"text":"impl Send for ObjectIdentifier","synthetic":true,"types":[]},{"text":"impl Send for ObjectIdentifierSerializer","synthetic":true,"types":[]},{"text":"impl Send for ObjectIdentifierListSerializer","synthetic":true,"types":[]},{"text":"impl Send for ObjectKeySerializer","synthetic":true,"types":[]},{"text":"impl Send for ObjectLockConfiguration","synthetic":true,"types":[]},{"text":"impl Send for ObjectLockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for ObjectLockEnabledSerializer","synthetic":true,"types":[]},{"text":"impl Send for ObjectLockLegalHold","synthetic":true,"types":[]},{"text":"impl Send for ObjectLockLegalHoldSerializer","synthetic":true,"types":[]},{"text":"impl Send for ObjectLockLegalHoldStatusSerializer","synthetic":true,"types":[]},{"text":"impl Send for ObjectLockRetention","synthetic":true,"types":[]},{"text":"impl Send for ObjectLockRetentionSerializer","synthetic":true,"types":[]},{"text":"impl Send for ObjectLockRetentionModeSerializer","synthetic":true,"types":[]},{"text":"impl Send for ObjectLockRule","synthetic":true,"types":[]},{"text":"impl Send for ObjectLockRuleSerializer","synthetic":true,"types":[]},{"text":"impl Send for ObjectVersion","synthetic":true,"types":[]},{"text":"impl Send for ObjectVersionIdSerializer","synthetic":true,"types":[]},{"text":"impl Send for OutputLocation","synthetic":true,"types":[]},{"text":"impl Send for OutputLocationSerializer","synthetic":true,"types":[]},{"text":"impl Send for OutputSerialization","synthetic":true,"types":[]},{"text":"impl Send for OutputSerializationSerializer","synthetic":true,"types":[]},{"text":"impl Send for Owner","synthetic":true,"types":[]},{"text":"impl Send for OwnerSerializer","synthetic":true,"types":[]},{"text":"impl Send for OwnerOverrideSerializer","synthetic":true,"types":[]},{"text":"impl Send for ParquetInput","synthetic":true,"types":[]},{"text":"impl Send for ParquetInputSerializer","synthetic":true,"types":[]},{"text":"impl Send for Part","synthetic":true,"types":[]},{"text":"impl Send for PartNumberSerializer","synthetic":true,"types":[]},{"text":"impl Send for PartNumberMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Send for PayerSerializer","synthetic":true,"types":[]},{"text":"impl Send for PermissionSerializer","synthetic":true,"types":[]},{"text":"impl Send for PolicyStatus","synthetic":true,"types":[]},{"text":"impl Send for PrefixSerializer","synthetic":true,"types":[]},{"text":"impl Send for PrioritySerializer","synthetic":true,"types":[]},{"text":"impl Send for Progress","synthetic":true,"types":[]},{"text":"impl Send for ProgressEvent","synthetic":true,"types":[]},{"text":"impl Send for ProtocolSerializer","synthetic":true,"types":[]},{"text":"impl Send for PublicAccessBlockConfiguration","synthetic":true,"types":[]},{"text":"impl Send for PublicAccessBlockConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for PutBucketAccelerateConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketAclRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketAnalyticsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketCorsRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketEncryptionRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketInventoryConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketLifecycleConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketLifecycleRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketLoggingRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketMetricsConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketNotificationConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketNotificationRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketPolicyRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketReplicationRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketRequestPaymentRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketTaggingRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketVersioningRequest","synthetic":true,"types":[]},{"text":"impl Send for PutBucketWebsiteRequest","synthetic":true,"types":[]},{"text":"impl Send for PutObjectAclOutput","synthetic":true,"types":[]},{"text":"impl Send for PutObjectAclRequest","synthetic":true,"types":[]},{"text":"impl Send for PutObjectLegalHoldOutput","synthetic":true,"types":[]},{"text":"impl Send for PutObjectLegalHoldRequest","synthetic":true,"types":[]},{"text":"impl Send for PutObjectLockConfigurationOutput","synthetic":true,"types":[]},{"text":"impl Send for PutObjectLockConfigurationRequest","synthetic":true,"types":[]},{"text":"impl Send for PutObjectOutput","synthetic":true,"types":[]},{"text":"impl Send for PutObjectRequest","synthetic":true,"types":[]},{"text":"impl Send for PutObjectRetentionOutput","synthetic":true,"types":[]},{"text":"impl Send for PutObjectRetentionRequest","synthetic":true,"types":[]},{"text":"impl Send for PutObjectTaggingOutput","synthetic":true,"types":[]},{"text":"impl Send for PutObjectTaggingRequest","synthetic":true,"types":[]},{"text":"impl Send for PutPublicAccessBlockRequest","synthetic":true,"types":[]},{"text":"impl Send for QueueArnSerializer","synthetic":true,"types":[]},{"text":"impl Send for QueueConfiguration","synthetic":true,"types":[]},{"text":"impl Send for QueueConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for QueueConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Send for QueueConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Send for QueueConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Send for QuietSerializer","synthetic":true,"types":[]},{"text":"impl Send for QuoteCharacterSerializer","synthetic":true,"types":[]},{"text":"impl Send for QuoteEscapeCharacterSerializer","synthetic":true,"types":[]},{"text":"impl Send for QuoteFieldsSerializer","synthetic":true,"types":[]},{"text":"impl Send for RecordDelimiterSerializer","synthetic":true,"types":[]},{"text":"impl Send for RecordsEvent","synthetic":true,"types":[]},{"text":"impl Send for Redirect","synthetic":true,"types":[]},{"text":"impl Send for RedirectSerializer","synthetic":true,"types":[]},{"text":"impl Send for RedirectAllRequestsTo","synthetic":true,"types":[]},{"text":"impl Send for RedirectAllRequestsToSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplaceKeyPrefixWithSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplaceKeyWithSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplicaKmsKeyIDSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplicationConfiguration","synthetic":true,"types":[]},{"text":"impl Send for ReplicationConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplicationRule","synthetic":true,"types":[]},{"text":"impl Send for ReplicationRuleSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplicationRuleAndOperator","synthetic":true,"types":[]},{"text":"impl Send for ReplicationRuleAndOperatorSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplicationRuleFilter","synthetic":true,"types":[]},{"text":"impl Send for ReplicationRuleFilterSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplicationRuleStatusSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplicationRulesSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplicationTime","synthetic":true,"types":[]},{"text":"impl Send for ReplicationTimeSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplicationTimeStatusSerializer","synthetic":true,"types":[]},{"text":"impl Send for ReplicationTimeValue","synthetic":true,"types":[]},{"text":"impl Send for ReplicationTimeValueSerializer","synthetic":true,"types":[]},{"text":"impl Send for RequestPaymentConfiguration","synthetic":true,"types":[]},{"text":"impl Send for RequestPaymentConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for RequestProgress","synthetic":true,"types":[]},{"text":"impl Send for RequestProgressSerializer","synthetic":true,"types":[]},{"text":"impl Send for ResponseCacheControlSerializer","synthetic":true,"types":[]},{"text":"impl Send for ResponseContentDispositionSerializer","synthetic":true,"types":[]},{"text":"impl Send for ResponseContentEncodingSerializer","synthetic":true,"types":[]},{"text":"impl Send for ResponseContentLanguageSerializer","synthetic":true,"types":[]},{"text":"impl Send for ResponseContentTypeSerializer","synthetic":true,"types":[]},{"text":"impl Send for ResponseExpiresSerializer","synthetic":true,"types":[]},{"text":"impl Send for RestoreObjectOutput","synthetic":true,"types":[]},{"text":"impl Send for RestoreObjectRequest","synthetic":true,"types":[]},{"text":"impl Send for RestoreRequest","synthetic":true,"types":[]},{"text":"impl Send for RestoreRequestSerializer","synthetic":true,"types":[]},{"text":"impl Send for RestoreRequestTypeSerializer","synthetic":true,"types":[]},{"text":"impl Send for RoleSerializer","synthetic":true,"types":[]},{"text":"impl Send for RoutingRule","synthetic":true,"types":[]},{"text":"impl Send for RoutingRuleSerializer","synthetic":true,"types":[]},{"text":"impl Send for RoutingRulesSerializer","synthetic":true,"types":[]},{"text":"impl Send for Rule","synthetic":true,"types":[]},{"text":"impl Send for RuleSerializer","synthetic":true,"types":[]},{"text":"impl Send for RulesSerializer","synthetic":true,"types":[]},{"text":"impl Send for S3KeyFilter","synthetic":true,"types":[]},{"text":"impl Send for S3KeyFilterSerializer","synthetic":true,"types":[]},{"text":"impl Send for S3Location","synthetic":true,"types":[]},{"text":"impl Send for S3LocationSerializer","synthetic":true,"types":[]},{"text":"impl Send for SSEKMS","synthetic":true,"types":[]},{"text":"impl Send for SSEKMSSerializer","synthetic":true,"types":[]},{"text":"impl Send for SSEKMSKeyIdSerializer","synthetic":true,"types":[]},{"text":"impl Send for SSES3","synthetic":true,"types":[]},{"text":"impl Send for SSES3Serializer","synthetic":true,"types":[]},{"text":"impl Send for ScanRange","synthetic":true,"types":[]},{"text":"impl Send for ScanRangeSerializer","synthetic":true,"types":[]},{"text":"impl Send for SelectObjectContentEventStreamItem","synthetic":true,"types":[]},{"text":"impl Send for SelectObjectContentOutput","synthetic":true,"types":[]},{"text":"impl Send for SelectObjectContentRequest","synthetic":true,"types":[]},{"text":"impl Send for SelectObjectContentRequestSerializer","synthetic":true,"types":[]},{"text":"impl Send for SelectParameters","synthetic":true,"types":[]},{"text":"impl Send for SelectParametersSerializer","synthetic":true,"types":[]},{"text":"impl Send for ServerSideEncryptionSerializer","synthetic":true,"types":[]},{"text":"impl Send for ServerSideEncryptionByDefault","synthetic":true,"types":[]},{"text":"impl Send for ServerSideEncryptionByDefaultSerializer","synthetic":true,"types":[]},{"text":"impl Send for ServerSideEncryptionConfiguration","synthetic":true,"types":[]},{"text":"impl Send for ServerSideEncryptionConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for ServerSideEncryptionRule","synthetic":true,"types":[]},{"text":"impl Send for ServerSideEncryptionRuleSerializer","synthetic":true,"types":[]},{"text":"impl Send for ServerSideEncryptionRulesSerializer","synthetic":true,"types":[]},{"text":"impl Send for SettingSerializer","synthetic":true,"types":[]},{"text":"impl Send for SourceSelectionCriteria","synthetic":true,"types":[]},{"text":"impl Send for SourceSelectionCriteriaSerializer","synthetic":true,"types":[]},{"text":"impl Send for SseKmsEncryptedObjects","synthetic":true,"types":[]},{"text":"impl Send for SseKmsEncryptedObjectsSerializer","synthetic":true,"types":[]},{"text":"impl Send for SseKmsEncryptedObjectsStatusSerializer","synthetic":true,"types":[]},{"text":"impl Send for StartSerializer","synthetic":true,"types":[]},{"text":"impl Send for StartAfterSerializer","synthetic":true,"types":[]},{"text":"impl Send for Stats","synthetic":true,"types":[]},{"text":"impl Send for StatsEvent","synthetic":true,"types":[]},{"text":"impl Send for StorageClassSerializer","synthetic":true,"types":[]},{"text":"impl Send for StorageClassAnalysis","synthetic":true,"types":[]},{"text":"impl Send for StorageClassAnalysisSerializer","synthetic":true,"types":[]},{"text":"impl Send for StorageClassAnalysisDataExport","synthetic":true,"types":[]},{"text":"impl Send for StorageClassAnalysisDataExportSerializer","synthetic":true,"types":[]},{"text":"impl Send for StorageClassAnalysisSchemaVersionSerializer","synthetic":true,"types":[]},{"text":"impl Send for SuffixSerializer","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for TagSerializer","synthetic":true,"types":[]},{"text":"impl Send for TagSetSerializer","synthetic":true,"types":[]},{"text":"impl Send for Tagging","synthetic":true,"types":[]},{"text":"impl Send for TaggingSerializer","synthetic":true,"types":[]},{"text":"impl Send for TargetBucketSerializer","synthetic":true,"types":[]},{"text":"impl Send for TargetGrant","synthetic":true,"types":[]},{"text":"impl Send for TargetGrantSerializer","synthetic":true,"types":[]},{"text":"impl Send for TargetGrantsSerializer","synthetic":true,"types":[]},{"text":"impl Send for TargetPrefixSerializer","synthetic":true,"types":[]},{"text":"impl Send for TierSerializer","synthetic":true,"types":[]},{"text":"impl Send for TokenSerializer","synthetic":true,"types":[]},{"text":"impl Send for TopicArnSerializer","synthetic":true,"types":[]},{"text":"impl Send for TopicConfiguration","synthetic":true,"types":[]},{"text":"impl Send for TopicConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for TopicConfigurationDeprecated","synthetic":true,"types":[]},{"text":"impl Send for TopicConfigurationDeprecatedSerializer","synthetic":true,"types":[]},{"text":"impl Send for TopicConfigurationListSerializer","synthetic":true,"types":[]},{"text":"impl Send for Transition","synthetic":true,"types":[]},{"text":"impl Send for TransitionSerializer","synthetic":true,"types":[]},{"text":"impl Send for TransitionListSerializer","synthetic":true,"types":[]},{"text":"impl Send for TransitionStorageClassSerializer","synthetic":true,"types":[]},{"text":"impl Send for TypeSerializer","synthetic":true,"types":[]},{"text":"impl Send for URISerializer","synthetic":true,"types":[]},{"text":"impl Send for UploadIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Send for UploadPartCopyOutput","synthetic":true,"types":[]},{"text":"impl Send for UploadPartCopyRequest","synthetic":true,"types":[]},{"text":"impl Send for UploadPartOutput","synthetic":true,"types":[]},{"text":"impl Send for UploadPartRequest","synthetic":true,"types":[]},{"text":"impl Send for UserMetadataSerializer","synthetic":true,"types":[]},{"text":"impl Send for ValueSerializer","synthetic":true,"types":[]},{"text":"impl Send for VersionIdMarkerSerializer","synthetic":true,"types":[]},{"text":"impl Send for VersioningConfiguration","synthetic":true,"types":[]},{"text":"impl Send for VersioningConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for WebsiteConfiguration","synthetic":true,"types":[]},{"text":"impl Send for WebsiteConfigurationSerializer","synthetic":true,"types":[]},{"text":"impl Send for YearsSerializer","synthetic":true,"types":[]},{"text":"impl Send for AbortMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Send for CompleteMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Send for CopyObjectError","synthetic":true,"types":[]},{"text":"impl Send for CreateBucketError","synthetic":true,"types":[]},{"text":"impl Send for CreateMultipartUploadError","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketError","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketCorsError","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Send for DeleteBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Send for DeleteObjectError","synthetic":true,"types":[]},{"text":"impl Send for DeleteObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Send for DeleteObjectsError","synthetic":true,"types":[]},{"text":"impl Send for DeletePublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketAclError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketCorsError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLocationError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketLoggingError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketNotificationError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketPolicyStatusError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketVersioningError","synthetic":true,"types":[]},{"text":"impl Send for GetBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Send for GetObjectError","synthetic":true,"types":[]},{"text":"impl Send for GetObjectAclError","synthetic":true,"types":[]},{"text":"impl Send for GetObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl Send for GetObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for GetObjectRetentionError","synthetic":true,"types":[]},{"text":"impl Send for GetObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Send for GetObjectTorrentError","synthetic":true,"types":[]},{"text":"impl Send for GetPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Send for HeadBucketError","synthetic":true,"types":[]},{"text":"impl Send for HeadObjectError","synthetic":true,"types":[]},{"text":"impl Send for ListBucketAnalyticsConfigurationsError","synthetic":true,"types":[]},{"text":"impl Send for ListBucketInventoryConfigurationsError","synthetic":true,"types":[]},{"text":"impl Send for ListBucketMetricsConfigurationsError","synthetic":true,"types":[]},{"text":"impl Send for ListBucketsError","synthetic":true,"types":[]},{"text":"impl Send for ListMultipartUploadsError","synthetic":true,"types":[]},{"text":"impl Send for ListObjectVersionsError","synthetic":true,"types":[]},{"text":"impl Send for ListObjectsError","synthetic":true,"types":[]},{"text":"impl Send for ListObjectsV2Error","synthetic":true,"types":[]},{"text":"impl Send for ListPartsError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketAccelerateConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketAclError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketAnalyticsConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketCorsError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketEncryptionError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketInventoryConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketLifecycleError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketLifecycleConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketLoggingError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketMetricsConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketNotificationError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketNotificationConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketPolicyError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketReplicationError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketRequestPaymentError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketTaggingError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketVersioningError","synthetic":true,"types":[]},{"text":"impl Send for PutBucketWebsiteError","synthetic":true,"types":[]},{"text":"impl Send for PutObjectError","synthetic":true,"types":[]},{"text":"impl Send for PutObjectAclError","synthetic":true,"types":[]},{"text":"impl Send for PutObjectLegalHoldError","synthetic":true,"types":[]},{"text":"impl Send for PutObjectLockConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for PutObjectRetentionError","synthetic":true,"types":[]},{"text":"impl Send for PutObjectTaggingError","synthetic":true,"types":[]},{"text":"impl Send for PutPublicAccessBlockError","synthetic":true,"types":[]},{"text":"impl Send for RestoreObjectError","synthetic":true,"types":[]},{"text":"impl Send for SelectObjectContentError","synthetic":true,"types":[]},{"text":"impl Send for UploadPartError","synthetic":true,"types":[]},{"text":"impl Send for UploadPartCopyError","synthetic":true,"types":[]},{"text":"impl Send for S3Client","synthetic":true,"types":[]}];
implementors["rusoto_signature"] = [{"text":"impl Send for Region","synthetic":true,"types":[]},{"text":"impl Send for ParseRegionError","synthetic":true,"types":[]},{"text":"impl Send for SignedRequestPayload","synthetic":true,"types":[]},{"text":"impl Send for SignedRequest","synthetic":true,"types":[]},{"text":"impl Send for ByteStream","synthetic":true,"types":[]}];
implementors["rusoto_sts"] = [{"text":"impl Send for StsSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Send for StsAssumeRoleSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Send for StsWebIdentityFederationSessionCredentialsProvider","synthetic":true,"types":[]},{"text":"impl Send for WebIdentityProvider","synthetic":true,"types":[]},{"text":"impl Send for AssumeRoleRequest","synthetic":true,"types":[]},{"text":"impl Send for AssumeRoleResponse","synthetic":true,"types":[]},{"text":"impl Send for AssumeRoleWithSAMLRequest","synthetic":true,"types":[]},{"text":"impl Send for AssumeRoleWithSAMLResponse","synthetic":true,"types":[]},{"text":"impl Send for AssumeRoleWithWebIdentityRequest","synthetic":true,"types":[]},{"text":"impl Send for AssumeRoleWithWebIdentityResponse","synthetic":true,"types":[]},{"text":"impl Send for AssumedRoleUser","synthetic":true,"types":[]},{"text":"impl Send for Credentials","synthetic":true,"types":[]},{"text":"impl Send for DecodeAuthorizationMessageRequest","synthetic":true,"types":[]},{"text":"impl Send for DecodeAuthorizationMessageResponse","synthetic":true,"types":[]},{"text":"impl Send for FederatedUser","synthetic":true,"types":[]},{"text":"impl Send for GetAccessKeyInfoRequest","synthetic":true,"types":[]},{"text":"impl Send for GetAccessKeyInfoResponse","synthetic":true,"types":[]},{"text":"impl Send for GetCallerIdentityRequest","synthetic":true,"types":[]},{"text":"impl Send for GetCallerIdentityResponse","synthetic":true,"types":[]},{"text":"impl Send for GetFederationTokenRequest","synthetic":true,"types":[]},{"text":"impl Send for GetFederationTokenResponse","synthetic":true,"types":[]},{"text":"impl Send for GetSessionTokenRequest","synthetic":true,"types":[]},{"text":"impl Send for GetSessionTokenResponse","synthetic":true,"types":[]},{"text":"impl Send for PolicyDescriptorType","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for AssumeRoleError","synthetic":true,"types":[]},{"text":"impl Send for AssumeRoleWithSAMLError","synthetic":true,"types":[]},{"text":"impl Send for AssumeRoleWithWebIdentityError","synthetic":true,"types":[]},{"text":"impl Send for DecodeAuthorizationMessageError","synthetic":true,"types":[]},{"text":"impl Send for GetAccessKeyInfoError","synthetic":true,"types":[]},{"text":"impl Send for GetCallerIdentityError","synthetic":true,"types":[]},{"text":"impl Send for GetFederationTokenError","synthetic":true,"types":[]},{"text":"impl Send for GetSessionTokenError","synthetic":true,"types":[]},{"text":"impl Send for StsClient","synthetic":true,"types":[]}];
implementors["rusoto_util"] = [{"text":"impl Send for CredentialsProvider","synthetic":true,"types":[]},{"text":"impl Send for DefaultCredentialsProvider","synthetic":true,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl&lt;'a&gt; Send for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for TryDemangleError","synthetic":true,"types":[]}];
implementors["rustyline"] = [{"text":"impl Send for Pair","synthetic":true,"types":[]},{"text":"impl Send for FilenameCompleter","synthetic":true,"types":[]},{"text":"impl Send for Quote","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for BellStyle","synthetic":true,"types":[]},{"text":"impl Send for HistoryDuplicates","synthetic":true,"types":[]},{"text":"impl Send for CompletionType","synthetic":true,"types":[]},{"text":"impl Send for EditMode","synthetic":true,"types":[]},{"text":"impl Send for ColorMode","synthetic":true,"types":[]},{"text":"impl Send for OutputStreamType","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for ReadlineError","synthetic":true,"types":[]},{"text":"impl Send for MatchingBracketHighlighter","synthetic":true,"types":[]},{"text":"impl Send for HistoryHinter","synthetic":true,"types":[]},{"text":"impl Send for Direction","synthetic":true,"types":[]},{"text":"impl Send for History","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Cmd","synthetic":true,"types":[]},{"text":"impl Send for Word","synthetic":true,"types":[]},{"text":"impl Send for At","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for CharSearch","synthetic":true,"types":[]},{"text":"impl Send for Movement","synthetic":true,"types":[]},{"text":"impl Send for KeyPress","synthetic":true,"types":[]},{"text":"impl Send for WordAction","synthetic":true,"types":[]},{"text":"impl !Send for LineBuffer","synthetic":true,"types":[]},{"text":"impl Send for ValidationResult","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; !Send for ValidationContext&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for MatchingBracketValidator","synthetic":true,"types":[]},{"text":"impl&lt;'h&gt; Send for Context&lt;'h&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for Editor&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; Send for Iter&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl Send for Handle","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Send for Always","synthetic":true,"types":[]},{"text":"impl&lt;T, F, S&gt; Send for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["security"] = [{"text":"impl Send for SecurityConfig","synthetic":true,"types":[]},{"text":"impl Send for SecurityManager","synthetic":true,"types":[]},{"text":"impl Send for CNChecker","synthetic":true,"types":[]},{"text":"impl Send for Fetcher","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for SemVerError","synthetic":true,"types":[]},{"text":"impl Send for VersionReq","synthetic":true,"types":[]},{"text":"impl Send for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl Send for VersionReq","synthetic":true,"types":[]},{"text":"impl Send for WildcardVersion","synthetic":true,"types":[]},{"text":"impl Send for Op","synthetic":true,"types":[]},{"text":"impl Send for Predicate","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Send for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Send for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_ignored"] = [{"text":"impl&lt;'a, 'b, D, F&gt; Send for Deserializer&lt;'a, 'b, D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Path&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; Send for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Send for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Send for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CharEscape","synthetic":true,"types":[]},{"text":"impl Send for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Serializer","synthetic":true,"types":[]},{"text":"impl Send for Number","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl&lt;'de&gt; Send for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for Serializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for SeqSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for TupleSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Send for TupleStructSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Send for TupleVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for MapSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for StructSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Send for StructVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]}];
implementors["serde_with"] = [{"text":"impl&lt;Sep&gt; Send for StringWithSeparator&lt;Sep&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Sep: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SpaceSeparator","synthetic":true,"types":[]},{"text":"impl Send for CommaSeparator","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Send for Sha256","synthetic":true,"types":[]},{"text":"impl Send for Sha224","synthetic":true,"types":[]},{"text":"impl Send for Sha512","synthetic":true,"types":[]},{"text":"impl Send for Sha384","synthetic":true,"types":[]},{"text":"impl Send for Sha512Trunc256","synthetic":true,"types":[]},{"text":"impl Send for Sha512Trunc224","synthetic":true,"types":[]}];
implementors["shlex"] = [{"text":"impl&lt;'a&gt; Send for Shlex&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal"] = [{"text":"impl Send for Trap","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Send for SigId","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Send for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog"] = [{"text":"impl&lt;D&gt; Send for Logger&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Send for Discard","synthetic":true,"types":[]},{"text":"impl&lt;D, F&gt; Send for Filter&lt;D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for LevelFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, E&gt; Send for MapError&lt;D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D1, D2&gt; Send for Duplicate&lt;D1, D2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for Fuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for IgnoreResult&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for MutexDrainError&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;D as Drain&gt;::Err: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for FilterLevel","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RecordStatic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V, F&gt; Send for FnValue&lt;V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for PushFnValueSerializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PushFnValue&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for SingleKV&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for OwnedKV&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for BorrowedKV&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedKVList","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["slog_async"] = [{"text":"impl !Send for AsyncError","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for AsyncCoreBuilder&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Send for AsyncGuard","synthetic":true,"types":[]},{"text":"impl Send for AsyncCore","synthetic":true,"types":[]},{"text":"impl Send for OverflowStrategy","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for AsyncBuilder&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Send for Async","synthetic":true,"types":[]}];
implementors["slog_json"] = [{"text":"impl&lt;W&gt; Send for Json&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for JsonBuilder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slog_term"] = [{"text":"impl&lt;D&gt; Send for FullFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for FullFormatBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for CompactFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for CompactFormatBuilder&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for PlainDecorator&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !Send for PlainRecordDecorator&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for PlainSyncDecorator&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for PlainSyncRecordDecorator&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TermDecoratorBuilder","synthetic":true,"types":[]},{"text":"impl Send for TermDecorator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TermRecordDecorator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for TestStdoutWriter","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl Send for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send + Array&gt; Send for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Send for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Once&lt;T&gt;","synthetic":false,"types":[]}];
implementors["sst_importer"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for IMPORT_RPC_DURATION","synthetic":true,"types":[]},{"text":"impl Send for IMPORT_UPLOAD_CHUNK_BYTES","synthetic":true,"types":[]},{"text":"impl Send for IMPORT_UPLOAD_CHUNK_DURATION","synthetic":true,"types":[]},{"text":"impl Send for IMPORT_WRITE_CHUNK_DURATION","synthetic":true,"types":[]},{"text":"impl Send for IMPORTER_DOWNLOAD_DURATION","synthetic":true,"types":[]},{"text":"impl Send for IMPORTER_DOWNLOAD_BYTES","synthetic":true,"types":[]},{"text":"impl Send for IMPORTER_INGEST_DURATION","synthetic":true,"types":[]},{"text":"impl Send for IMPORTER_INGEST_BYTES","synthetic":true,"types":[]},{"text":"impl Send for IMPORTER_ERROR_VEC","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ImportModeSwitcherInner&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ImportModeSwitcher&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Send for ImportModeDBOptions","synthetic":true,"types":[]},{"text":"impl Send for ImportModeCFOptions","synthetic":true,"types":[]},{"text":"impl Send for SSTImporter","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SSTWriter&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Send for ImportDir","synthetic":true,"types":[]},{"text":"impl Send for ImportPath","synthetic":true,"types":[]},{"text":"impl Send for ImportFile","synthetic":true,"types":[]}];
implementors["str_stack"] = [{"text":"impl Send for StrStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Writer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl Send for StrSimError","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Send for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["symbolic_common"] = [{"text":"impl&lt;'a&gt; Send for ByteView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, D&gt; Send for SelfCell&lt;O, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InstructionInfo","synthetic":true,"types":[]},{"text":"impl Send for CpuFamily","synthetic":true,"types":[]},{"text":"impl Send for UnknownArchError","synthetic":true,"types":[]},{"text":"impl Send for Arch","synthetic":true,"types":[]},{"text":"impl Send for UnknownLanguageError","synthetic":true,"types":[]},{"text":"impl Send for Language","synthetic":true,"types":[]},{"text":"impl Send for NameMangling","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Name&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["symbolic_demangle"] = [{"text":"impl Send for DemangleOptions","synthetic":true,"types":[]}];
implementors["syn_mid"] = [{"text":"impl !Send for FnArg","synthetic":true,"types":[]},{"text":"impl !Send for Receiver","synthetic":true,"types":[]},{"text":"impl !Send for Pat","synthetic":true,"types":[]},{"text":"impl !Send for PatIdent","synthetic":true,"types":[]},{"text":"impl !Send for PatPath","synthetic":true,"types":[]},{"text":"impl !Send for PatReference","synthetic":true,"types":[]},{"text":"impl !Send for PatStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatTuple","synthetic":true,"types":[]},{"text":"impl !Send for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatType","synthetic":true,"types":[]},{"text":"impl !Send for PatWild","synthetic":true,"types":[]},{"text":"impl !Send for FieldPat","synthetic":true,"types":[]},{"text":"impl !Send for Block","synthetic":true,"types":[]},{"text":"impl !Send for ItemFn","synthetic":true,"types":[]},{"text":"impl !Send for Signature","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl Send for AddBounds","synthetic":true,"types":[]},{"text":"impl Send for BindStyle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Structure&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["sysinfo"] = [{"text":"impl Send for Component","synthetic":true,"types":[]},{"text":"impl Send for Disk","synthetic":true,"types":[]},{"text":"impl Send for Networks","synthetic":true,"types":[]},{"text":"impl Send for NetworkData","synthetic":true,"types":[]},{"text":"impl Send for ProcessStatus","synthetic":true,"types":[]},{"text":"impl Send for Process","synthetic":true,"types":[]},{"text":"impl Send for Processor","synthetic":true,"types":[]},{"text":"impl Send for System","synthetic":true,"types":[]},{"text":"impl Send for RefreshKind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NetworksIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DiskType","synthetic":true,"types":[]},{"text":"impl Send for Signal","synthetic":true,"types":[]},{"text":"impl Send for LoadAvg","synthetic":true,"types":[]},{"text":"impl Send for User","synthetic":true,"types":[]},{"text":"impl Send for DiskUsage","synthetic":true,"types":[]}];
implementors["take_mut"] = [{"text":"impl&lt;'s&gt; Send for Scope&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'm, T, F&gt; !Send for Hole&lt;'c, 'm, T, F&gt;","synthetic":true,"types":[]}];
implementors["tame_gcs"] = [{"text":"impl&lt;'a&gt; Send for StandardQueryParameters&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Conditionals","synthetic":true,"types":[]},{"text":"impl Send for StorageClass","synthetic":true,"types":[]},{"text":"impl Send for PredefinedAcl","synthetic":true,"types":[]},{"text":"impl Send for Projection","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DeleteObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DeleteObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DownloadObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DownloadObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GetObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GetObjectResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for InsertObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InsertResponse","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Multipart&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ListOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ListResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PatchObjectOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for PatchObjectResponse","synthetic":true,"types":[]},{"text":"impl Send for Object","synthetic":true,"types":[]},{"text":"impl Send for Metadata","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for HttpError","synthetic":true,"types":[]},{"text":"impl Send for HttpStatusError","synthetic":true,"types":[]},{"text":"impl Send for IoError","synthetic":true,"types":[]},{"text":"impl Send for JsonError","synthetic":true,"types":[]},{"text":"impl Send for ApiErrorInner","synthetic":true,"types":[]},{"text":"impl Send for ApiError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Send for UrlSigner&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SignedUrlOptional&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DigestAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for SigningAlgorithm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Key&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ServiceAccount","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BucketName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ObjectName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ObjectId&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Scopes","synthetic":true,"types":[]}];
implementors["tame_oauth"] = [{"text":"impl Send for ServiceAccountInfo","synthetic":true,"types":[]},{"text":"impl Send for RequestReason","synthetic":true,"types":[]},{"text":"impl Send for TokenOrRequest","synthetic":true,"types":[]},{"text":"impl Send for ServiceAccountAccess","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Token","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl Send for TempDir","synthetic":true,"types":[]},{"text":"impl Send for PathPersistError","synthetic":true,"types":[]},{"text":"impl Send for TempPath","synthetic":true,"types":[]},{"text":"impl Send for NamedTempFile","synthetic":true,"types":[]},{"text":"impl Send for PersistError","synthetic":true,"types":[]},{"text":"impl Send for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["term"] = [{"text":"impl Send for Param","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Variables","synthetic":true,"types":[]},{"text":"impl Send for TermInfo","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TerminfoTerminal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Attr","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["test_backup"] = [{"text":"impl !Send for TestSuite","synthetic":true,"types":[]}];
implementors["test_coprocessor"] = [{"text":"impl Send for Column","synthetic":true,"types":[]},{"text":"impl Send for ColumnBuilder","synthetic":true,"types":[]},{"text":"impl Send for DAGSelect","synthetic":true,"types":[]},{"text":"impl Send for DAGChunkSpliter","synthetic":true,"types":[]},{"text":"impl Send for ProductTable","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for Insert&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for Delete&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Store&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Send for Table","synthetic":true,"types":[]},{"text":"impl Send for TableBuilder","synthetic":true,"types":[]}];
implementors["test_pd"] = [{"text":"impl Send for AlreadyBootstrapped","synthetic":true,"types":[]},{"text":"impl Send for Incompatible","synthetic":true,"types":[]},{"text":"impl Send for Roulette","synthetic":true,"types":[]},{"text":"impl Send for Inner","synthetic":true,"types":[]},{"text":"impl Send for LeaderChange","synthetic":true,"types":[]},{"text":"impl Send for Retry","synthetic":true,"types":[]},{"text":"impl Send for NotRetry","synthetic":true,"types":[]},{"text":"impl Send for Service","synthetic":true,"types":[]},{"text":"impl Send for Inner","synthetic":true,"types":[]},{"text":"impl Send for Split","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Server&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for PdMock&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["test_raftstore"] = [{"text":"impl&lt;T&gt; Send for Cluster&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ChannelTransportCore","synthetic":true,"types":[]},{"text":"impl Send for ChannelTransport","synthetic":true,"types":[]},{"text":"impl !Send for NodeCluster","synthetic":true,"types":[]},{"text":"impl Send for Store","synthetic":true,"types":[]},{"text":"impl Send for SchedulePolicy","synthetic":true,"types":[]},{"text":"impl Send for Operator","synthetic":true,"types":[]},{"text":"impl Send for Cluster","synthetic":true,"types":[]},{"text":"impl Send for TestPdClient","synthetic":true,"types":[]},{"text":"impl Send for MockRaftStoreRouter","synthetic":true,"types":[]},{"text":"impl Send for AddressMap","synthetic":true,"types":[]},{"text":"impl !Send for ServerMeta","synthetic":true,"types":[]},{"text":"impl !Send for ServerCluster","synthetic":true,"types":[]},{"text":"impl Send for MessageTypeNotifier","synthetic":true,"types":[]},{"text":"impl Send for DropPacketFilter","synthetic":true,"types":[]},{"text":"impl Send for DelayFilter","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for SimulateTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for DefaultFilterFactory&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for CloneFilterFactory&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Send for PartitionFilter","synthetic":true,"types":[]},{"text":"impl Send for PartitionFilterFactory","synthetic":true,"types":[]},{"text":"impl Send for IsolationFilterFactory","synthetic":true,"types":[]},{"text":"impl Send for Direction","synthetic":true,"types":[]},{"text":"impl Send for RegionPacketFilter","synthetic":true,"types":[]},{"text":"impl Send for SnapshotFilter","synthetic":true,"types":[]},{"text":"impl Send for CollectSnapshotFilter","synthetic":true,"types":[]},{"text":"impl Send for DropSnapshotFilter","synthetic":true,"types":[]},{"text":"impl Send for RecvSnapshotFilter","synthetic":true,"types":[]},{"text":"impl Send for LeadingFilter","synthetic":true,"types":[]},{"text":"impl Send for LeadingDuplicatedSnapshotFilter","synthetic":true,"types":[]},{"text":"impl Send for RandomLatencyFilter","synthetic":true,"types":[]},{"text":"impl Send for LeaseReadFilter","synthetic":true,"types":[]},{"text":"impl Send for DropMessageFilter","synthetic":true,"types":[]},{"text":"impl Send for TEST_CONFIG","synthetic":true,"types":[]}];
implementors["test_sst_importer"] = [{"text":"impl Send for TestPropertiesCollectorFactory","synthetic":true,"types":[]},{"text":"impl Send for TestPropertiesCollector","synthetic":true,"types":[]}];
implementors["test_storage"] = [{"text":"impl&lt;E&gt; Send for AssertionStorage&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SyncTestStorageBuilder&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SyncTestStorage&lt;E&gt;","synthetic":true,"types":[]}];
implementors["test_util"] = [{"text":"impl Send for KvGenerator","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaseTraceLogger","synthetic":true,"types":[]},{"text":"impl Send for Never","synthetic":true,"types":[]},{"text":"impl Send for Nope","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for CaseLifeWatcher&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FailpointHook","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl Send for NoHyphenation","synthetic":true,"types":[]},{"text":"impl Send for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; Send for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; Send for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tidb_query_aggr"] = [{"text":"impl Send for AggrFnDefinitionParserAvg","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AggrFnAvg&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AggrFnStateAvg&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for AggrFnAvgForEnum","synthetic":true,"types":[]},{"text":"impl Send for AggrFnStateAvgForEnum","synthetic":true,"types":[]},{"text":"impl Send for AggrFnAvgForSet","synthetic":true,"types":[]},{"text":"impl Send for AggrFnStateAvgForSet","synthetic":true,"types":[]},{"text":"impl Send for BitAnd","synthetic":true,"types":[]},{"text":"impl Send for BitOr","synthetic":true,"types":[]},{"text":"impl Send for BitXor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AggrFnDefinitionParserBitOp&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AggrFnBitOp&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AggrFnStateBitOp&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for AggrFnDefinitionParserCount","synthetic":true,"types":[]},{"text":"impl Send for AggrFnCount","synthetic":true,"types":[]},{"text":"impl Send for AggrFnStateCount","synthetic":true,"types":[]},{"text":"impl Send for AggrFnDefinitionParserFirst","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AggrFnFirst&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AggrFnStateFirst&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Max","synthetic":true,"types":[]},{"text":"impl Send for Min","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for AggrFnDefinitionParserExtremum&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Send for AggFnExtremumForBytes&lt;C, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, E&gt; Send for AggFnStateExtremum4Bytes&lt;C, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for AggFnExtremumForEnum&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for AggFnStateExtremumForEnum&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for AggFnExtremumForSet&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for AggFnStateExtremumForSet&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for AggFnExtremum&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for AggFnStateExtremum&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl Send for AggrFnDefinitionParserSum","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AggrFnSum&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AggrFnStateSum&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for AggrFnSumForEnum","synthetic":true,"types":[]},{"text":"impl Send for AggrFnStateSumForEnum","synthetic":true,"types":[]},{"text":"impl Send for AggrFnSumForSet","synthetic":true,"types":[]},{"text":"impl Send for AggrFnStateSumForSet","synthetic":true,"types":[]},{"text":"impl Send for AllAggrDefinitionParser","synthetic":true,"types":[]}];
implementors["tidb_query_codegen"] = [{"text":"impl !Send for state","synthetic":true,"types":[]},{"text":"impl !Send for AggrFunctionStateExpr","synthetic":true,"types":[]},{"text":"impl !Send for AggrFunctionOpts","synthetic":true,"types":[]},{"text":"impl !Send for Option","synthetic":true,"types":[]},{"text":"impl !Send for RpnFnAttr","synthetic":true,"types":[]},{"text":"impl !Send for RpnFnRefEvaluableTypeWithOption","synthetic":true,"types":[]},{"text":"impl !Send for RpnFnEvaluableType","synthetic":true,"types":[]},{"text":"impl !Send for RpnFnRefEvaluableType","synthetic":true,"types":[]},{"text":"impl !Send for RpnFnSignatureParam","synthetic":true,"types":[]},{"text":"impl !Send for VargsRpnFnSignatureParam","synthetic":true,"types":[]},{"text":"impl !Send for RpnFnSignatureReturnGuardType","synthetic":true,"types":[]},{"text":"impl !Send for RpnFnSignatureReturnType","synthetic":true,"types":[]},{"text":"impl !Send for ValidatorFnGenerator","synthetic":true,"types":[]},{"text":"impl !Send for VargsRpnFn","synthetic":true,"types":[]},{"text":"impl !Send for RawVargsRpnFn","synthetic":true,"types":[]},{"text":"impl !Send for NormalRpnFn","synthetic":true,"types":[]}];
implementors["tidb_query_common"] = [{"text":"impl Send for EvaluateError","synthetic":true,"types":[]},{"text":"impl Send for StorageError","synthetic":true,"types":[]},{"text":"impl Send for ErrorInner","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ExecSummary","synthetic":true,"types":[]},{"text":"impl Send for ExecSummaryCollectorEnabled","synthetic":true,"types":[]},{"text":"impl Send for ExecSummaryCollectorDisabled","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; Send for WithSummaryCollector&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ExecuteStats","synthetic":true,"types":[]},{"text":"impl Send for LocalCoprExecutorCountInner","synthetic":true,"types":[]},{"text":"impl Send for LocalCoprExecutorCountDelegator","synthetic":true,"types":[]},{"text":"impl Send for LocalCoprExecutorCount","synthetic":true,"types":[]},{"text":"impl Send for ExecutorName","synthetic":true,"types":[]},{"text":"impl Send for COPR_EXECUTOR_COUNT","synthetic":true,"types":[]},{"text":"impl Send for EXECUTOR_COUNT_METRICS","synthetic":true,"types":[]},{"text":"impl Send for Range","synthetic":true,"types":[]},{"text":"impl Send for IntervalRange","synthetic":true,"types":[]},{"text":"impl Send for PointRange","synthetic":true,"types":[]},{"text":"impl Send for IterStatus","synthetic":true,"types":[]},{"text":"impl Send for RangesIterator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RangesScanner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RangesScannerOptions&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FixtureStorage","synthetic":true,"types":[]}];
implementors["tidb_query_datatype"] = [{"text":"impl Send for FieldTypeBuilder","synthetic":true,"types":[]},{"text":"impl Send for EvalType","synthetic":true,"types":[]},{"text":"impl Send for FieldTypeTp","synthetic":true,"types":[]},{"text":"impl Send for Collation","synthetic":true,"types":[]},{"text":"impl Send for FieldTypeFlag","synthetic":true,"types":[]},{"text":"impl Send for DataTypeError","synthetic":true,"types":[]},{"text":"impl Send for LazyBatchColumn","synthetic":true,"types":[]},{"text":"impl Send for LazyBatchColumnVec","synthetic":true,"types":[]},{"text":"impl Send for Chunk","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Row&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RowIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Column","synthetic":true,"types":[]},{"text":"impl Send for CharsetBinary","synthetic":true,"types":[]},{"text":"impl Send for CharsetUtf8mb4","synthetic":true,"types":[]},{"text":"impl Send for CollatorBinary","synthetic":true,"types":[]},{"text":"impl Send for CollatorLatin1Bin","synthetic":true,"types":[]},{"text":"impl Send for CollatorUtf8Mb4Bin","synthetic":true,"types":[]},{"text":"impl Send for CollatorUtf8Mb4BinNoPadding","synthetic":true,"types":[]},{"text":"impl Send for CollatorUtf8Mb4GeneralCi","synthetic":true,"types":[]},{"text":"impl Send for CollatorUtf8Mb4UnicodeCi","synthetic":true,"types":[]},{"text":"impl&lt;T, C&gt; Send for SortKey&lt;T, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BitVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BitAndIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ChunkedVecBytes","synthetic":true,"types":[]},{"text":"impl Send for BytesWriter","synthetic":true,"types":[]},{"text":"impl Send for PartialBytesWriter","synthetic":true,"types":[]},{"text":"impl Send for BytesGuard","synthetic":true,"types":[]},{"text":"impl Send for ChunkedVecEnum","synthetic":true,"types":[]},{"text":"impl Send for ChunkedVecJson","synthetic":true,"types":[]},{"text":"impl Send for ChunkedVecSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ChunkedVecSized&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LogicalRows&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LogicalRowsIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ScalarValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ScalarValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for VectorValue","synthetic":true,"types":[]},{"text":"impl Send for Datum","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for BinaryLiteral","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Res&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Decimal","synthetic":true,"types":[]},{"text":"impl Send for RoundMode","synthetic":true,"types":[]},{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for Enum","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EnumRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for BinaryModifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for PathLeg","synthetic":true,"types":[]},{"text":"impl Send for PathExpression","synthetic":true,"types":[]},{"text":"impl Send for JsonVisitor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MergeUnit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ModifyType","synthetic":true,"types":[]},{"text":"impl Send for JsonType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for JsonRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Json","synthetic":true,"types":[]},{"text":"impl Send for Set","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Tz","synthetic":true,"types":[]},{"text":"impl Send for TzOffset","synthetic":true,"types":[]},{"text":"impl Send for WeekMode","synthetic":true,"types":[]},{"text":"impl Send for Time","synthetic":true,"types":[]},{"text":"impl Send for TimeType","synthetic":true,"types":[]},{"text":"impl Send for TimeArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RowSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for LEBytes&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Column","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for RowColMeta","synthetic":true,"types":[]},{"text":"impl Send for RowColsDict","synthetic":true,"types":[]},{"text":"impl Send for SqlMode","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl Send for EvalConfig","synthetic":true,"types":[]},{"text":"impl Send for EvalWarnings","synthetic":true,"types":[]},{"text":"impl Send for EvalContext","synthetic":true,"types":[]}];
implementors["tidb_query_executors"] = [{"text":"impl&lt;Src&gt; Send for BatchFastHashAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl Send for Groups","synthetic":true,"types":[]},{"text":"impl Send for FastHashAggregationImpl","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for BatchIndexScanExecutor&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for DecodeHandleStrategy","synthetic":true,"types":[]},{"text":"impl Send for IndexScanExecutorImpl","synthetic":true,"types":[]},{"text":"impl Send for BatchExecuteResult","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Send for BatchLimitExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;SS&gt; Send for BatchExecutorsRunner&lt;SS&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Send for BatchSelectionExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Send for BatchSimpleAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl Send for SimpleAggregationImpl","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Send for BatchSlowHashAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl !Send for GroupKeyRefUnsafe","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Send for BatchStreamAggregationExecutor&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl Send for BatchStreamAggregationImpl","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for BatchTableScanExecutor&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for TableScanExecutorImpl","synthetic":true,"types":[]},{"text":"impl Send for HeapItemSourceData","synthetic":true,"types":[]},{"text":"impl !Send for HeapItemUnsafe","synthetic":true,"types":[]},{"text":"impl&lt;Src&gt; Send for Entities&lt;Src&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Src, I&gt; Send for AggregationExecutor&lt;Src, I&gt;","synthetic":true,"types":[]},{"text":"impl Send for HashAggregationHelper","synthetic":true,"types":[]},{"text":"impl&lt;S, I&gt; Send for ScanExecutor&lt;S, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, I&gt; Send for ScanExecutorOptions&lt;S, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SlowHashAggregationImpl","synthetic":false,"types":[]},{"text":"impl&lt;Src:&nbsp;BatchExecutor&gt; Send for BatchTopNExecutor&lt;Src&gt;","synthetic":false,"types":[]}];
implementors["tidb_query_expr"] = [{"text":"impl Send for RpnExpressionNode","synthetic":true,"types":[]},{"text":"impl Send for RpnExpression","synthetic":true,"types":[]},{"text":"impl Send for RpnExpressionBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RpnStackNodeVectorValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RpnStackNode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RpnFnMeta","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RpnFnCallExtra&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ScalarArg&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, C&gt; Send for VectorArg&lt;'a, T, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, Rem&gt; Send for Arg&lt;A, Rem&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Null","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, E&gt; Send for ArgConstructor&lt;'a, A, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Arithmetic_Evaluator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArithmeticWithCtx_Evaluator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IntIntPlus","synthetic":true,"types":[]},{"text":"impl Send for IntUintPlus","synthetic":true,"types":[]},{"text":"impl Send for UintIntPlus","synthetic":true,"types":[]},{"text":"impl Send for UintUintPlus","synthetic":true,"types":[]},{"text":"impl Send for RealPlus","synthetic":true,"types":[]},{"text":"impl Send for DecimalPlus","synthetic":true,"types":[]},{"text":"impl Send for IntIntMinus","synthetic":true,"types":[]},{"text":"impl Send for IntUintMinus","synthetic":true,"types":[]},{"text":"impl Send for UintIntMinus","synthetic":true,"types":[]},{"text":"impl Send for UintUintMinus","synthetic":true,"types":[]},{"text":"impl Send for RealMinus","synthetic":true,"types":[]},{"text":"impl Send for DecimalMinus","synthetic":true,"types":[]},{"text":"impl Send for IntIntMod","synthetic":true,"types":[]},{"text":"impl Send for IntUintMod","synthetic":true,"types":[]},{"text":"impl Send for UintIntMod","synthetic":true,"types":[]},{"text":"impl Send for UintUintMod","synthetic":true,"types":[]},{"text":"impl Send for RealMod","synthetic":true,"types":[]},{"text":"impl Send for DecimalMod","synthetic":true,"types":[]},{"text":"impl Send for DecimalMultiply","synthetic":true,"types":[]},{"text":"impl Send for RealMultiply","synthetic":true,"types":[]},{"text":"impl Send for IntIntMultiply","synthetic":true,"types":[]},{"text":"impl Send for IntUintMultiply","synthetic":true,"types":[]},{"text":"impl Send for UintIntMultiply","synthetic":true,"types":[]},{"text":"impl Send for UintUintMultiply","synthetic":true,"types":[]},{"text":"impl Send for IntDivideInt","synthetic":true,"types":[]},{"text":"impl Send for IntDivideUint","synthetic":true,"types":[]},{"text":"impl Send for UintDivideUint","synthetic":true,"types":[]},{"text":"impl Send for UintDivideInt","synthetic":true,"types":[]},{"text":"impl Send for IntDivideDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for DecimalDivide","synthetic":true,"types":[]},{"text":"impl Send for RealDivide","synthetic":true,"types":[]},{"text":"impl Send for CastSignedIntAsUnsignedInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastIntAsIntOthers_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastRealAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastStringAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastBinaryStringAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastEnumAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastSetAsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastDecimalAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastJsonAsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastSignedIntAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastSignedIntAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastUnsignedIntAsSignedOrUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastRealAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastRealAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastStringAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastBinaryStringAsSignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastStringAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastBinaryStringAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastDecimalAsUnsignedReal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CastAnyAsString_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for CastYearAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastUintAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastFloatRealAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastStringAsString_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastUnsignedIntAsSignedOrUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastSignedIntAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastRealAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastStringAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastDecimalAsSignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastDecimalAsUnsignedDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; Send for CastAnyAsDecimal_Evaluator&lt;From&gt;","synthetic":true,"types":[]},{"text":"impl Send for CastJsonAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastBytesAsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastIntAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastTimeAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastDurationAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastRealAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastBytesAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastDecimalAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastJsonAsDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastIntAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastYearAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastRealAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastStringAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastDecimalAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastTimeAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastDurationAsTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastBoolAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastUintAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastStringAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CastJsonAsJson_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;From, To&gt; Send for CastAnyAsAny_Evaluator&lt;From, To&gt;","synthetic":true,"types":[]},{"text":"impl&lt;To&gt; Send for CastJsonAsAny_Evaluator&lt;To&gt;","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; Send for CastAnyAsJson_Evaluator&lt;From&gt;","synthetic":true,"types":[]},{"text":"impl&lt;From&gt; Send for CastAnyAsBytes_Evaluator&lt;From&gt;","synthetic":true,"types":[]},{"text":"impl Send for CastJsonAsBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Compare_Evaluator&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for CompareJson_Evaluator&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, F&gt; Send for CompareBytes_Evaluator&lt;C, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for BasicComparer&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for UintUintComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for UintIntComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for IntUintComparer&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CmpOpLT","synthetic":true,"types":[]},{"text":"impl Send for CmpOpLE","synthetic":true,"types":[]},{"text":"impl Send for CmpOpGT","synthetic":true,"types":[]},{"text":"impl Send for CmpOpGE","synthetic":true,"types":[]},{"text":"impl Send for CmpOpNE","synthetic":true,"types":[]},{"text":"impl Send for CmpOpEQ","synthetic":true,"types":[]},{"text":"impl Send for CmpOpNullEQ","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for NormalInByHash&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for CollationAwareBytesInByHash&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CompareInMeta&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IfNull_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for IfNullJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for IfNullBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IfCondition_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for IfConditionJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for IfConditionBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Md5_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Sha1_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Sha2_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Compress_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Uncompress_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Password_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for UncompressedLength_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for RandomBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for JsonDepth_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for JsonType_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for JsonUnquote_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Like_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegexpUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Regexp_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Pi_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Crc32_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Log1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Log2Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Log2_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Log10_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Ceil_Evaluator&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CeilReal","synthetic":true,"types":[]},{"text":"impl Send for CeilDecToDec","synthetic":true,"types":[]},{"text":"impl Send for CeilIntToDec","synthetic":true,"types":[]},{"text":"impl Send for CeilDecToInt","synthetic":true,"types":[]},{"text":"impl Send for CeilIntToInt","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Floor_Evaluator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FloorReal","synthetic":true,"types":[]},{"text":"impl Send for FloorIntToDec","synthetic":true,"types":[]},{"text":"impl Send for FloorDecToInt","synthetic":true,"types":[]},{"text":"impl Send for FloorDecToDec","synthetic":true,"types":[]},{"text":"impl Send for FloorIntToInt","synthetic":true,"types":[]},{"text":"impl Send for AbsInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for AbsUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for AbsReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for AbsDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Sign_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Sqrt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Radians_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Exp_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Sin_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Cos_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Tan_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Cot_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Pow_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Rand_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for RandWithSeedFirstGen_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Degrees_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Asin_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Acos_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Atan1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Atan2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Conv_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for RoundReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for RoundInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for RoundDec_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for TruncateIntWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for TruncateIntWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for TruncateUintWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for TruncateUintWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for TruncateRealWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for TruncateRealWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for TruncateDecimalWithInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for TruncateDecimalWithUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for RoundWithFracInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for RoundWithFracDec_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for RoundWithFracReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for IntWithSign","synthetic":true,"types":[]},{"text":"impl Send for MySQLRng","synthetic":true,"types":[]},{"text":"impl Send for InetAton_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for InetNtoa_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Inet6Aton_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Inet6Ntoa_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for IsIpv4_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for IsIpv4Compat_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for IsIpv4Mapped_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for IsIpv6_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Uuid_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for LogicalAnd_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for LogicalOr_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for LogicalXor_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for UnaryNotInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for UnaryNotReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for UnaryNotDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for UnaryMinusUint_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for UnaryMinusInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for UnaryMinusReal_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for UnaryMinusDecimal_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IsNull_Evaluator&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for IsNullBytes_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for IsNullJson_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for BitAnd_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for BitOr_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for BitXor_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for BitNeg_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for KeepNullOn","synthetic":true,"types":[]},{"text":"impl Send for KeepNullOff","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for IntIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for RealIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for DecimalIsTrue_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for IntIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for RealIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for DecimalIsFalse_Evaluator&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LeftShift_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for RightShift_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for BitCount_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Bin_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for OctInt_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for OctString_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Length_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Unhex_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Locate2ArgsUtf8_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Locate3ArgsUtf8_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Send for BitLength_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Ord_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Send for Ascii_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for ReverseUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for HexIntArg_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Ltrim_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Rtrim_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Lpad_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for LpadUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Rpad_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Replace_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Left_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for LeftUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Right_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Insert_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for RightUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for UpperUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Upper_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for LowerUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Lower_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for HexStrArg_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Locate2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Reverse_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Locate3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Space_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for SubstringIndex_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Strcmp_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Send for InstrUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for FindInSet_Evaluator&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Send for Trim1Arg_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Trim2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Trim3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for TrimDirection","synthetic":true,"types":[]},{"text":"impl Send for CharLength_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for CharLengthUtf8_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for ToBase64_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for FromBase64_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Quote_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Repeat_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Substring2Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Substring3Args_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for DateFormat_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Date_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for WeekWithMode_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for WeekWithoutMode_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for WeekDay_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for DayOfWeek_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for DayOfYear_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for WeekOfYear_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for YearWeekWithMode_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for YearWeekWithoutMode_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for ToDays_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for ToSeconds_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for AddStringAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for SubStringAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for DateDiff_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for AddDatetimeAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for AddDatetimeAndString_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for SubDurationAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for SubDatetimeAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for SubDatetimeAndString_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for FromDays_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for MakeDate_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for MakeTime_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Month_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for MonthName_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Hour_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Minute_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Second_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for TimeToSec_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for MicroSecond_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for Year_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for DayOfMonth_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for DayName_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for PeriodAdd_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for PeriodDiff_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for LastDay_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for AddDurationAndDuration_Evaluator","synthetic":true,"types":[]},{"text":"impl Send for AddDurationAndString_Evaluator","synthetic":true,"types":[]}];
implementors["tikv"] = [{"text":"impl Send for TitanCfConfig","synthetic":true,"types":[]},{"text":"impl Send for DefaultCfConfig","synthetic":true,"types":[]},{"text":"impl Send for WriteCfConfig","synthetic":true,"types":[]},{"text":"impl Send for LockCfConfig","synthetic":true,"types":[]},{"text":"impl Send for RaftCfConfig","synthetic":true,"types":[]},{"text":"impl Send for VersionCfConfig","synthetic":true,"types":[]},{"text":"impl Send for TitanDBConfig","synthetic":true,"types":[]},{"text":"impl Send for DbConfig","synthetic":true,"types":[]},{"text":"impl Send for RaftDefaultCfConfig","synthetic":true,"types":[]},{"text":"impl Send for RaftDbConfig","synthetic":true,"types":[]},{"text":"impl Send for RaftEngineConfig","synthetic":true,"types":[]},{"text":"impl Send for DBType","synthetic":true,"types":[]},{"text":"impl Send for DBConfigManger","synthetic":true,"types":[]},{"text":"impl Send for MetricConfig","synthetic":true,"types":[]},{"text":"impl Send for UnifiedReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Send for StorageReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Send for CoprReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Send for ReadPoolConfig","synthetic":true,"types":[]},{"text":"impl Send for BackupConfig","synthetic":true,"types":[]},{"text":"impl Send for CdcConfig","synthetic":true,"types":[]},{"text":"impl Send for TiKvConfig","synthetic":true,"types":[]},{"text":"impl Send for TIKVCONFIG_TYPED","synthetic":true,"types":[]},{"text":"impl Send for Module","synthetic":true,"types":[]},{"text":"impl Send for ConfigController","synthetic":true,"types":[]},{"text":"impl Send for ConfigInner","synthetic":true,"types":[]},{"text":"impl Send for CachedRequestHandler","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ChecksumContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for TiKVStorage&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for DagHandlerBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for BatchDAGHandler","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Endpoint&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, PF, F&gt; Send for ConcurrencyLimiter&lt;'a, PF, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, PF, F&gt; Send for __ConcurrencyLimiterProjection&lt;'pin, 'a, PF, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, PF, F&gt; Send for __ConcurrencyLimiterProjectionRef&lt;'pin, 'a, PF, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;PF: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LimitationState&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Send for Tracker&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, F&gt; Send for __TrackerProjection&lt;'pin, 'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, 'a, F&gt; Send for __TrackerProjectionRef&lt;'pin, 'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CoprReqHistogramInner","synthetic":true,"types":[]},{"text":"impl Send for CoprReqHistogramDelegator","synthetic":true,"types":[]},{"text":"impl Send for CoprReqHistogram","synthetic":true,"types":[]},{"text":"impl Send for ReqWaitHistogramInner","synthetic":true,"types":[]},{"text":"impl Send for ReqWaitHistogramDelegator","synthetic":true,"types":[]},{"text":"impl Send for ReqWaitHistogram2Inner","synthetic":true,"types":[]},{"text":"impl Send for ReqWaitHistogram2Delegator","synthetic":true,"types":[]},{"text":"impl Send for ReqWaitHistogram","synthetic":true,"types":[]},{"text":"impl Send for PerfCounterInner","synthetic":true,"types":[]},{"text":"impl Send for PerfCounterDelegator","synthetic":true,"types":[]},{"text":"impl Send for PerfCounter2Inner","synthetic":true,"types":[]},{"text":"impl Send for PerfCounter2Delegator","synthetic":true,"types":[]},{"text":"impl Send for PerfCounter","synthetic":true,"types":[]},{"text":"impl Send for CoprScanKeysHistogramInner","synthetic":true,"types":[]},{"text":"impl Send for CoprScanKeysHistogramDelegator","synthetic":true,"types":[]},{"text":"impl Send for CoprScanKeysHistogram2Inner","synthetic":true,"types":[]},{"text":"impl Send for CoprScanKeysHistogram2Delegator","synthetic":true,"types":[]},{"text":"impl Send for CoprScanKeysHistogram","synthetic":true,"types":[]},{"text":"impl Send for CoprScanDetailsInner","synthetic":true,"types":[]},{"text":"impl Send for CoprScanDetailsDelegator","synthetic":true,"types":[]},{"text":"impl Send for CoprScanDetails2Inner","synthetic":true,"types":[]},{"text":"impl Send for CoprScanDetails2Delegator","synthetic":true,"types":[]},{"text":"impl Send for CoprScanDetails3Inner","synthetic":true,"types":[]},{"text":"impl Send for CoprScanDetails3Delegator","synthetic":true,"types":[]},{"text":"impl Send for CoprScanDetails","synthetic":true,"types":[]},{"text":"impl Send for CoprAcquireSemaphoreTypeCounterVec","synthetic":true,"types":[]},{"text":"impl Send for ReqTag","synthetic":true,"types":[]},{"text":"impl Send for CF","synthetic":true,"types":[]},{"text":"impl Send for ScanKeysKind","synthetic":true,"types":[]},{"text":"impl Send for ScanKind","synthetic":true,"types":[]},{"text":"impl Send for WaitType","synthetic":true,"types":[]},{"text":"impl Send for PerfMetric","synthetic":true,"types":[]},{"text":"impl Send for COPR_REQ_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for COPR_REQ_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Send for COPR_REQ_HANDLE_TIME","synthetic":true,"types":[]},{"text":"impl Send for COPR_REQ_HANDLE_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl Send for COPR_REQ_WAIT_TIME","synthetic":true,"types":[]},{"text":"impl Send for COPR_REQ_WAIT_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl Send for COPR_REQ_HANDLER_BUILD_TIME","synthetic":true,"types":[]},{"text":"impl Send for COPR_REQ_HANDLER_BUILD_TIME_STATIC","synthetic":true,"types":[]},{"text":"impl Send for COPR_REQ_ERROR","synthetic":true,"types":[]},{"text":"impl Send for COPR_SCAN_KEYS","synthetic":true,"types":[]},{"text":"impl Send for COPR_SCAN_KEYS_STATIC","synthetic":true,"types":[]},{"text":"impl Send for COPR_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl Send for COPR_SCAN_DETAILS_STATIC","synthetic":true,"types":[]},{"text":"impl Send for COPR_ROCKSDB_PERF_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for COPR_ROCKSDB_PERF_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Send for COPR_DAG_REQ_COUNT","synthetic":true,"types":[]},{"text":"impl Send for COPR_RESP_SIZE","synthetic":true,"types":[]},{"text":"impl Send for COPR_ACQUIRE_SEMAPHORE_TYPE","synthetic":true,"types":[]},{"text":"impl Send for COPR_WAITING_FOR_SEMAPHORE","synthetic":true,"types":[]},{"text":"impl Send for AcquireSemaphoreType","synthetic":true,"types":[]},{"text":"impl Send for CopLocalMetrics","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for FuturePoolTicker&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for AnalyzeContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SampleBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for SampleCollector","synthetic":true,"types":[]},{"text":"impl Send for CmSketch","synthetic":true,"types":[]},{"text":"impl Send for FmSketch","synthetic":true,"types":[]},{"text":"impl Send for Bucket","synthetic":true,"types":[]},{"text":"impl Send for Histogram","synthetic":true,"types":[]},{"text":"impl Send for TrackerState","synthetic":true,"types":[]},{"text":"impl Send for Tracker","synthetic":true,"types":[]},{"text":"impl Send for ReqContext","synthetic":true,"types":[]},{"text":"impl&lt;E, Router&gt; Send for ImportSSTService&lt;E, Router&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Router: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UNIFIED_READ_POOL_RUNNING_TASKS","synthetic":true,"types":[]},{"text":"impl Send for ReadPool","synthetic":true,"types":[]},{"text":"impl Send for ReadPoolHandle","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReporterTicker&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReadPoolError","synthetic":true,"types":[]},{"text":"impl Send for GcCommandCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for GcCommandCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for GcCommandCounterVec","synthetic":true,"types":[]},{"text":"impl Send for SnapTaskCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for SnapTaskCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for SnapTaskCounterVec","synthetic":true,"types":[]},{"text":"impl Send for GcTaskCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for GcTaskCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for GcTaskCounterVec","synthetic":true,"types":[]},{"text":"impl Send for GcTaskFailCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for GcTaskFailCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for GcTaskFailCounterVec","synthetic":true,"types":[]},{"text":"impl Send for ResolveStoreCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for ResolveStoreCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for ResolveStoreCounterVec","synthetic":true,"types":[]},{"text":"impl Send for GrpcMsgFailCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for GrpcMsgFailCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for GrpcMsgFailCounterVec","synthetic":true,"types":[]},{"text":"impl Send for GcKeysCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for GcKeysCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for GcKeysCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl Send for GcKeysCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl Send for GcKeysCounterVec","synthetic":true,"types":[]},{"text":"impl Send for GrpcMsgHistogramVecInner","synthetic":true,"types":[]},{"text":"impl Send for GrpcMsgHistogramVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for GrpcMsgHistogramVec","synthetic":true,"types":[]},{"text":"impl Send for GrpcMsgHistogramGlobal","synthetic":true,"types":[]},{"text":"impl Send for RequestBatchSizeHistogramVec","synthetic":true,"types":[]},{"text":"impl Send for RequestBatchRatioHistogramVec","synthetic":true,"types":[]},{"text":"impl Send for AsyncRequestsCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for AsyncRequestsCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for AsyncRequestsCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl Send for AsyncRequestsCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl Send for AsyncRequestsCounterVec","synthetic":true,"types":[]},{"text":"impl Send for AsyncRequestsDurationVecInner","synthetic":true,"types":[]},{"text":"impl Send for AsyncRequestsDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for AsyncRequestsDurationVec","synthetic":true,"types":[]},{"text":"impl Send for GrpcTypeKind","synthetic":true,"types":[]},{"text":"impl Send for GcCommandKind","synthetic":true,"types":[]},{"text":"impl Send for SnapTask","synthetic":true,"types":[]},{"text":"impl Send for ResolveStore","synthetic":true,"types":[]},{"text":"impl Send for GcKeysCF","synthetic":true,"types":[]},{"text":"impl Send for GcKeysDetail","synthetic":true,"types":[]},{"text":"impl Send for GlobalGrpcTypeKind","synthetic":true,"types":[]},{"text":"impl Send for BatchableRequestKind","synthetic":true,"types":[]},{"text":"impl Send for GC_COMMAND_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for SNAP_TASK_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for GC_GCTASK_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for GC_GCTASK_FAIL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for RESOLVE_STORE_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for GRPC_MSG_FAIL_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for GC_KEYS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for GRPC_MSG_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for SERVER_INFO_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for GRPC_MSG_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Send for GRPC_MSG_HISTOGRAM_GLOBAL","synthetic":true,"types":[]},{"text":"impl Send for GC_COMMAND_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Send for SNAP_TASK_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Send for GC_GCTASK_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Send for GC_GCTASK_FAIL_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Send for RESOLVE_STORE_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Send for GRPC_MSG_FAIL_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for GC_KEYS_COUNTER_STATIC","synthetic":true,"types":[]},{"text":"impl Send for SEND_SNAP_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for GRPC_REQ_BATCH_COMMANDS_SIZE","synthetic":true,"types":[]},{"text":"impl Send for GRPC_RESP_BATCH_COMMANDS_SIZE","synthetic":true,"types":[]},{"text":"impl Send for GC_EMPTY_RANGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for GC_SKIPPED_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for GC_TASK_DURATION_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for GC_TOO_BUSY_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for AUTO_GC_STATUS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for AUTO_GC_SAFE_POINT_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for AUTO_GC_PROCESSED_REGIONS_GAUGE_VEC","synthetic":true,"types":[]},{"text":"impl Send for RAFT_MESSAGE_RECV_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for RAFT_MESSAGE_BATCH_SIZE","synthetic":true,"types":[]},{"text":"impl Send for REPORT_FAILURE_MSG_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for RAFT_MESSAGE_FLUSH_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for RAFT_MESSAGE_DELAY_FLUSH_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for CONFIG_ROCKSDB_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for REQUEST_BATCH_SIZE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for REQUEST_BATCH_RATIO_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for CPU_CORES_QUOTA_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for RequestStatusKind","synthetic":true,"types":[]},{"text":"impl Send for RequestTypeKind","synthetic":true,"types":[]},{"text":"impl Send for ASYNC_REQUESTS_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for ASYNC_REQUESTS_DURATIONS","synthetic":true,"types":[]},{"text":"impl Send for ASYNC_REQUESTS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for ASYNC_REQUESTS_DURATIONS_VEC","synthetic":true,"types":[]},{"text":"impl Send for Queue","synthetic":true,"types":[]},{"text":"impl Send for BatchMessageBuffer","synthetic":true,"types":[]},{"text":"impl Send for MessageBuffer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SnapshotReporter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, M, B&gt; Send for RaftCall&lt;R, M, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Send for ConnectionBuilder&lt;S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Send for StreamBackEnd&lt;S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConnectionPool","synthetic":true,"types":[]},{"text":"impl Send for CachedQueue","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Send for RaftClient&lt;S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GrpcCompressionType","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for MvccInfoIterator&lt;Iter&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RegionInfo","synthetic":true,"types":[]},{"text":"impl Send for BottommostLevelCompaction","synthetic":true,"types":[]},{"text":"impl&lt;ER&gt; Send for Debugger&lt;ER&gt;","synthetic":true,"types":[]},{"text":"impl Send for MvccChecker","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for LockObserverState","synthetic":true,"types":[]},{"text":"impl Send for LockCollectorTask","synthetic":true,"types":[]},{"text":"impl Send for LockObserver","synthetic":true,"types":[]},{"text":"impl Send for LockCollectorRunner","synthetic":true,"types":[]},{"text":"impl Send for AppliedLockCollector","synthetic":true,"types":[]},{"text":"impl Send for GcContext","synthetic":true,"types":[]},{"text":"impl Send for GC_CONTEXT","synthetic":true,"types":[]},{"text":"impl Send for GC_COMPACTION_FILTERED","synthetic":true,"types":[]},{"text":"impl Send for GC_COMPACTION_DELETED","synthetic":true,"types":[]},{"text":"impl Send for GC_COMPACTION_FAILURE","synthetic":true,"types":[]},{"text":"impl Send for GC_COMPACTION_FILTER_SKIP","synthetic":true,"types":[]},{"text":"impl Send for GC_COMPACTION_FILTER_SEEK","synthetic":true,"types":[]},{"text":"impl Send for GC_COMPACTION_FILTER_NEXT","synthetic":true,"types":[]},{"text":"impl Send for GC_COMPACTION_MVCC_DELETE_SKIP_OLDER","synthetic":true,"types":[]},{"text":"impl Send for GC_COMPACTION_MVCC_ROLLBACK","synthetic":true,"types":[]},{"text":"impl Send for WriteCompactionFilterFactory","synthetic":true,"types":[]},{"text":"impl Send for WriteCompactionFilter","synthetic":true,"types":[]},{"text":"impl Send for CompactionFilterStats","synthetic":true,"types":[]},{"text":"impl Send for GcConfig","synthetic":true,"types":[]},{"text":"impl Send for GcWorkerConfigManager","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Send for AutoGcConfig&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl Send for GcManagerError","synthetic":true,"types":[]},{"text":"impl Send for GcManagerContext","synthetic":true,"types":[]},{"text":"impl Send for GcManagerState","synthetic":true,"types":[]},{"text":"impl Send for GcManagerHandle","synthetic":true,"types":[]},{"text":"impl&lt;S, R&gt; Send for GcManager&lt;S, R&gt;","synthetic":true,"types":[]},{"text":"impl Send for GcTask","synthetic":true,"types":[]},{"text":"impl&lt;E, RR&gt; Send for GcRunner&lt;E, RR&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, RR&gt; Send for GcWorker&lt;E, RR&gt;","synthetic":true,"types":[]},{"text":"impl Send for ThreadLoadStatistics","synthetic":true,"types":[]},{"text":"impl Send for ThreadLoad","synthetic":true,"types":[]},{"text":"impl Send for Client","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for LockManagerConfigManager","synthetic":true,"types":[]},{"text":"impl Send for Locks","synthetic":true,"types":[]},{"text":"impl Send for DetectTable","synthetic":true,"types":[]},{"text":"impl Send for Role","synthetic":true,"types":[]},{"text":"impl Send for DetectType","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl Send for Scheduler","synthetic":true,"types":[]},{"text":"impl Send for RoleChangeNotifier","synthetic":true,"types":[]},{"text":"impl Send for Inner","synthetic":true,"types":[]},{"text":"impl Send for Service","synthetic":true,"types":[]},{"text":"impl Send for LocalTaskCounterInner","synthetic":true,"types":[]},{"text":"impl Send for LocalTaskCounterDelegator","synthetic":true,"types":[]},{"text":"impl Send for LocalTaskCounter","synthetic":true,"types":[]},{"text":"impl Send for LocalErrorCounterInner","synthetic":true,"types":[]},{"text":"impl Send for LocalErrorCounterDelegator","synthetic":true,"types":[]},{"text":"impl Send for LocalErrorCounter","synthetic":true,"types":[]},{"text":"impl Send for WaitTableStatusGauge","synthetic":true,"types":[]},{"text":"impl Send for TASK_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for ERROR_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for WAITER_LIFETIME_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for DETECT_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for WAIT_TABLE_STATUS_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for DETECTOR_LEADER_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for TASK_COUNTER_METRICS","synthetic":true,"types":[]},{"text":"impl Send for ERROR_COUNTER_METRICS","synthetic":true,"types":[]},{"text":"impl Send for DelayInner","synthetic":true,"types":[]},{"text":"impl !Send for Delay","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl !Send for Waiter","synthetic":true,"types":[]},{"text":"impl !Send for WaitTable","synthetic":true,"types":[]},{"text":"impl Send for Scheduler","synthetic":true,"types":[]},{"text":"impl Send for LockManager","synthetic":true,"types":[]},{"text":"impl&lt;C, ER&gt; Send for Node&lt;C, ER&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for RaftKv&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for CmdRes","synthetic":true,"types":[]},{"text":"impl Send for ReplicaReadLockChecker","synthetic":true,"types":[]},{"text":"impl Send for WriteBatchFlags","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl Send for StoreAddr","synthetic":true,"types":[]},{"text":"impl&lt;T, RR&gt; Send for Runner&lt;T, RR&gt;","synthetic":true,"types":[]},{"text":"impl Send for PdStoreAddrResolver","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; !Send for Server&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReqBatcher","synthetic":true,"types":[]},{"text":"impl&lt;ER, T&gt; Send for Service&lt;ER, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for IoLoad","synthetic":true,"types":[]},{"text":"impl Send for LogIterator","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for NUM_REGEX","synthetic":true,"types":[]},{"text":"impl Send for NicSnapshot","synthetic":true,"types":[]},{"text":"impl Send for Service","synthetic":true,"types":[]},{"text":"impl&lt;T, E, L&gt; Send for Service&lt;T, E, L&gt;","synthetic":true,"types":[]},{"text":"impl Send for BatchRespCollector","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl Send for SnapChunk","synthetic":true,"types":[]},{"text":"impl Send for SendStat","synthetic":true,"types":[]},{"text":"impl Send for RecvSnapContext","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Runner&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Send for RaftProgressState","synthetic":true,"types":[]},{"text":"impl Send for RaftProgress","synthetic":true,"types":[]},{"text":"impl Send for RaftHardState","synthetic":true,"types":[]},{"text":"impl Send for RaftStateRole","synthetic":true,"types":[]},{"text":"impl Send for RaftSoftState","synthetic":true,"types":[]},{"text":"impl Send for RaftStatus","synthetic":true,"types":[]},{"text":"impl Send for RaftPeerRole","synthetic":true,"types":[]},{"text":"impl Send for Epoch","synthetic":true,"types":[]},{"text":"impl Send for RegionPeer","synthetic":true,"types":[]},{"text":"impl Send for RegionMergeState","synthetic":true,"types":[]},{"text":"impl Send for RaftTruncatedState","synthetic":true,"types":[]},{"text":"impl Send for RaftApplyState","synthetic":true,"types":[]},{"text":"impl Send for RegionMeta","synthetic":true,"types":[]},{"text":"impl Send for PROFILER_MUTEX","synthetic":true,"types":[]},{"text":"impl Send for ProfGuard","synthetic":true,"types":[]},{"text":"impl Send for LogLevelRequest","synthetic":true,"types":[]},{"text":"impl&lt;E, R&gt; Send for StatusServer&lt;E, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for TlsIncoming&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, S&gt; Send for __TlsIncomingProjection&lt;'pin, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'pin, S&gt; Send for __TlsIncomingProjectionRef&lt;'pin, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for ServerTransport&lt;T, S&gt;","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for StorageConfigManger","synthetic":true,"types":[]},{"text":"impl Send for BlockCacheConfig","synthetic":true,"types":[]},{"text":"impl Send for ErrorInner","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorHeaderKind","synthetic":true,"types":[]},{"text":"impl Send for BTreeEngine","synthetic":true,"types":[]},{"text":"impl Send for BTreeEngineIterator","synthetic":true,"types":[]},{"text":"impl Send for BTreeEngineSnapshot","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Cursor&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for CursorBuilder&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl Send for MockEngine","synthetic":true,"types":[]},{"text":"impl Send for ExpectedWrite","synthetic":true,"types":[]},{"text":"impl Send for ExpectedWriteList","synthetic":true,"types":[]},{"text":"impl Send for MockEngineBuilder","synthetic":true,"types":[]},{"text":"impl Send for PerfStatisticsFields","synthetic":true,"types":[]},{"text":"impl Send for PerfStatisticsDelta","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl Send for Runner","synthetic":true,"types":[]},{"text":"impl Send for RocksEngineCore","synthetic":true,"types":[]},{"text":"impl Send for RocksEngine","synthetic":true,"types":[]},{"text":"impl Send for TestEngineBuilder","synthetic":true,"types":[]},{"text":"impl Send for CfStatistics","synthetic":true,"types":[]},{"text":"impl Send for Statistics","synthetic":true,"types":[]},{"text":"impl Send for StatisticsSummary","synthetic":true,"types":[]},{"text":"impl Send for CbContext","synthetic":true,"types":[]},{"text":"impl Send for Modify","synthetic":true,"types":[]},{"text":"impl Send for WriteData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SnapContext&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ScanMode","synthetic":true,"types":[]},{"text":"impl Send for ErrorInner","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Lock","synthetic":true,"types":[]},{"text":"impl Send for WaitTimeout","synthetic":true,"types":[]},{"text":"impl Send for DummyLockManager","synthetic":true,"types":[]},{"text":"impl Send for CommandScanDetailsInner","synthetic":true,"types":[]},{"text":"impl Send for CommandScanDetailsDelegator","synthetic":true,"types":[]},{"text":"impl Send for CommandScanDetails2Inner","synthetic":true,"types":[]},{"text":"impl Send for CommandScanDetails2Delegator","synthetic":true,"types":[]},{"text":"impl Send for CommandScanDetails3Inner","synthetic":true,"types":[]},{"text":"impl Send for CommandScanDetails3Delegator","synthetic":true,"types":[]},{"text":"impl Send for CommandScanDetails","synthetic":true,"types":[]},{"text":"impl Send for SchedDurationVecInner","synthetic":true,"types":[]},{"text":"impl Send for SchedDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for SchedDurationVec","synthetic":true,"types":[]},{"text":"impl Send for ProcessingReadVecInner","synthetic":true,"types":[]},{"text":"impl Send for ProcessingReadVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for ProcessingReadVec","synthetic":true,"types":[]},{"text":"impl Send for KReadVecInner","synthetic":true,"types":[]},{"text":"impl Send for KReadVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for KReadVec","synthetic":true,"types":[]},{"text":"impl Send for KvCommandCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for KvCommandCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for KvCommandCounterVec","synthetic":true,"types":[]},{"text":"impl Send for SchedStageCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for SchedStageCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for SchedStageCounterVec2Inner","synthetic":true,"types":[]},{"text":"impl Send for SchedStageCounterVec2Delegator","synthetic":true,"types":[]},{"text":"impl Send for SchedStageCounterVec","synthetic":true,"types":[]},{"text":"impl Send for SchedLatchDurationVecInner","synthetic":true,"types":[]},{"text":"impl Send for SchedLatchDurationVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for SchedLatchDurationVec","synthetic":true,"types":[]},{"text":"impl Send for KvCommandKeysWrittenVecInner","synthetic":true,"types":[]},{"text":"impl Send for KvCommandKeysWrittenVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for KvCommandKeysWrittenVec","synthetic":true,"types":[]},{"text":"impl Send for SchedTooBusyVecInner","synthetic":true,"types":[]},{"text":"impl Send for SchedTooBusyVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for SchedTooBusyVec","synthetic":true,"types":[]},{"text":"impl Send for SchedCommandPriCounterVecInner","synthetic":true,"types":[]},{"text":"impl Send for SchedCommandPriCounterVecDelegator","synthetic":true,"types":[]},{"text":"impl Send for SchedCommandPriCounterVec","synthetic":true,"types":[]},{"text":"impl Send for StorageLocalMetrics","synthetic":true,"types":[]},{"text":"impl Send for CommandKind","synthetic":true,"types":[]},{"text":"impl Send for CommandStageKind","synthetic":true,"types":[]},{"text":"impl Send for CommandPriority","synthetic":true,"types":[]},{"text":"impl Send for GcKeysCF","synthetic":true,"types":[]},{"text":"impl Send for GcKeysDetail","synthetic":true,"types":[]},{"text":"impl Send for KV_COMMAND_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for KV_COMMAND_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Send for SCHED_STAGE_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for SCHED_STAGE_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for SCHED_WRITING_BYTES_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for SCHED_CONTEX_GAUGE","synthetic":true,"types":[]},{"text":"impl Send for SCHED_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for SCHED_HISTOGRAM_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Send for SCHED_LATCH_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for SCHED_LATCH_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for SCHED_PROCESSING_READ_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for SCHED_PROCESSING_READ_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Send for SCHED_PROCESSING_WRITE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for SCHED_TOO_BUSY_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for SCHED_TOO_BUSY_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for SCHED_COMMANDS_PRI_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for SCHED_COMMANDS_PRI_COUNTER_VEC_STATIC","synthetic":true,"types":[]},{"text":"impl Send for KV_COMMAND_KEYREAD_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for KV_COMMAND_KEYREAD_HISTOGRAM_STATIC","synthetic":true,"types":[]},{"text":"impl Send for KV_COMMAND_SCAN_DETAILS","synthetic":true,"types":[]},{"text":"impl Send for KV_COMMAND_SCAN_DETAILS_STATIC","synthetic":true,"types":[]},{"text":"impl Send for KV_COMMAND_KEYWRITE_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for KV_COMMAND_KEYWRITE_HISTOGRAM_VEC","synthetic":true,"types":[]},{"text":"impl Send for REQUEST_EXCEED_BOUND","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Mvcc&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Iter, Ob&gt; Send for MvccInfoScanner&lt;Iter, Ob&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ob: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MvccInfoCollector","synthetic":true,"types":[]},{"text":"impl Send for MvccChecksum","synthetic":true,"types":[]},{"text":"impl Send for MvccConflictCounterVec","synthetic":true,"types":[]},{"text":"impl Send for MvccDuplicateCmdCounterVec","synthetic":true,"types":[]},{"text":"impl Send for MvccCheckTxnStatusCounterVec","synthetic":true,"types":[]},{"text":"impl Send for MvccConflictKind","synthetic":true,"types":[]},{"text":"impl Send for MvccDuplicateCommandKind","synthetic":true,"types":[]},{"text":"impl Send for MvccCheckTxnStatusKind","synthetic":true,"types":[]},{"text":"impl Send for MVCC_VERSIONS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for GC_DELETE_VERSIONS_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for CONCURRENCY_MANAGER_LOCK_DURATION_HISTOGRAM","synthetic":true,"types":[]},{"text":"impl Send for MVCC_CONFLICT_COUNTER","synthetic":true,"types":[]},{"text":"impl Send for MVCC_DUPLICATE_CMD_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl Send for MVCC_CHECK_TXN_STATUS_COUNTER_VEC","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PointGetterBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PointGetter&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for TxnCommitRecord","synthetic":true,"types":[]},{"text":"impl Send for OverlappedWrite","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for MvccReader&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for BackwardKvScanner&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for EntryBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for HandleRes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Cursors&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for ForwardScanner&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LatestKvPolicy","synthetic":true,"types":[]},{"text":"impl Send for LatestEntryPolicy","synthetic":true,"types":[]},{"text":"impl Send for DeltaEntryPolicy","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ScannerBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Scanner&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for ScannerConfig&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for NewerTsCheckState","synthetic":true,"types":[]},{"text":"impl Send for GcInfo","synthetic":true,"types":[]},{"text":"impl Send for MissingLockAction","synthetic":true,"types":[]},{"text":"impl Send for ReleasedLock","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for MvccTxn&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for ErrorInner","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for AcquirePessimisticLock","synthetic":true,"types":[]},{"text":"impl Send for CheckSecondaryLocks","synthetic":true,"types":[]},{"text":"impl Send for SecondaryLockStatus","synthetic":true,"types":[]},{"text":"impl Send for CheckTxnStatus","synthetic":true,"types":[]},{"text":"impl Send for Cleanup","synthetic":true,"types":[]},{"text":"impl Send for Commit","synthetic":true,"types":[]},{"text":"impl Send for MvccByKey","synthetic":true,"types":[]},{"text":"impl Send for MvccByStartTs","synthetic":true,"types":[]},{"text":"impl Send for Pause","synthetic":true,"types":[]},{"text":"impl Send for PessimisticRollback","synthetic":true,"types":[]},{"text":"impl Send for Prewrite","synthetic":true,"types":[]},{"text":"impl Send for PrewritePessimistic","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for Prewriter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as PrewriteKind&gt;::Mutation: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Optimistic","synthetic":true,"types":[]},{"text":"impl Send for Pessimistic","synthetic":true,"types":[]},{"text":"impl Send for ResolveLock","synthetic":true,"types":[]},{"text":"impl Send for ResolveLockLite","synthetic":true,"types":[]},{"text":"impl Send for ResolveLockReadPhase","synthetic":true,"types":[]},{"text":"impl Send for Rollback","synthetic":true,"types":[]},{"text":"impl Send for TxnHeartBeat","synthetic":true,"types":[]},{"text":"impl Send for Command","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TypedCommand&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReleasedLocks","synthetic":true,"types":[]},{"text":"impl Send for ResponsePolicy","synthetic":true,"types":[]},{"text":"impl Send for WriteResult","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Send for WriteContext&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SchedLocalMetrics","synthetic":true,"types":[]},{"text":"impl Send for SchedPool","synthetic":true,"types":[]},{"text":"impl Send for SchedTicker","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl Send for CmdTimer","synthetic":true,"types":[]},{"text":"impl Send for TaskContext","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Send for SchedulerInner&lt;L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for Gc&lt;'a, S&gt;","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TransactionProperties&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CommitKind","synthetic":true,"types":[]},{"text":"impl Send for TransactionKind","synthetic":true,"types":[]},{"text":"impl Send for LockStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrewriteMutation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Latch","synthetic":true,"types":[]},{"text":"impl Send for Lock","synthetic":true,"types":[]},{"text":"impl Send for Latches","synthetic":true,"types":[]},{"text":"impl Send for TxnEntry","synthetic":true,"types":[]},{"text":"impl Send for EntryBatch","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SnapshotStore&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Send for FixtureStore","synthetic":true,"types":[]},{"text":"impl Send for FixtureStoreScanner","synthetic":true,"types":[]},{"text":"impl Send for ProcessResult","synthetic":true,"types":[]},{"text":"impl Send for ErrorInner","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for FuturePoolTicker&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Send for MvccInfo","synthetic":true,"types":[]},{"text":"impl Send for TxnStatus","synthetic":true,"types":[]},{"text":"impl Send for PrewriteResult","synthetic":true,"types":[]},{"text":"impl Send for PessimisticLockRes","synthetic":true,"types":[]},{"text":"impl Send for SecondaryLocksStatus","synthetic":true,"types":[]},{"text":"impl Send for StorageCallback","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; Send for Storage&lt;E, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, L&gt; Send for TestStorageBuilder&lt;E, L&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for Detector&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: StoreAddrResolver + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: PdClient + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Send for WaiterManager","synthetic":false,"types":[]},{"text":"impl !Send for PerfStatisticsInstant","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Engine, L:&nbsp;LockManager&gt; Send for Scheduler&lt;E, L&gt;","synthetic":false,"types":[]}];
implementors["tikv_alloc"] = [{"text":"impl Send for ProfError","synthetic":true,"types":[]},{"text":"impl Send for THREAD_MEMORY_MAP","synthetic":true,"types":[]},{"text":"impl Send for MemoryStatsAccessor","synthetic":true,"types":[]}];
implementors["tikv_jemalloc_ctl"] = [{"text":"impl Send for narenas","synthetic":true,"types":[]},{"text":"impl Send for narenas_mib","synthetic":true,"types":[]},{"text":"impl Send for malloc_conf","synthetic":true,"types":[]},{"text":"impl Send for malloc_conf_mib","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Name","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Mib&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MibStr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for abort","synthetic":true,"types":[]},{"text":"impl Send for abort_mib","synthetic":true,"types":[]},{"text":"impl Send for dss","synthetic":true,"types":[]},{"text":"impl Send for dss_mib","synthetic":true,"types":[]},{"text":"impl Send for narenas","synthetic":true,"types":[]},{"text":"impl Send for narenas_mib","synthetic":true,"types":[]},{"text":"impl Send for junk","synthetic":true,"types":[]},{"text":"impl Send for junk_mib","synthetic":true,"types":[]},{"text":"impl Send for zero","synthetic":true,"types":[]},{"text":"impl Send for zero_mib","synthetic":true,"types":[]},{"text":"impl Send for tcache","synthetic":true,"types":[]},{"text":"impl Send for tcache_mib","synthetic":true,"types":[]},{"text":"impl Send for lg_tcache_max","synthetic":true,"types":[]},{"text":"impl Send for lg_tcache_max_mib","synthetic":true,"types":[]},{"text":"impl Send for background_thread","synthetic":true,"types":[]},{"text":"impl Send for background_thread_mib","synthetic":true,"types":[]},{"text":"impl Send for allocated","synthetic":true,"types":[]},{"text":"impl Send for allocated_mib","synthetic":true,"types":[]},{"text":"impl Send for active","synthetic":true,"types":[]},{"text":"impl Send for active_mib","synthetic":true,"types":[]},{"text":"impl Send for metadata","synthetic":true,"types":[]},{"text":"impl Send for metadata_mib","synthetic":true,"types":[]},{"text":"impl Send for resident","synthetic":true,"types":[]},{"text":"impl Send for resident_mib","synthetic":true,"types":[]},{"text":"impl Send for mapped","synthetic":true,"types":[]},{"text":"impl Send for mapped_mib","synthetic":true,"types":[]},{"text":"impl Send for retained","synthetic":true,"types":[]},{"text":"impl Send for retained_mib","synthetic":true,"types":[]},{"text":"impl Send for allocatedp","synthetic":true,"types":[]},{"text":"impl Send for allocatedp_mib","synthetic":true,"types":[]},{"text":"impl Send for deallocatedp","synthetic":true,"types":[]},{"text":"impl Send for deallocatedp_mib","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for version","synthetic":true,"types":[]},{"text":"impl Send for version_mib","synthetic":true,"types":[]},{"text":"impl Send for background_thread","synthetic":true,"types":[]},{"text":"impl Send for background_thread_mib","synthetic":true,"types":[]},{"text":"impl Send for max_background_threads","synthetic":true,"types":[]},{"text":"impl Send for max_background_threads_mib","synthetic":true,"types":[]},{"text":"impl Send for epoch","synthetic":true,"types":[]},{"text":"impl Send for epoch_mib","synthetic":true,"types":[]}];
implementors["tikv_jemallocator"] = [{"text":"impl Send for Jemalloc","synthetic":true,"types":[]}];
implementors["tikv_util"] = [{"text":"impl Send for BufferVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WithConcatExtend&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for FsInfo","synthetic":true,"types":[]},{"text":"impl Send for ConfigError","synthetic":true,"types":[]},{"text":"impl Send for LogFormat","synthetic":true,"types":[]},{"text":"impl Send for ReadableSize","synthetic":true,"types":[]},{"text":"impl Send for OptionReadableSize","synthetic":true,"types":[]},{"text":"impl Send for ReadableDuration","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for VersionTrack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Tracker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TomlLine","synthetic":true,"types":[]},{"text":"impl Send for TomlWriter","synthetic":true,"types":[]},{"text":"impl Send for BatchCommandsWaker","synthetic":true,"types":[]},{"text":"impl&lt;T, C, A&gt; Send for MustCall&lt;T, C, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DeadlineError","synthetic":true,"types":[]},{"text":"impl Send for Deadline","synthetic":true,"types":[]},{"text":"impl Send for KeyBuilder","synthetic":true,"types":[]},{"text":"impl Send for RotatingFileLogger","synthetic":true,"types":[]},{"text":"impl Send for RotatingFileLoggerBuilder","synthetic":true,"types":[]},{"text":"impl Send for RotateByTime","synthetic":true,"types":[]},{"text":"impl Send for RotateBySize","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for TikvFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for RocksFormat&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for LogAndFuse&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for SlowLogFilter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SlowCostSerializer","synthetic":true,"types":[]},{"text":"impl Send for LogCost","synthetic":true,"types":[]},{"text":"impl&lt;N, R, S, T&gt; Send for LogDispatcher&lt;N, R, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; !Send for Record&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Send for ValueEntry&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; !Send for Trace&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl Send for Metrics","synthetic":true,"types":[]},{"text":"impl Send for ThreadsCollector","synthetic":true,"types":[]},{"text":"impl Send for CLK_TCK","synthetic":true,"types":[]},{"text":"impl Send for ThreadMetrics","synthetic":true,"types":[]},{"text":"impl Send for ThreadInfoStatistics","synthetic":true,"types":[]},{"text":"impl Send for TidRetriever","synthetic":true,"types":[]},{"text":"impl Send for ProcessCollector","synthetic":true,"types":[]},{"text":"impl Send for CLK_TCK","synthetic":true,"types":[]},{"text":"impl Send for PAGESIZE","synthetic":true,"types":[]},{"text":"impl Send for BOOT_TIME","synthetic":true,"types":[]},{"text":"impl Send for AllocStatsCollector","synthetic":true,"types":[]},{"text":"impl Send for HistogramReader","synthetic":true,"types":[]},{"text":"impl Send for CRITICAL_ERROR","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl Send for Notifier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for VecCollector","synthetic":true,"types":[]},{"text":"impl&lt;T, E, I, C&gt; Send for BatchReceiver&lt;T, E, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LooseBoundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for AsyncReadAsSyncStreamOfBytes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LiunxStyleCpuTime","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for MountInfoFieldPart1","synthetic":true,"types":[]},{"text":"impl Send for MountInfoFieldPart2","synthetic":true,"types":[]},{"text":"impl Send for MountPoint","synthetic":true,"types":[]},{"text":"impl Send for SubsysFields","synthetic":true,"types":[]},{"text":"impl Send for CGroupSubsys","synthetic":true,"types":[]},{"text":"impl Send for CGroup","synthetic":true,"types":[]},{"text":"impl Send for CGroupSys","synthetic":true,"types":[]},{"text":"impl Send for SysQuota","synthetic":true,"types":[]},{"text":"impl Send for SYS_INFO","synthetic":true,"types":[]},{"text":"impl Send for UnixSecs","synthetic":true,"types":[]},{"text":"impl Send for SlowTimer","synthetic":true,"types":[]},{"text":"impl Send for Monitor","synthetic":true,"types":[]},{"text":"impl Send for Instant","synthetic":true,"types":[]},{"text":"impl Send for CoarseClock","synthetic":true,"types":[]},{"text":"impl Send for ThreadReadId","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Timer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TimeoutTask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GLOBAL_TIMER_HANDLE","synthetic":true,"types":[]},{"text":"impl Send for TimeZero","synthetic":true,"types":[]},{"text":"impl Send for SteadyClock","synthetic":true,"types":[]},{"text":"impl Send for STEADY_CLOCK","synthetic":true,"types":[]},{"text":"impl Send for SteadyTimer","synthetic":true,"types":[]},{"text":"impl Send for GLOBAL_STEADY_TIMER","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Stopped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Scheduler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Worker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WORKER_PENDING_TASK_VEC","synthetic":true,"types":[]},{"text":"impl Send for WORKER_HANDLED_TASK_VEC","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ScheduleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RunnableWrapper&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Msg&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Scheduler&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LazyWorker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReceiverWrapper&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Builder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Worker","synthetic":true,"types":[]},{"text":"impl Send for Env","synthetic":true,"types":[]},{"text":"impl Send for FuturePool","synthetic":true,"types":[]},{"text":"impl Send for Full","synthetic":true,"types":[]},{"text":"impl Send for FUTUREPOOL_RUNNING_TASK_VEC","synthetic":true,"types":[]},{"text":"impl Send for FUTUREPOOL_HANDLED_TASK_VEC","synthetic":true,"types":[]},{"text":"impl Send for FUTUREPOOL_SCHEDULE_DURATION_VEC","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TickerWrapper&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for DefaultTicker","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for YatpPoolRunner&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for YatpPoolBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for DefaultRng","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DeferContext&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; Send for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RingQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MustConsumeVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send&gt; Send for LruCache&lt;K, V&gt;","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Send for Date","synthetic":true,"types":[]},{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ConversionRange","synthetic":true,"types":[]},{"text":"impl Send for ComponentRange","synthetic":true,"types":[]},{"text":"impl Send for IndeterminateOffset","synthetic":true,"types":[]},{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl Send for Instant","synthetic":true,"types":[]},{"text":"impl Send for OffsetDateTime","synthetic":true,"types":[]},{"text":"impl Send for PrimitiveDateTime","synthetic":true,"types":[]},{"text":"impl Send for Sign","synthetic":true,"types":[]},{"text":"impl Send for Time","synthetic":true,"types":[]},{"text":"impl Send for UtcOffset","synthetic":true,"types":[]},{"text":"impl Send for Weekday","synthetic":true,"types":[]}];
implementors["tipb"] = [{"text":"impl Send for FieldType","synthetic":true,"types":[]},{"text":"impl Send for Expr","synthetic":true,"types":[]},{"text":"impl Send for RpnExpr","synthetic":true,"types":[]},{"text":"impl Send for ByItem","synthetic":true,"types":[]},{"text":"impl Send for ExprType","synthetic":true,"types":[]},{"text":"impl Send for ScalarFuncSig","synthetic":true,"types":[]},{"text":"impl Send for ChecksumRewriteRule","synthetic":true,"types":[]},{"text":"impl Send for ChecksumRequest","synthetic":true,"types":[]},{"text":"impl Send for ChecksumResponse","synthetic":true,"types":[]},{"text":"impl Send for ChecksumScanOn","synthetic":true,"types":[]},{"text":"impl Send for ChecksumAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for AnalyzeReq","synthetic":true,"types":[]},{"text":"impl Send for AnalyzeIndexReq","synthetic":true,"types":[]},{"text":"impl Send for AnalyzeColumnsReq","synthetic":true,"types":[]},{"text":"impl Send for AnalyzeMixedResp","synthetic":true,"types":[]},{"text":"impl Send for AnalyzeColumnsResp","synthetic":true,"types":[]},{"text":"impl Send for AnalyzeIndexResp","synthetic":true,"types":[]},{"text":"impl Send for Bucket","synthetic":true,"types":[]},{"text":"impl Send for Histogram","synthetic":true,"types":[]},{"text":"impl Send for FmSketch","synthetic":true,"types":[]},{"text":"impl Send for SampleCollector","synthetic":true,"types":[]},{"text":"impl Send for CmSketchRow","synthetic":true,"types":[]},{"text":"impl Send for CmSketchTopN","synthetic":true,"types":[]},{"text":"impl Send for CmSketch","synthetic":true,"types":[]},{"text":"impl Send for AnalyzeType","synthetic":true,"types":[]},{"text":"impl Send for Row","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for SelectResponse","synthetic":true,"types":[]},{"text":"impl Send for Chunk","synthetic":true,"types":[]},{"text":"impl Send for RowMeta","synthetic":true,"types":[]},{"text":"impl Send for DagRequest","synthetic":true,"types":[]},{"text":"impl Send for ChunkMemoryLayout","synthetic":true,"types":[]},{"text":"impl Send for UserIdentity","synthetic":true,"types":[]},{"text":"impl Send for StreamResponse","synthetic":true,"types":[]},{"text":"impl Send for EncodeType","synthetic":true,"types":[]},{"text":"impl Send for Endian","synthetic":true,"types":[]},{"text":"impl Send for TableInfo","synthetic":true,"types":[]},{"text":"impl Send for ColumnInfo","synthetic":true,"types":[]},{"text":"impl Send for IndexInfo","synthetic":true,"types":[]},{"text":"impl Send for KeyRange","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Executor","synthetic":true,"types":[]},{"text":"impl Send for ExchangeSender","synthetic":true,"types":[]},{"text":"impl Send for ExchangeReceiver","synthetic":true,"types":[]},{"text":"impl Send for TableScan","synthetic":true,"types":[]},{"text":"impl Send for Join","synthetic":true,"types":[]},{"text":"impl Send for IndexScan","synthetic":true,"types":[]},{"text":"impl Send for Selection","synthetic":true,"types":[]},{"text":"impl Send for Projection","synthetic":true,"types":[]},{"text":"impl Send for Aggregation","synthetic":true,"types":[]},{"text":"impl Send for TopN","synthetic":true,"types":[]},{"text":"impl Send for Limit","synthetic":true,"types":[]},{"text":"impl Send for Kill","synthetic":true,"types":[]},{"text":"impl Send for ExecutorExecutionSummary","synthetic":true,"types":[]},{"text":"impl Send for ExecType","synthetic":true,"types":[]},{"text":"impl Send for ExchangeType","synthetic":true,"types":[]},{"text":"impl Send for EngineType","synthetic":true,"types":[]},{"text":"impl Send for JoinType","synthetic":true,"types":[]},{"text":"impl Send for JoinExecType","synthetic":true,"types":[]},{"text":"impl Send for InUnionMetadata","synthetic":true,"types":[]},{"text":"impl Send for CompareInMetadata","synthetic":true,"types":[]}];
implementors["tipb_helper"] = [{"text":"impl Send for ExprDefBuilder","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl Send for DirBuilder","synthetic":true,"types":[]},{"text":"impl Send for File","synthetic":true,"types":[]},{"text":"impl Send for OpenOptions","synthetic":true,"types":[]},{"text":"impl Send for ReadDir","synthetic":true,"types":[]},{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for PollEvented&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Stderr","synthetic":true,"types":[]},{"text":"impl Send for Stdin","synthetic":true,"types":[]},{"text":"impl Send for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; Send for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized, W:&nbsp;?Sized&gt; Send for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DuplexStream","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, B&gt; Send for StreamReader&lt;S, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReaderStream&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl Send for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl Send for ReuniteError","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]},{"text":"impl Send for SendHalf","synthetic":true,"types":[]},{"text":"impl Send for RecvHalf","synthetic":true,"types":[]},{"text":"impl Send for ReuniteError","synthetic":true,"types":[]},{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RecvHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SendHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedSendHalf","synthetic":true,"types":[]},{"text":"impl Send for OwnedRecvHalf","synthetic":true,"types":[]},{"text":"impl Send for ReuniteError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl Send for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl Send for ReuniteError","synthetic":true,"types":[]},{"text":"impl Send for UnixStream","synthetic":true,"types":[]},{"text":"impl Send for UCred","synthetic":true,"types":[]},{"text":"impl Send for Command","synthetic":true,"types":[]},{"text":"impl Send for Child","synthetic":true,"types":[]},{"text":"impl Send for ChildStdin","synthetic":true,"types":[]},{"text":"impl Send for ChildStdout","synthetic":true,"types":[]},{"text":"impl Send for ChildStderr","synthetic":true,"types":[]},{"text":"impl Send for JoinError","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl Send for TryCurrentError","synthetic":true,"types":[]},{"text":"impl Send for Runtime","synthetic":true,"types":[]},{"text":"impl Send for SignalKind","synthetic":true,"types":[]},{"text":"impl Send for Signal","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for StreamMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Barrier","synthetic":true,"types":[]},{"text":"impl Send for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl Send for ClosedError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for OwnedMutexGuard&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryLockError","synthetic":true,"types":[]},{"text":"impl Send for Notify","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DelayQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for Delay","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Instant","synthetic":true,"types":[]},{"text":"impl Send for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Elapsed","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Throttle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Registration","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for ReadHalf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for WriteHalf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for JoinHandle&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for RwLockReadGuard&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for RwLockWriteGuard&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tokio_executor"] = [{"text":"impl !Send for Enter","synthetic":true,"types":[]},{"text":"impl Send for EnterError","synthetic":true,"types":[]},{"text":"impl Send for SpawnError","synthetic":true,"types":[]},{"text":"impl Send for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl !Send for ParkThread","synthetic":true,"types":[]},{"text":"impl Send for ParkError","synthetic":true,"types":[]},{"text":"impl Send for UnparkThread","synthetic":true,"types":[]}];
implementors["tokio_openssl"] = [{"text":"impl&lt;S&gt; Send for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_timer"] = [{"text":"impl Send for Clock","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DelayQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Expired&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Throttle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ThrottleError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Send for Timer&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Turn","synthetic":true,"types":[]},{"text":"impl Send for Delay","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Interval","synthetic":true,"types":[]}];
implementors["tokio_tls"] = [{"text":"impl&lt;S&gt; Send for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TlsConnector","synthetic":true,"types":[]},{"text":"impl Send for TlsAcceptor","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Send for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Send for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl Send for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl Send for LinesCodec","synthetic":true,"types":[]},{"text":"impl Send for LinesCodecError","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;'a, T&gt; Send for Locked&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for TryLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Send for XxHash64","synthetic":true,"types":[]},{"text":"impl Send for XxHash32","synthetic":true,"types":[]}];
implementors["txn_types"] = [{"text":"impl Send for LockType","synthetic":true,"types":[]},{"text":"impl Send for Lock","synthetic":true,"types":[]},{"text":"impl Send for TimeStamp","synthetic":true,"types":[]},{"text":"impl Send for TsSet","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for MutationType","synthetic":true,"types":[]},{"text":"impl Send for Mutation","synthetic":true,"types":[]},{"text":"impl Send for OldValue","synthetic":true,"types":[]},{"text":"impl Send for TxnExtra","synthetic":true,"types":[]},{"text":"impl Send for WriteType","synthetic":true,"types":[]},{"text":"impl Send for Write","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WriteRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ErrorInner","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Send for B0","synthetic":true,"types":[]},{"text":"impl Send for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Z0","synthetic":true,"types":[]},{"text":"impl Send for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Send for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Send for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Greater","synthetic":true,"types":[]},{"text":"impl Send for Less","synthetic":true,"types":[]},{"text":"impl Send for Equal","synthetic":true,"types":[]}];
implementors["unchecked_index"] = [{"text":"impl&lt;S&gt; Send for UncheckedIndex&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S&gt; Send for UniCase&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Ascii&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for BidiClass","synthetic":true,"types":[]},{"text":"impl Send for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Send for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Send for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl Send for GraphemeIncomplete","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Send for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Mark","synthetic":true,"types":[]},{"text":"impl Send for EndOfInput","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S&gt; Send for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Origin","synthetic":true,"types":[]},{"text":"impl Send for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["utf8parse"] = [{"text":"impl Send for Parser","synthetic":true,"types":[]}];
implementors["uuid"] = [{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Hyphenated","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for HyphenatedRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Simple","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SimpleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Urn","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UrnRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Variant","synthetic":true,"types":[]},{"text":"impl Send for Uuid","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; Send for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for WalkDir","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl Send for Giver","synthetic":true,"types":[]},{"text":"impl Send for Taker","synthetic":true,"types":[]},{"text":"impl Send for SharedGiver","synthetic":true,"types":[]},{"text":"impl Send for Closed","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl&lt;'a&gt; Send for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl Send for TextPosition","synthetic":true,"types":[]},{"text":"impl Send for XmlVersion","synthetic":true,"types":[]},{"text":"impl Send for Namespace","synthetic":true,"types":[]},{"text":"impl Send for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParserConfig","synthetic":true,"types":[]},{"text":"impl Send for XmlEvent","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EventReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Events&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EmitterError","synthetic":true,"types":[]},{"text":"impl Send for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["yatp"] = [{"text":"impl Send for MULTILEVEL_LEVEL_ELAPSED","synthetic":true,"types":[]},{"text":"impl Send for MULTILEVEL_LEVEL0_CHANCE","synthetic":true,"types":[]},{"text":"impl Send for SchedConfig","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CloneRunnerBuilder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Remote&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Local&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ThreadPool&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for MultilevelRunnerBuilder&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MultilevelRunner&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Extras","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for QueueType","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl Send for TaskCell","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Handle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Runner","synthetic":true,"types":[]},{"text":"impl Send for Task","synthetic":true,"types":[]},{"text":"impl Send for TaskCell","synthetic":true,"types":[]},{"text":"impl Send for Runner","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Send for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Send for ZSTD_CCtx_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_DCtx_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_strategy","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_cParameter","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_bounds","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_ResetDirective","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_dParameter","synthetic":true,"types":[]},{"text":"impl !Send for ZSTD_inBuffer_s","synthetic":true,"types":[]},{"text":"impl !Send for ZSTD_outBuffer_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_EndDirective","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_CDict_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_DDict_s","synthetic":true,"types":[]},{"text":"impl Send for ZDICT_params_t","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()