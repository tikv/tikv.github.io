(function() {var implementors = {};
implementors["ahash"] = [{"text":"impl&lt;T, S, '_, '_&gt; BitOr&lt;&amp;'_ AHashSet&lt;T, S&gt;&gt; for &amp;'_ AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["cdc"] = [{"text":"impl BitOr&lt;FeatureGate&gt; for FeatureGate","synthetic":false,"types":[]}];
implementors["darling_core"] = [{"text":"impl BitOr&lt;Flag&gt; for Flag","synthetic":false,"types":[]}];
implementors["dashmap"] = [{"text":"impl&lt;'a, K:&nbsp;'a + Eq + Hash, V:&nbsp;'a, S:&nbsp;BuildHasher + Clone, Q:&nbsp;?Sized, '_&gt; BitOr&lt;&amp;'_ Q&gt; for &amp;'a DashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Borrow&lt;Q&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Hash + Eq,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, 'b, T, S1, S2&gt; BitOr&lt;&amp;'b IndexSet&lt;T, S2&gt;&gt; for &amp;'a IndexSet&lt;T, S1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: BuildHasher + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["linked_hash_set"] = [{"text":"impl&lt;'a, 'b, T, S&gt; BitOr&lt;&amp;'b LinkedHashSet&lt;T, S&gt;&gt; for &amp;'a LinkedHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl BitOr&lt;PollOpt&gt; for PollOpt","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;Ready&gt;&gt; BitOr&lt;T&gt; for Ready","synthetic":false,"types":[]},{"text":"impl BitOr&lt;UnixReady&gt; for UnixReady","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl BitOr&lt;AtFlags&gt; for AtFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;OFlag&gt; for OFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SealFlag&gt; for SealFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;FdFlag&gt; for FdFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SpliceFFlags&gt; for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;FallocateFlags&gt; for FallocateFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;ModuleInitFlags&gt; for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;DeleteModuleFlags&gt; for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;MsFlags&gt; for MsFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;MntFlags&gt; for MntFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;MQ_OFlag&gt; for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;FdFlag&gt; for FdFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;InterfaceFlags&gt; for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;PollFlags&gt; for PollFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;CloneFlags&gt; for CloneFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;EpollFlags&gt; for EpollFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;EpollCreateFlags&gt; for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;EfdFlags&gt; for EfdFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;MemFdCreateFlag&gt; for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;ProtFlags&gt; for ProtFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;MapFlags&gt; for MapFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;MsFlags&gt; for MsFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;MlockAllFlags&gt; for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Options&gt; for Options","synthetic":false,"types":[]},{"text":"impl BitOr&lt;QuotaValidFlags&gt; for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SaFlags&gt; for SaFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SfdFlags&gt; for SfdFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SockFlag&gt; for SockFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;MsgFlags&gt; for MsgFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SFlag&gt; for SFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Mode&gt; for Mode","synthetic":false,"types":[]},{"text":"impl BitOr&lt;FsFlags&gt; for FsFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;InputFlags&gt; for InputFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;OutputFlags&gt; for OutputFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;ControlFlags&gt; for ControlFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;LocalFlags&gt; for LocalFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;WaitPidFlag&gt; for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;AddWatchFlags&gt; for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;InitFlags&gt; for InitFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;TimerFlags&gt; for TimerFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;TimerSetTimeFlags&gt; for TimerSetTimeFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;AccessFlags&gt; for AccessFlags","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl BitOr&lt;CMSOptions&gt; for CMSOptions","synthetic":false,"types":[]},{"text":"impl BitOr&lt;OcspFlag&gt; for OcspFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Pkcs7Flags&gt; for Pkcs7Flags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SslOptions&gt; for SslOptions","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SslMode&gt; for SslMode","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SslVerifyMode&gt; for SslVerifyMode","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SslSessionCacheMode&gt; for SslSessionCacheMode","synthetic":false,"types":[]},{"text":"impl BitOr&lt;ExtensionContext&gt; for ExtensionContext","synthetic":false,"types":[]},{"text":"impl BitOr&lt;ShutdownState&gt; for ShutdownState","synthetic":false,"types":[]},{"text":"impl BitOr&lt;X509CheckFlags&gt; for X509CheckFlags","synthetic":false,"types":[]}];
implementors["procfs"] = [{"text":"impl BitOr&lt;NFSServerCaps&gt; for NFSServerCaps","synthetic":false,"types":[]},{"text":"impl BitOr&lt;StatFlags&gt; for StatFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;CoredumpFlags&gt; for CoredumpFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;FDPermissions&gt; for FDPermissions","synthetic":false,"types":[]}];
implementors["raftstore"] = [{"text":"impl BitOr&lt;PeerTicks&gt; for PeerTicks","synthetic":false,"types":[]},{"text":"impl BitOr&lt;ProposalContext&gt; for ProposalContext","synthetic":false,"types":[]}];
implementors["subtle"] = [{"text":"impl BitOr&lt;Choice&gt; for Choice","synthetic":false,"types":[]}];
implementors["tidb_query_datatype"] = [{"text":"impl BitOr&lt;FieldTypeFlag&gt; for FieldTypeFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;WeekMode&gt; for WeekMode","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Flags&gt; for Flags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SqlMode&gt; for SqlMode","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Flag&gt; for Flag","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl BitOr&lt;B0&gt; for B0","synthetic":false,"types":[]},{"text":"impl BitOr&lt;B1&gt; for B0","synthetic":false,"types":[]},{"text":"impl&lt;Rhs:&nbsp;Bit&gt; BitOr&lt;Rhs&gt; for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned&gt; BitOr&lt;U&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Bit, U:&nbsp;Unsigned&gt; BitOr&lt;UTerm&gt; for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, Ur:&nbsp;Unsigned&gt; BitOr&lt;UInt&lt;Ur, B0&gt;&gt; for UInt&lt;Ul, B0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: BitOr&lt;Ur&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, Ur:&nbsp;Unsigned&gt; BitOr&lt;UInt&lt;Ur, B1&gt;&gt; for UInt&lt;Ul, B0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: BitOr&lt;Ur&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, Ur:&nbsp;Unsigned&gt; BitOr&lt;UInt&lt;Ur, B0&gt;&gt; for UInt&lt;Ul, B1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: BitOr&lt;Ur&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, Ur:&nbsp;Unsigned&gt; BitOr&lt;UInt&lt;Ur, B1&gt;&gt; for UInt&lt;Ul, B1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: BitOr&lt;Ur&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()