initSidebarItems({"enum":[["CertificateRequestType",""],["CheckResult","Used to indicate the result of the check. If it returns `Abort`, skip the subsequent checkers and abort the grpc call."],["CompressionAlgorithms","The various compression algorithms supported by gRPC (not sorted by compression level)"],["CompressionLevel","Compression levels allow a party with knowledge of its peer's accepted encodings to request compression in an abstract way. The level-algorithm mapping is performed internally and depends on the peer's supported compression algorithms."],["ConnectivityState","Connectivity state of a channel."],["Error","Errors generated from this library."],["LbPolicy",""],["MethodType","Method types supported by gRPC."],["OptTarget","The optimization target for a [`Channel`]."]],"fn":[["pb_de",""],["pb_ser",""],["redirect_log","Redirect grpc log to rust's log implementation."]],"struct":[["AuthContext","To perform server-side authentication, gRPC exposes the authentication context for each call. The context exposes important authentication-related information about the RPC such as the type of security/authentication type being used and the peer identity."],["AuthProperty","Auth properties are elements of the AuthContext. They have a name (a key of type string) and a value which can be a string or binary data."],["AuthPropertyIter",""],["CallOption","Options for calls made by client."],["Channel","A gRPC channel."],["ChannelBuilder","[`Channel`] factory in order to configure the properties."],["ChannelCredentials","Client-side SSL credentials."],["ChannelCredentialsBuilder","[`ChannelCredentials`] factory in order to configure the properties."],["Client","A generic client for making RPC calls."],["ClientCStreamReceiver","A receiver for client streaming call."],["ClientDuplexReceiver","A response receiver for duplex call."],["ClientSStreamReceiver","A receiver for server streaming call."],["ClientStreamingSink","A sink for client streaming call."],["ClientStreamingSinkResult",""],["ClientUnaryReceiver","A receiver for unary request."],["Deadline",""],["DuplexSink","A sink for duplex streaming call."],["DuplexSinkFailure",""],["EnvBuilder","[`Environment`] factory in order to configure the properties."],["Environment","An object that used to control concurrency and start gRPC event loop."],["GrpcSlice","A convenient rust wrapper for the type `grpc_slice`."],["Marshaller","Defines how to serialize and deserialize between the specialized type and byte slice."],["Metadata","A collection of metadata entries that can be exchanged during a call."],["MetadataBuilder","Builder for immutable Metadata."],["MetadataIter","Immutable metadata iterator"],["Method","A description of a remote method."],["RequestStream","A stream for client a streaming call and a duplex streaming call."],["ResourceQuota","ResourceQuota represents a bound on memory and thread usage by the gRPC. NOTE: The management of threads created in grpc-core don't use ResourceQuota. TODO: Manage the poller threads created in grpc-rs with this ResourceQuota later."],["RpcContext","A context for rpc handling."],["RpcStatus","RPC result returned from the server."],["RpcStatusCode","An gRPC status code structure. This type contains constants for all gRPC status codes."],["Server","A gRPC server."],["ServerBuilder","[`Server`] factory in order to configure the properties."],["ServerCredentials","Server-side SSL credentials."],["ServerCredentialsBuilder","[`ServerCredentials`] factory in order to configure the properties."],["ServerStreamingSink","A sink for server streaming call."],["ServerStreamingSinkFailure",""],["Service","A gRPC service."],["ServiceBuilder","[`Service`] factory in order to configure the properties."],["ShutdownFuture","A `Future` that will resolve when shutdown completes."],["StreamingCallSink","A sink for client streaming call and duplex streaming call. To close the sink properly, you should call `close` before dropping."],["UnarySink","A sink for unary call."],["UnarySinkResult",""],["WriteFlags","Flags for write operations."]],"trait":[["ServerChecker",""],["ServerCredentialsFetcher","Traits to retrieve updated SSL server certificates, private keys, and trusted CAs (for client authentication)."]],"type":[["ClientCStreamSender","A sink for client streaming call."],["ClientDuplexSender","A sink for duplex streaming call."],["MessageReader",""],["Result","Type alias to use this library's [`Error`] type in a `Result`."]]});