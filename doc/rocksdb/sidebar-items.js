initSidebarItems({"enum":[["CompactionFilterDecision","Decision used in `CompactionFilter::filter`."],["CompactionFilterValueType",""],["CompactionPriority",""],["CompactionReason",""],["DBBackgroundErrorReason",""],["DBBottommostLevelCompaction",""],["DBCompactionStyle",""],["DBCompressionType",""],["DBEncryptionMethod",""],["DBEntryType",""],["DBInfoLogLevel",""],["DBRateLimiterMode",""],["DBRecoveryMode",""],["DBStatisticsHistogramType",""],["DBStatisticsTickerType","This file is generated from generate.py. Re-generate it if you upgrade to a new version of RocksDB."],["DBTitanDBBlobRunMode",""],["IndexType",""],["PerfLevel",""],["SstPartitionerResult",""],["WriteStallCondition",""]],"fn":[["get_perf_level",""],["new_bloom_filter",""],["new_compaction_filter",""],["new_compaction_filter_factory",""],["new_compaction_filter_raw","Just like `new_compaction_filter`, but returns a raw pointer instead of a RAII struct. Generally used in `CompactionFilterFactory::create_compaction_filter`."],["set_perf_level",""]],"mod":[["comparator",""],["logger",""],["merge_operator",""],["rocksdb",""],["rocksdb_options",""],["sst_partitioner",""],["table_properties_rc","This provides reference-counted abstractions around table properties collections. It is used by tikv in its own engine abstractions, to avoid the complexities of lifetimes in associated types."]],"struct":[["ColumnFamilyMetaData",""],["CompactionFilterContext",""],["CompactionFilterFactoryHandle",""],["CompactionFilterHandle",""],["CompactionJobInfo",""],["DBCompactionFilter",""],["DBStatusPtr",""],["FileEncryptionInfo",""],["FlushJobInfo",""],["IOStatsContext",""],["IngestionInfo",""],["LevelMetaData",""],["PerfContext",""],["SstFileMetaData",""],["TableProperties",""],["TablePropertiesCollection",""],["TablePropertiesCollectionView",""],["TitanBlobIndex",""],["TitanDBOptions",""],["UserCollectedProperties",""],["WriteBatch",""],["WriteBatchRef",""],["WriteStallInfo",""]],"trait":[["CompactionFilter","`CompactionFilter` allows an application to modify/delete a key-value at the time of compaction. For more details, Please checkout rocksdb's documentation."],["CompactionFilterFactory",""],["EncryptionKeyManager",""],["EventListener","EventListener trait contains a set of call-back functions that will be called when specific RocksDB event happens such as flush.  It can be used as a building block for developing custom features such as stats-collector or external compaction algorithm."],["SliceTransform",""],["TableFilter",""],["TablePropertiesCollector","`TablePropertiesCollector` provides the mechanism for users to collect their own properties that they are interested in. This class is essentially a collection of callback functions that will be invoked during table building. It is constructed with TablePropertiesCollectorFactory. The methods don't need to be thread-safe, as we will create exactly one TablePropertiesCollector object per table and then call it sequentially"],["TablePropertiesCollectorFactory","Constructs `TablePropertiesCollector`. Internals create a new `TablePropertiesCollector` for each new table."]]});