initSidebarItems({"constant":[["DIGEST_BUFFER_SIZE",""],["SPACE_PLACEHOLDER_FILE",""]],"enum":[["BytesFetcher",""],["IOOp",""],["IOType",""]],"fn":[["calc_crc32","Calculates the given file's Crc32 checksum."],["calc_crc32_and_size","Calculates crc32 and decrypted size for a given reader."],["calc_crc32_bytes","Calculates the given content's CRC32 checksum."],["canonicalize","Returns the canonical, absolute form of a path with all intermediate components normalized and symbolic links resolved."],["copy","Copies the contents of one file to another. This function will also copy the permission bits of the original file to the destination file."],["copy_and_sync","Copies the contents and permission bits of one file to another, then synchronizes."],["copy_imp",""],["create_dir","Creates a new, empty directory at the provided path"],["create_dir_all","Recursively create a directory and all of its parent components if they are missing."],["create_dir_if_not_exist","Creates a new, empty directory at the provided path. Returns `true` on success, `false` if the directory already exists. Otherwise the raw error will be returned."],["delete_dir_if_exist","Deletes given path from file system. Returns `true` on success, `false` if the directory doesn't exist. Otherwise the raw error will be returned."],["delete_file_if_exist","Deletes given path from file system. Returns `true` on success, `false` if the file doesn't exist. Otherwise the raw error will be returned."],["file_exists",""],["get_file_size",""],["get_io_rate_limiter",""],["get_io_type",""],["hard_link","Creates a new hard link on the filesystem."],["init_io_snooper",""],["initial_buffer_size","Indicates how large a buffer to pre-allocate before reading the entire file."],["metadata","Given a path, query the file system to get information about a file, directory, etc."],["read","Read the entire contents of a file into a bytes vector."],["read_dir","Returns an iterator over the entries within a directory."],["read_link","Reads a symbolic link, returning the file that the link points to."],["read_to_string","Read the entire contents of a file into a string."],["remove_dir","Removes an empty directory."],["remove_dir_all","Removes a directory at this path, after removing all its contents. Use carefully!"],["remove_file","Removes a file from the filesystem."],["rename","Rename a file or directory to a new name, replacing the original file if `to` already exists."],["reserve_space_for_recover","Create a file with hole, to reserve space for TiKV."],["set_io_rate_limiter",""],["set_io_type",""],["set_permissions","Changes the permissions found on a file or a directory."],["sha256",""],["symlink_metadata","Query the metadata about a file without following symlinks."],["sync_dir","Call fsync on directory by its path"],["write","Write a slice as the entire contents of a file."]],"mod":[["file",""],["iosnoop",""],["metrics",""],["metrics_manager",""],["rate_limiter",""]],"struct":[["DirBuilder","A builder used to create directories in various manners."],["DirEntry","Entries returned by the [`ReadDir`] iterator."],["File","A wrapper around `std::fs::File` with capability to track and regulate IO flow."],["FileType","A structure representing a type of file with accessors for each file type. It is returned by [`Metadata::file_type`] method."],["IOBytes",""],["IORateLimiter","No-op limiter An instance of `IORateLimiter` should be safely shared between threads."],["IORateLimiterStatistics","Record accumulated bytes through of different types. Used for testing and metrics."],["Metadata","Metadata information about a file."],["MetricsManager",""],["OpenOptions",""],["Permissions","Representation of the various permissions on a file."],["ReadDir","Iterator over the entries in a directory."],["Sha256Reader","Wrapper of a reader which computes its SHA-256 hash while reading."],["WithIORateLimit",""],["WithIOType",""]]});