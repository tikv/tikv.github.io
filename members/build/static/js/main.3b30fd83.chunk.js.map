{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","query","queryString","parse","window","location","search","useState","members","setMembers","useEffect","a","fetch","name","resp","json","body","fetchData","className","MemberGroup","group","techLeaders","committers","reviewers","activeContributors","key","map","member","githubName","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAIe,SAASA,EAAIC,GAC1B,IAAMC,EAAQC,IAAYC,MAAMC,OAAOC,SAASC,QADf,EAEHC,mBAAS,MAFN,mBAE1BC,EAF0B,KAEjBC,EAFiB,KAajC,OATAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACqBC,MAAM,+DAAD,OAAgEX,EAAMY,KAAtE,qBAD1B,cACQC,EADR,gBAEqBA,EAAKC,OAF1B,OAEQC,EAFR,OAGEP,EAAWO,GAHb,4CADc,uBAAC,WAAD,wBAMdC,KACC,CAAChB,EAAMY,OAEK,MAAXL,EAAwB,KAG1B,yBAAKU,UAAU,OACb,4BAAKV,EAAQK,MAEb,kBAACM,EAAD,CAAaC,MAAM,eAAeZ,QAASA,EAAQa,cACnD,kBAACF,EAAD,CAAaC,MAAM,aAAaZ,QAASA,EAAQc,aACjD,kBAACH,EAAD,CAAaC,MAAM,YAAYZ,QAASA,EAAQe,YAChD,kBAACJ,EAAD,CAAaC,MAAM,sBAAqBZ,QAASA,EAAQgB,sBAK/D,SAASL,EAAYnB,GACnB,OACE,yBAAKyB,IAAKzB,EAAMoB,OACd,4BAAKpB,EAAMoB,OACX,4BACGpB,EAAMQ,QAAQkB,KAAI,SAACC,GAAD,OAAY,wBAAIF,IAAKE,EAAOC,YAAaD,EAAOC,iBCxBvDC,QACW,cAA7BzB,OAAOC,SAASyB,UAEe,UAA7B1B,OAAOC,SAASyB,UAEhB1B,OAAOC,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3b30fd83.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport queryString from 'query-string'\n\nexport default function App(props) {\n  const query = queryString.parse(window.location.search)\n  const [members, setMembers] = useState(null)\n\n  useEffect(() => {\n    async function fetchData() {\n      const resp = await fetch(`https://raw.githubusercontent.com/tikv/community/master/sig/${query.name}/membership.json`)\n      const body = await resp.json()\n      setMembers(body)\n    }\n    fetchData()\n  }, [query.name])\n\n  if (members == null) return null\n\n  return (\n    <div className=\"App\">\n      <h1>{members.name}</h1>\n      \n      <MemberGroup group=\"Tech Leaders\" members={members.techLeaders} />\n      <MemberGroup group=\"Committers\" members={members.committers} />\n      <MemberGroup group=\"Reviewers\" members={members.reviewers} />\n      <MemberGroup group=\"Active contributors\"members={members.activeContributors} />\n    </div>\n  );\n}\n\nfunction MemberGroup(props) {\n  return (\n    <div key={props.group}>\n      <h2>{props.group}</h2>\n      <ul>\n        {props.members.map((member) => <li key={member.githubName}>{member.githubName}</li>)}\n      </ul>\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}